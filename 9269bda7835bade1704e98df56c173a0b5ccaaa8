{
  "comments": [
    {
      "key": {
        "uuid": "5db11d05_2fd91378",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-09T15:17:19Z",
      "side": 1,
      "message": "x0 only",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d2924d4_4f2c3b80",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1000327
      },
      "writtenOn": "2020-06-09T16:47:09Z",
      "side": 1,
      "message": "this is weak function hence hence used only x0. but idea behind clobber list x0 - x14 is giving every architecture flexibility to modify as many register as they want to find out scu availability.",
      "parentUuid": "5db11d05_2fd91378",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ba3177_27a9a610",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-06-10T06:29:31Z",
      "side": 1,
      "message": "\u0027Can clobber only: x0-x14\u0027  is appropriate as here you want to impose restriction on AAPCS.",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eff3a98_fa2041f4",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-09T15:17:19Z",
      "side": 1,
      "message": "why here but not after line #95?",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e008934_d93cccb4",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000327
      },
      "writtenOn": "2020-06-09T16:47:09Z",
      "side": 1,
      "message": "in case patch is not being applied, return value should be as in register x2, ERRATA_NOT_APPIES.\nhence not at #95. I could have program differently but did not want to change much in logic. wanted to keep same as much as possible like before.",
      "parentUuid": "3eff3a98_fa2041f4",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d310af49_13009ed1",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-12T13:22:12Z",
      "side": 1,
      "message": "This is a waste of CPU\u0027s cycles and power.",
      "parentUuid": "9e008934_d93cccb4",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e242e25a_ba7b8bbb",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-06-22T12:06:11Z",
      "side": 1,
      "message": "@Alexei I feel this is readable considering we need to map the return from \u0027is_scu_present_in_dsu\u0027 to ERRATA_NOT_APPLIES/APPLIES.",
      "parentUuid": "d310af49_13009ed1",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d53f87e_6e345069",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-22T13:54:36Z",
      "side": 1,
      "message": "@Sandeep Tripathy\nfunc check_errata_dsu_936184\n\tmov\tx15, x30\n\tbl\tis_scu_present_in_dsu\n\tcmp\tx0, xzr\n\n\t/* Default error status */\n\tmov\tx0, #ERRATA_NOT_APPLIES\n\n\t/* If SCU is not present, return without applying patch */\n\tb.eq\t1f\n\tmov\tx3, #ERRATA_APPLIES\n\t\n\t/* Erratum applies only if DSU has the ACP interface */\n\tmrs\tx1, CLUSTERCFR_EL1\n\tubfx\tx1, x1, #CLUSTERCFR_ACP_SHIFT, #1\n\tcbz\tx1, 1f\n\n\t/* If ACP is present, check if DSU is older than r2p0 */\n\tmrs\tx1, CLUSTERIDR_EL1\n\n\t/* DSU variant and revision bitfields in CLUSTERIDR are adjacent */\n\tubfx\tx2, x1, #CLUSTERIDR_REV_SHIFT,\\\n\t\t\t#(CLUSTERIDR_REV_BITS + CLUSTERIDR_VAR_BITS)\n\tmov\tx1, #(0x2 \u003c\u003c CLUSTERIDR_VAR_SHIFT)\n\tcmp\tx2, x1\n\tcsel\tx0, x0, x3, hs\n1:\n\tret\tx15\nendfunc check_errata_dsu_936184",
      "parentUuid": "e242e25a_ba7b8bbb",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ba2766f_4c2ab10b",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-06-22T17:24:26Z",
      "side": 1,
      "message": "Much better.",
      "parentUuid": "7d53f87e_6e345069",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b002401b_4b0c3e23",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000327
      },
      "writtenOn": "2020-06-24T05:22:43Z",
      "side": 1,
      "message": "Thanks Alexi, I\u0027ll incorporate this code.",
      "parentUuid": "5ba2766f_4c2ab10b",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebc2df01_96193d7d",
        "filename": "lib/cpus/aarch64/dsu_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-25T19:02:11Z",
      "side": 1,
      "message": "It will be even better if you move\nmov\tx3, #ERRATA_APPLIES\nsomewhere after \n        cbz\tx1, 1f\nand before\n        csel\tx0, x0, x3, hs\n\nor you could get rid of \"mov\tx3, #ERRATA_APPLIES\" with\n        cmp\tx2, x1\n        b.hs    1f\n        mov     x0, #ERRATA_APPLIES  \n1:\n\tret\tx15",
      "parentUuid": "b002401b_4b0c3e23",
      "revId": "9269bda7835bade1704e98df56c173a0b5ccaaa8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}