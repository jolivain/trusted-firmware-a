{
  "comments": [
    {
      "key": {
        "uuid": "f68dee69_7e711a0f",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T15:03:01Z",
      "side": 1,
      "message": "this is still an unsafe memcpy. The size parameter is useless, if you don\u0027t do any checks. I think you\u0027re missing the point here. Both source and destination must be the same size, or the destination buffer must be able to hold the data in the source without overflows. Use size to ensure one of the conditions is true, before doing the memcpy..",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "785334fb_e8c4a2b4",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T17:03:54Z",
      "side": 1,
      "message": "Explain what checks should be done for \"data\" to ensure that \"both source and destination must be the same size\" and what point I\u0027m missing here?",
      "parentUuid": "f68dee69_7e711a0f",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "078dacc2_4e7e4466",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T17:14:19Z",
      "side": 1,
      "message": "lets say a caller passes a size of TCG_DIGEST_SIZE * 5(programming error, or purposely). The memcpy will copy data past the end of the bl2_hash into data, which can cause crash or the memcpy would leak unnecessary data into the callers buffer.\nThe checks are as follows; if (size \u003c buffer length of bl2_hash) error out, or copy only size bytes of data.\nif (size \u003e buffer length of bl2_hash) copy only buffer length of bl2_hash.\nYou at least need an assert to catch these conditions in debug builds given that this api is not to be used during boot, so the asserts will catch programming errors. Is that clear ?",
      "parentUuid": "785334fb_e8c4a2b4",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c17edbe_71986d0d",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T17:34:52Z",
      "side": 1,
      "message": "1. The original version didn\u0027t have \"size\" parameter, so caller, which is add_event2() in measured boot driver code couldn\u0027t pass a size of TCG_DIGEST_SIZE * 5, and only TCG_DIGEST_SIZE bytes were copied by memcpy().\n\n2. If you think that this declaration in \"fconf_tbbr_getter.h\" is not safe enough to copy TCG_DIGEST_SIZE from bl2_hash_data:\n\nstruct tbbr_dyn_config_t {\n\tuint32_t disable_auth;\n\tvoid *mbedtls_heap_addr;\n\tsize_t mbedtls_heap_size;\n#if MEASURED_BOOT\n\tuint8_t bl2_hash_data[TCG_DIGEST_SIZE];\n#endif\n};\n. then explain which FCONF API should be used to get size of bl2_hash_data[].",
      "parentUuid": "078dacc2_4e7e4466",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fea919f_8f185734",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T17:43:05Z",
      "side": 1,
      "message": "That is an FCONF API deficiency and was one of the things i asked during the fconf presentation. By creating more flexibility, we have created new problems such as this, so it requires care on the part of the developers to make sure there are no overflows and add checks/asserts as required.\nThe checks i gave above are ideal checks. You can change them as if (size \u003c TCG_DIGEST_SIZE) error/panic or assert(size \u003e\u003d TCG_DIGEST_SIZE). Or, change the memcpy to memcpy(data, bl2_hash, min(size, TCG_DIGEST_SIZE). The point ultimately is you have to have bounds checking, dont assume that a caller will give you correctly sized buffers.",
      "parentUuid": "4c17edbe_71986d0d",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fc8fca5_f3a7f0a1",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T18:09:54Z",
      "side": 1,
      "message": "OK, then what checks are needed for the original original version without \"size\" parameter and only TCG_DIGEST_SIZE bytes are copied by memcpy()?",
      "parentUuid": "9fea919f_8f185734",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8827cff_4466806c",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T18:13:29Z",
      "side": 1,
      "message": "The only one which comes to my mind is \nCASSERT(sizeof(bl2_hash_data) \u003d\u003d TCG_DIGEST_SIZE, assert_bl2_hash_size_mismatch);\nwhich is nonsense.",
      "parentUuid": "6fc8fca5_f3a7f0a1",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfbfa6af_e0dc9725",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T18:17:34Z",
      "side": 1,
      "message": "A version that does not take size is a problem, and a version that takes size and does not do any checks on it is also a problem. You need to have both. Not sure i understand your point above.",
      "parentUuid": "c8827cff_4466806c",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed9c3b18_cf7ba1a8",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T18:28:37Z",
      "side": 1,
      "message": "What is the problem with:\nuint8_t bl2_hash_data[TCG_DIGEST_SIZE];\n(void)memcpy(data, bl2_hash, TCG_DIGEST_SIZE);\n?\nThe only reasonable solution is to add:\n    assert (ptr - event_log + TCG_DIGEST_SIZE \u003c\u003d sizeof(event_log));\nbefore calling\n    bl2_plat_get_hash(ptr);",
      "parentUuid": "bfbfa6af_e0dc9725",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "305fe688_20530a9f",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T18:32:46Z",
      "side": 1,
      "message": "the problem is that the size of the buffer pointed to by data, may be \u003c TCG_DIGEST_SIZE. If that is the case you have caused a buffer overflow!",
      "parentUuid": "ed9c3b18_cf7ba1a8",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3162c341_d3d48542",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T18:50:10Z",
      "side": 1,
      "message": "The size of the buffer pointed to by data is checked by\nassert (ptr - event_log + TCG_DIGEST_SIZE \u003c\u003d sizeof(event_log));\nand ptr \u003d data here\n\nadd_event2() calls\nassert (ptr - event_log + TCG_DIGEST_SIZE \u003c\u003d sizeof(event_log));\nbl2_plat_get_hash(ptr);\nwhich calls\narm_bl2_get_hash(data) where ptr \u003d data, calling\n\nvoid arm_bl2_get_hash(void *data)\n{\n\tassert(data !\u003d NULL);\n\n\t/* Retrieve the BL2 hash data from the DTB */\n\tvoid *bl2_hash \u003d FCONF_GET_PROPERTY(tbbr, dyn_config, bl2_hash_data);\n\t(void)memcpy(data, bl2_hash, TCG_DIGEST_SIZE);\n}\nwith uint8_t bl2_hash_data[TCG_DIGEST_SIZE];\n\nWhere is the problem here?",
      "parentUuid": "305fe688_20530a9f",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46096409_a039e62e",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-06-10T19:26:06Z",
      "side": 1,
      "message": "This might seem a bit more palatable. Thoughts?\n\nvoid arm_bl2_get_hash(void *data, int size)\n{\n\tassert(data !\u003d NULL);\n        assert(size \u003e\u003d TCG_DIGEST_SIZE);\n\n\t/* Retrieve the BL2 hash data from the DTB */\n\tvoid *bl2_hash \u003d FCONF_GET_PROPERTY(tbbr, dyn_config, bl2_hash_data);\n\t(void)memcpy(data, bl2_hash, TCG_DIGEST_SIZE);\n}",
      "parentUuid": "3162c341_d3d48542",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59b93291_f8653170",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T20:12:46Z",
      "side": 1,
      "message": "@Alexei, True, if you are looking at it only from ARM platform\u0027s point of view. The file is in plat/arm/common/arm_dyn_cfg.c. A lot of this code is generic, and other platforms may(and likely will) use/compile it into their platform port. arm_bl2_get_hash() is not a static function either and could potentially be called from anywhere and you may have different call flows. In general, we don\u0027t design code for one use case/call flow, especially if it is not scoped static and make assumptions about who the callers are and how it is called. Instead, you assume non-static functions can be called from anywhere and you either make assertions or checks on parameters.\nVarun\u0027s suggestion works(which is what i suggested in an earlier comment).",
      "parentUuid": "46096409_a039e62e",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05bf23af_d363d153",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-11T12:07:17Z",
      "side": 1,
      "message": "@varunw-nvidia:\n1. \"size\" must be of size_t type but not int\n2. \"size\" is not needed at all because TCG_DIGEST_SIZE bytes are always copied from bl2_hash which is \"uint8_t bl2_hash_data[TCG_DIGEST_SIZE]\"\n3. I\u0027ll add \nassert (ptr - event_log + TCG_DIGEST_SIZE \u003c\u003d sizeof(event_log));\n   before calling\nbl2_plat_get_hash(ptr)\n   to make sure that there\u0027s enough space in Event Log buffer to read hash to.\n4. I\u0027ll add\nassert(data !\u003d NULL);\n   as you suggested.\n\n@Raghu K:\nWhat\u0027s about memcpy() implementation itself in lib\\libc\\memcpy.c, which is generic, not a static function which is called from anywhere and doesn\u0027t check validaty of any parameters passed and that there is enough space in memory buffers addressed by both pointers?\nIs there any problem with this function from your point of view?\n\nint memcmp(const void *s1, const void *s2, size_t len)\n{\n\tconst unsigned char *s \u003d s1;\n\tconst unsigned char *d \u003d s2;\n\tunsigned char sc;\n\tunsigned char dc;\n\n\twhile (len--) {\n\t\tsc \u003d *s++;\n\t\tdc \u003d *d++;\n\t\tif (sc - dc)\n\t\t\treturn (sc - dc);\n\t}\n\n\treturn 0;\n}",
      "parentUuid": "59b93291_f8653170",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3e21872_e207f456",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-11T12:11:29Z",
      "side": 1,
      "message": "assert(data !\u003d NULL); was already in the code.",
      "parentUuid": "05bf23af_d363d153",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ec32f01_03b62678",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-11T16:35:50Z",
      "side": 1,
      "message": "@alexei, absolutely! memcpy has a problem!:) We should be using memcpy_s or an equivalent! :) But since mempcy_s does not exist, the onus is on developers who use memcpy to fill the gap between memcpy and memcpy_s. If we can deprecate memcpy and move it to memcpy_s that would be ideal!",
      "parentUuid": "a3e21872_e207f456",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ed414ec_02df171b",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-06-12T05:32:34Z",
      "side": 1,
      "message": "@Alexei I\u0027m not convinced that we have make this too complex. But, I would like to understand your perspective on not adding the size checks inside the platform code. Can you please help me understand?",
      "parentUuid": "2ec32f01_03b62678",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}