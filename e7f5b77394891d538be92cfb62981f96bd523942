{
  "comments": [
    {
      "key": {
        "uuid": "f68dee69_7e711a0f",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T15:03:01Z",
      "side": 1,
      "message": "this is still an unsafe memcpy. The size parameter is useless, if you don\u0027t do any checks. I think you\u0027re missing the point here. Both source and destination must be the same size, or the destination buffer must be able to hold the data in the source without overflows. Use size to ensure one of the conditions is true, before doing the memcpy..",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "785334fb_e8c4a2b4",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T17:03:54Z",
      "side": 1,
      "message": "Explain what checks should be done for \"data\" to ensure that \"both source and destination must be the same size\" and what point I\u0027m missing here?",
      "parentUuid": "f68dee69_7e711a0f",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "078dacc2_4e7e4466",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T17:14:19Z",
      "side": 1,
      "message": "lets say a caller passes a size of TCG_DIGEST_SIZE * 5(programming error, or purposely). The memcpy will copy data past the end of the bl2_hash into data, which can cause crash or the memcpy would leak unnecessary data into the callers buffer.\nThe checks are as follows; if (size \u003c buffer length of bl2_hash) error out, or copy only size bytes of data.\nif (size \u003e buffer length of bl2_hash) copy only buffer length of bl2_hash.\nYou at least need an assert to catch these conditions in debug builds given that this api is not to be used during boot, so the asserts will catch programming errors. Is that clear ?",
      "parentUuid": "785334fb_e8c4a2b4",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c17edbe_71986d0d",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T17:34:52Z",
      "side": 1,
      "message": "1. The original version didn\u0027t have \"size\" parameter, so caller, which is add_event2() in measured boot driver code couldn\u0027t pass a size of TCG_DIGEST_SIZE * 5, and only TCG_DIGEST_SIZE bytes were copied by memcpy().\n\n2. If you think that this declaration in \"fconf_tbbr_getter.h\" is not safe enough to copy TCG_DIGEST_SIZE from bl2_hash_data:\n\nstruct tbbr_dyn_config_t {\n\tuint32_t disable_auth;\n\tvoid *mbedtls_heap_addr;\n\tsize_t mbedtls_heap_size;\n#if MEASURED_BOOT\n\tuint8_t bl2_hash_data[TCG_DIGEST_SIZE];\n#endif\n};\n. then explain which FCONF API should be used to get size of bl2_hash_data[].",
      "parentUuid": "078dacc2_4e7e4466",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fea919f_8f185734",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-06-10T17:43:05Z",
      "side": 1,
      "message": "That is an FCONF API deficiency and was one of the things i asked during the fconf presentation. By creating more flexibility, we have created new problems such as this, so it requires care on the part of the developers to make sure there are no overflows and add checks/asserts as required.\nThe checks i gave above are ideal checks. You can change them as if (size \u003c TCG_DIGEST_SIZE) error/panic or assert(size \u003e\u003d TCG_DIGEST_SIZE). Or, change the memcpy to memcpy(data, bl2_hash, min(size, TCG_DIGEST_SIZE). The point ultimately is you have to have bounds checking, dont assume that a caller will give you correctly sized buffers.",
      "parentUuid": "4c17edbe_71986d0d",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fc8fca5_f3a7f0a1",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T18:09:54Z",
      "side": 1,
      "message": "OK, then what checks are needed for the original original version without \"size\" parameter and only TCG_DIGEST_SIZE bytes are copied by memcpy()?",
      "parentUuid": "9fea919f_8f185734",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8827cff_4466806c",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 13
      },
      "lineNbr": 180,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-10T18:13:29Z",
      "side": 1,
      "message": "The only one which comes to my mind is \nCASSERT(sizeof(bl2_hash_data) \u003d\u003d TCG_DIGEST_SIZE, assert_bl2_hash_size_mismatch);\nwhich is nonsense.",
      "parentUuid": "6fc8fca5_f3a7f0a1",
      "revId": "e7f5b77394891d538be92cfb62981f96bd523942",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}