{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ec6eec21_76c1f94e",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-04-08T12:51:13Z",
      "side": 1,
      "message": "Remove this dependency",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7ab95ec_61599509",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-04-14T17:02:28Z",
      "side": 1,
      "message": "i dont htink this should be removed for drtm..even for folks who simply want to run and test, it is best that thye know and enable trusted boot, and know that running without trusted boot would compromise integrity of DCRTM.\nAlso not sure the following statement is accurate. Trusted boot is only required to ensure integrity of the DCRTM no?\nseems weird that you need authenticated boot to trust data provided by dce preamble, which is untrusted..",
      "parentUuid": "ec6eec21_76c1f94e",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ad4bfa0_bd78656b",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-04-14T17:08:04Z",
      "side": 1,
      "message": "infact this is only required because DCRTM is BL31...if it was in some immutable rom or its integrity was ensured by other means, this wouldnt/shouldnt be required.",
      "parentUuid": "e7ab95ec_61599509",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c740d343_f36b4111",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-04-14T18:11:43Z",
      "side": 1,
      "message": "Hi Raghu, Thanks for putting your thoughts! Below is my understanding -\n1. TRUSTED_BOARD_BOOT dependency on DRTM is to ensure D-CRTM and DCE are trusted entities. Note: DCE and D-CRTM are not separate entities in the current implementation, and are part of BL31. This will change if the implementation evolve to have NS-DCE.\n\n2. D-CRTM accepts TCB hashes from early boot stage components running in NS-world (for UEFI based firmware it is prior to EndofDxe phase) and eventually pass them to DLME [1]. \nTo trust on these TCB hashes, it is important to trust this early boot stage component. My bad, the current statement does not provide these details, let me modify it to make it clear.\n\nAlso, agree if platform makes different provision to ensure integrity of the BL31 and early boot stage component of NS-world then TRUSTED_BOARD_BOOT dependency is not needed.\nI think of RESET_TO_BL31 case here where platform ensures integrity of BL31, and other NS-components via some other mean.\n\nI will retain this TRUSTED BOOT dependency on DRTM, but will add a statement that it is not needed if the platform ensures trustworthiness of BL31 and early boot stage component of NS-world component in their own way. Do you agree?\n\n[1] https://developer.arm.com/documentation/den0113/latest - Refer section 4.1",
      "parentUuid": "2ad4bfa0_bd78656b",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61352e17_f9cfd9e8",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-04-14T19:12:19Z",
      "side": 1,
      "message": "Agree with #1. Just to double check, you agree DCE Preamble is not trusted?\nI\u0027ve raised #2 as a concern with Stuart. The trusted tcb hashes need to be provided and authorized in a different manner and relying on trusted board boot to authorize that and on UEFI (who we are effectively trying to remove trust on), does not seem right. In fact, in [1], there is an explicit statement in section 2.2 - \u0027A key characteristic of DRTM is that the new TCB established by the DRTM boot chain does not have a trust dependency on the SRTM trust chain or anything else which executed prior to the DL Event. A dynamic launch can be initiated any number of times on a running system.\"\n\nDoes this design of providing tcb hashes violate the statement by having a trust dependency on \"anything else that executed prior to the dl event\"?\n\nIt is okay to have these TCB hashes as a signed blob that possibly has its own independent key and revocation/rollback policies that the dlme consumes, but it should not be made part of trusted board boot.",
      "parentUuid": "c740d343_f36b4111",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c71f6a14_639decd8",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-04-14T19:14:22Z",
      "side": 1,
      "message": "The important distinction is that we dont \"Trust UEFI code\" to provide the tcb hashes, that defeats DRTM entirely. If UEFI is exploited, trusting it to provide the right TCB hashes means a compromised UEFI can entirely compromise DRTM..",
      "parentUuid": "61352e17_f9cfd9e8",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "134d0441_6d309707",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-04-18T07:53:10Z",
      "side": 1,
      "message": "\u003e Agree with #1. Just to double check, you agree DCE Preamble is not trusted?\nAgree, the DCE preamble should not be trusted.\n\n\u003e The important distinction is that we dont \"Trust UEFI code\" to provide the tcb hashes, that defeats DRTM entirely. If UEFI is exploited, trusting it to provide the right TCB hashes means a compromised UEFI can entirely compromise DRTM..\nGot your point. I will check with the team internally again regarding the trustworthiness of the UEFI code in DRTM. \nI believe we both agreed that BL31 is a trusted one for DRTM, and so DRTM must rely on TRUSTED_BOARD_BOOT. The TRUSTED_BOARD_BOOT build option is meant for BL1,BL2, therefore this statement is invalid for platforms that reset to BL31 anyways (such platforms have their own methods for trusting BL31). Do you agree?",
      "parentUuid": "c71f6a14_639decd8",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e73e967a_115e37bf",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-04-18T20:21:58Z",
      "side": 1,
      "message": "agree. Integrity of Bl31 in that case should be ensured by other means in that case.",
      "parentUuid": "134d0441_6d309707",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d56a4a75_19db6926",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-04-20T18:12:36Z",
      "side": 1,
      "message": "Hi Raghu, I had an internal discussion with the team and below are our understandings -\n\n1. Runtime TCB hash management is not included in DRTM implementation phase-I delivery. Even the developed PoC [1] supports only statically placed TCB hashes, so we are left with only trusting BL31. We will discuss runtime TCB hash management separately.\n2. When describing DRTM support, it is not necessary to explicitly state that BL31 must be a trusted entity as in general, BL31 must be a trusted entity, as it supports all SMC implementations.\n\nIn short, we think it is better not to mention any dependencies for DRTM implementation.\n\nPlease let me know what you think? I will update this patch accordingly.\n\n[1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/log/?h\u003dtopics/arm-drtm-poc",
      "parentUuid": "e73e967a_115e37bf",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cb047a2_babff8a3",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000621
      },
      "writtenOn": "2022-04-20T19:01:12Z",
      "side": 1,
      "message": "Hi Raghu,\n\nThanks for your comments.\n\nI will let Stuart respond to your concern, once he is back in May.  I work on the DRTM PoC and mean to share my understanding of Arm DRTM, in case it helps address the concern now.\n\n\n\u003e I\u0027ve raised #2 as a concern with Stuart. The trusted tcb hashes need to be provided and authorized in a different manner and relying on trusted board boot to authorize that and on UEFI (who we are effectively trying to remove trust on), does not seem right. In fact, in [1], there is an explicit statement in section 2.2 - \u0027A key characteristic of DRTM is that the new TCB established by the DRTM boot chain does not have a trust dependency on the SRTM trust chain or anything else which executed prior to the DL Event. A dynamic launch can be initiated any number of times on a running system.\"\n\u003e\n\nAs you point out in a previous comment, DRTM overcomes the secure \u003d\u003e brittle problem with the SRTM trust chain: Thanks to DRTM the SRTM trust chain can be shorter (a smaller TCB), allowing for a \"gap\" between the SRTM trust chain and the DRTM trust chain.  An application of DRTM may indeed seek to exclude most of UEFI from the TCB, i.e. leave it in the \"gap\".\n\n\n\u003e Does this design of providing tcb hashes violate the statement by having a trust dependency on \"anything else that executed prior to the dl event\"?\n\u003e\n\nI think there could be a nuance to the explicit statement in section 2.2, perceivable possibly in context with the associated Figure 2.  Namely, that \u0027the DRTM boot chain does not have a trust dependency on the [*entire*] [*old*] SRTM trust chain ...\u0027.  That is, our working assumption has been that DRTM may still rely on the SRTM trust chain, now that it can be shortened.\n\n\n\u003e It is okay to have these TCB hashes as a signed blob that possibly has its own independent key and revocation/rollback policies that the dlme consumes, but it should not be made part of trusted board boot.\n\u003e\n\nFor the avoidance of doubt, providing TCB hashes is designated for DLME\u0027s authentication of TCB components generated at runtime (e.g. data like ACPI tables).  The challenge with accepting signed blobs of TCB components would be how to entrust the key to the signer, who is in the Normal World.  Our working model has been that authenticated or measured boot (SRTM) could be leveraged.\n\nI hope this helps explain some of this.",
      "parentUuid": "e73e967a_115e37bf",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8338c45_b98fd84f",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-04-22T10:17:02Z",
      "side": 1,
      "message": "I have one observation on \"We dont Trust UEFI code\", By UEFI code do you mean all phases of UEFI including DXE ? TCB hashes are supposed to be recorded before end of DXE event. Isn\u0027t it a valid scenario where you trust UEFI until end of DXE. (refer to 3.9.2 in spec)",
      "parentUuid": "8cb047a2_babff8a3",
      "range": {
        "startLine": 539,
        "startChar": 47,
        "endLine": 539,
        "endChar": 65
      },
      "revId": "45e174bd23253bee3e4611e40b12e68509d6c225",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}