{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f2b929b4_42198250",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 7,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2023-06-13T13:04:21Z",
      "side": 1,
      "message": "Looks like initially build flag had been introduced, but removed in latest patches.\nCommit message need to be updated accordingly.",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8211dd6_7bb74804",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 7,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-13T13:28:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2b929b4_42198250",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffa846f4_7168e97e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 11,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2023-06-13T13:04:21Z",
      "side": 1,
      "message": "it",
      "range": {
        "startLine": 11,
        "startChar": 38,
        "endLine": 11,
        "endChar": 40
      },
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dc03b2f_b933d07b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 11,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-13T13:28:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffa846f4_7168e97e",
      "range": {
        "startLine": 11,
        "startChar": 38,
        "endLine": 11,
        "endChar": 40
      },
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be575390_fa0679e1",
        "filename": "Makefile",
        "patchSetId": 26
      },
      "lineNbr": 525,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2023-06-13T13:04:21Z",
      "side": 1,
      "message": "remove this line",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2097d97_aa682a09",
        "filename": "Makefile",
        "patchSetId": 26
      },
      "lineNbr": 525,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-16T11:40:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be575390_fa0679e1",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab8e6a46_130e35f6",
        "filename": "include/arch/aarch64/el2_common_macros.S",
        "patchSetId": 26
      },
      "lineNbr": 97,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-06-13T08:49:54Z",
      "side": 1,
      "message": "This file is only used for FVP_R (based on R-class) which only executes in Secure no NS execution. So effectively PMU is unused.",
      "range": {
        "startLine": 97,
        "startChar": 20,
        "endLine": 97,
        "endChar": 66
      },
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f3f9e17_7e9f0a54",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 26
      },
      "lineNbr": 142,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T13:07:00Z",
      "side": 1,
      "message": "as discussed previously, keep the redundant PMU init in el3_common_macros.  This is similar to other bit which control features being initialized here (Like TRF, SPME, TPM etc.",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01ba98fd_ec4beaf4",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 26
      },
      "lineNbr": 142,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T13:32:27Z",
      "side": 1,
      "message": "I insist on this change. This entire patch stack hinges on removing as many of these bits from here as possible and putting them in a more coherent place. There are several patches above which do just that (eg \"set MDCR_EL3/CPTR_EL3 bits in respective feat_enable_el3() only\").\n\nI would be willing to delay this being removed until the patch that introduces cm_manage_extensions_el3() and calls it in the entrypoints if this would be critical. But cleaning up these redundancies is vital in my opinion and the patches above make sure there is no loss of function (or intention!) by doing all of this.",
      "parentUuid": "7f3f9e17_7e9f0a54",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "291003e2_9ae8f3f7",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 26
      },
      "lineNbr": 142,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T14:06:17Z",
      "side": 1,
      "message": "I just went to the top of stack and I see that there is a new function doing this (cm_manage_extensions_el3())\n\nSo now , we need to define what needs to happen at reset vs within this cm_manage_extensions_el3() and I have given a comment to moves this to top of bl31_main().\n\nAt reset, bits that are essential for correct execution of EL3 firmware, + settings that protect security and prevent debug of EL3 firmware must be applied. \n\nNow whether MCCD and SCCD count as such a security which needs to be applied at reset is the question. \n\nAlso I think the refactoring still applies even if we think MCCD and SCCD are important enough to be applied early.\n\nOne think to keep in mind is that there are platform hooks which run early (which may have confidential computation), so PMU counters running during that time make have some effect. Also some counters can be export events which means even thought the count is reset to zero, the effect of the count can be visible elsewhere. \n\nNow keeping these aspects in mind, and also the above criteria , a decision can be made.",
      "parentUuid": "01ba98fd_ec4beaf4",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f65deab_7f16091d",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 26
      },
      "lineNbr": 142,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T16:50:41Z",
      "side": 1,
      "message": "Right, I believe I have preserved all of this security. The argument for moving these bits is that the end goal of them is that we do not leak any compute information to a lower EL (regardless of security state). There are two ways to achieve this: First the current one, which is to disable counting as soon as possible. The second, is to allow counting up to the first el3_exit, but clear the counters just before it and make sure that it is disabled henceforth. This relies on the assumption that to leak a value to a lower EL we must enter that EL so anything that happens before (first) entry is irrelevant as long as counters are zero upon entry.\n\nI believe these two are equivalent. I implement this second variant as I think it\u0027s more manageable in code (each bit can be grouped with a function for the relevant extension).\n\nThis is also why I do not touch the SDD debug bit - I haven\u0027t found a similar guarantee and that does appear to be have to be set as early as possible.",
      "parentUuid": "291003e2_9ae8f3f7",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f551077_011e2c8b",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 26
      },
      "lineNbr": 142,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-15T23:07:50Z",
      "side": 1,
      "message": "\u003e The second, is to allow counting up to the first el3_exit, but clear the counters just before it and make sure that it is disabled henceforth\n\nYes, this is the problem as PMU_EL0.X allows export of PMU events to another device via IMP def bus, so clearing it is not sufficient. As long as this is done very early in bl31_main() and also warmboot path, the risk remains small.",
      "parentUuid": "8f65deab_7f16091d",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "952744ea_d4cd3941",
        "filename": "include/lib/extensions/pmuv3.h",
        "patchSetId": 26
      },
      "lineNbr": 15,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T13:07:00Z",
      "side": 1,
      "message": "pmuv3_reset_hpmn() seems a better way to describe the operations being done related to PMU in this function. See suggested renames in other files.",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 17
      },
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec7e631a_7495cf07",
        "filename": "include/lib/extensions/pmuv3.h",
        "patchSetId": 26
      },
      "lineNbr": 15,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T13:32:27Z",
      "side": 1,
      "message": "Ack, will continue discussion in those comments",
      "parentUuid": "952744ea_d4cd3941",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 17
      },
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d71002cd_50fa2d01",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 26
      },
      "lineNbr": 269,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T13:07:00Z",
      "side": 1,
      "message": "Call pmuv3_reset_hpmn() here.",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81164e07_3371088f",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 26
      },
      "lineNbr": 269,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T13:32:27Z",
      "side": 1,
      "message": "As the PMU is an extension (I understand it is mandatory for practically all armv8+ implementations), I want to treat it as such with this patch. This includes putting it in manage_extensions_\u003cwhichever\u003e() to logically separate things. I would like to not backtrack on this, keep things neat, and leave this for \"core\" stuff.\n\nAgain, I\u0027m trying to establish a pattern for all features. A \"public API\" of ~6 function for each if you will. I think we\u0027d be convoluting the top level manage_extensions_\u003cwhatever\u003e if I did that in each feature.",
      "parentUuid": "d71002cd_50fa2d01",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1257b782_aa8ed695",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 26
      },
      "lineNbr": 269,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-15T23:07:50Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "81164e07_3371088f",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eae1e9ce_cf3f817d",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 26
      },
      "lineNbr": 269,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-16T11:40:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1257b782_aa8ed695",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee678037_44384081",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 26
      },
      "lineNbr": 543,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T13:07:00Z",
      "side": 1,
      "message": "Since this is a function invoked for protection of EL3 and is not specific on NS, it doesn\u0027t have to be here but call this in bl31_main().",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83e45742_793ccba6",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 26
      },
      "lineNbr": 543,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T13:32:27Z",
      "side": 1,
      "message": "please read the patches above. I clean up _all_ other features in a similar manner to the PMU and then I do approximately what you are suggesting.",
      "parentUuid": "ee678037_44384081",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce6b62ad_b645fad0",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 26
      },
      "lineNbr": 543,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-15T23:07:50Z",
      "side": 1,
      "message": "probably it is easier to merge on a piecemeal fashion if the framework to to this early in Bl31_main() and warmboot entry is pulled down the patch stack. else we need all the patches to be approved before it can be merged.",
      "parentUuid": "83e45742_793ccba6",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45bf9c73_0d443015",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 26
      },
      "lineNbr": 543,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-16T11:40:20Z",
      "side": 1,
      "message": "I hadn\u0027t thought of that, I\u0027ve squashed the 2 patches to the patch on the bottom.",
      "parentUuid": "ce6b62ad_b645fad0",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72cefb4e_d295531d",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 24,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T13:07:00Z",
      "side": 1,
      "message": "This is only needed for NS. Call this pmuv3_reset_hpmn() and make this a static inline function in pmuv3.h",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 17
      },
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b260c73c_1650403e",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 24,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T13:32:27Z",
      "side": 1,
      "message": "Ack, continuing discussion in the last comment",
      "parentUuid": "72cefb4e_d295531d",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 17
      },
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9717d718_a04e7f29",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 94,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T13:07:00Z",
      "side": 1,
      "message": "Set the LC bit as well as it is configuring the PMU to overflow on 64 bit rather than 31 bit.",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5d84ac2_49c8e1ba",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 94,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T13:32:27Z",
      "side": 1,
      "message": "what\u0027s the point? EL3 disables the PMU for itself, it will never count during its execution so it doesn\u0027t matter if it overflows on bit 31 or 63. Any lower EL will overwrite this register for its own use.",
      "parentUuid": "9717d718_a04e7f29",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f6e69bf_778b0cdd",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 94,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T14:06:17Z",
      "side": 1,
      "message": "It is just going by the principle of \"not changing what does not need to be changed\". Since this was done earlier, unless there is a good reason to change it, might as well keep this around. We never know if the lower EL was depending on this behaviour at EL3 and suddenly it finds that the behavior of overflow has chnaged. Hence to avoid unnecessary changes, it is better to keep the same behavior.",
      "parentUuid": "d5d84ac2_49c8e1ba",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bad7fea5_089a6f2c",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 94,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T16:50:41Z",
      "side": 1,
      "message": "Ah, I\u0027m glad you clarified, because in that case this is entirely the wrong approach. Whatever value we write here will be overwritten at el3_exit since PMCR_EL0 is context switched. As this value is currently not initialized anywhere, all worlds should see an all-zero value.\n\nI could add this to pmuv3_enable() with all of these bits set. And I do think the function would then deserve its name.",
      "parentUuid": "9f6e69bf_778b0cdd",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26283da9_b2dfcfa7",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 94,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-15T23:07:50Z",
      "side": 1,
      "message": "hmm, yes, I get confused as these values are only for EL3 runtime and gets replaced with world specific value during el3_exit. OK.",
      "parentUuid": "bad7fea5_089a6f2c",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "561b4b2a_71011251",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 94,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-16T11:40:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26283da9_b2dfcfa7",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6618b36f_3a10164d",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 97,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T13:07:00Z",
      "side": 1,
      "message": "suggest : \n\npmuv3_init_el2_none() to indicate this is only called when EL2 is disabled.",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e2e2cad_29586f27",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 97,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T13:32:27Z",
      "side": 1,
      "message": "are you suggesting this just for the PMU or to alter the convention for all features? If it\u0027s for all features, you\u0027re probably right, although I\u0027d rather have something coherent with the top-level function.\n\nI would like to keep it identical for all features though",
      "parentUuid": "6618b36f_3a10164d",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "626da11c_90900021",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 97,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T14:06:17Z",
      "side": 1,
      "message": "I have given a comment in top patch, yes, this would be for all EL2 unused cases.",
      "parentUuid": "2e2e2cad_29586f27",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfdf193d_87e0e0f4",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 97,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T16:54:28Z",
      "side": 1,
      "message": "That comment is in the patch below.\n\nAnd I\u0027m really not sure. I think the beauty of these functions (this is independent from their callers) is that they don\u0027t have to be to be called when EL2 is unused. That\u0027s their only caller at the moment but it doesn\u0027t have to be.\n\nIf you insist on changing it, I would rather do \u003cfeat\u003e_init_el2_empty() as el2 none might be confused for it being unimplemented. I still think enable is better than init as the general theme of these is to put no barriers to EL1/0 usage of these features, which is what we call enable in my view.",
      "parentUuid": "626da11c_90900021",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "022c9251_aaeb5bcd",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 97,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-15T23:07:50Z",
      "side": 1,
      "message": "I think EL3 should not have anything to do with EL2 regs as the general case. EL2 unused is one exception and this is something we want to deprecate in TF-A. There can be few other exceptions, but generally EL3 need not worry about EL2 initialization.\n\nso _empty, or _none, or _unused will work for me.",
      "parentUuid": "dfdf193d_87e0e0f4",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b739d94_63d9d401",
        "filename": "lib/extensions/pmuv3/aarch64/pmuv3.c",
        "patchSetId": 26
      },
      "lineNbr": 97,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-16T11:40:20Z",
      "side": 1,
      "message": "I have renamed all instances as well as the parent calling functions",
      "parentUuid": "022c9251_aaeb5bcd",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1ba68c0_51c0ea80",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 26
      },
      "lineNbr": 131,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T13:07:00Z",
      "side": 1,
      "message": "not needed for realm world. Can be removed.",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39e2f047_8d7b762e",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 26
      },
      "lineNbr": 131,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T13:32:27Z",
      "side": 1,
      "message": "I\u0027m sorry but I don\u0027t understand. You request it be added here: https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/20470/comment/f41a8b43_d6725ae6/\n\nWhich one?",
      "parentUuid": "f1ba68c0_51c0ea80",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "208f8fa5_c416e0df",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 26
      },
      "lineNbr": 131,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-12T14:06:17Z",
      "side": 1,
      "message": "The function name is not reflective of the functionality which is part of the problem. This is just reseting the HPMN value rather than \"enabling the PMU\". Although PMU is needed for Realm world, it doesn\u0027t need resetting the HPMN value.",
      "parentUuid": "39e2f047_8d7b762e",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c258e5ce_d637b0aa",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 26
      },
      "lineNbr": 131,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T16:50:41Z",
      "side": 1,
      "message": "What I\u0027ve learnt the past few weeks is that NS doesn\u0027t need it either. I wrote the patch for this HPMN setting months ago because tftf was seeing a wrong value and when I discussed it with the team a few months back it was inconclusive who should handle this, so I picked firmware as it seemed more correct to me.\n\nNow I have a fuller picture and fixing it from tftf\u0027s side was probably the right call and I would be okay doing that now - drop it from here and fix tftf. This would skirt around the issue? Although there certainly isn\u0027t any harm to giving this to realm world too...\n\nBut I still want to keep the public API of these folders as \u003cfeat\u003e_enable/disable. I am well aware it doesn\u0027t fit 100% for every feature but at least it separates the responsibility between ctx, EL3 in-place and EL2 in-place writes which have different calling requirements.",
      "parentUuid": "208f8fa5_c416e0df",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f404f003_fd95b4cd",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 26
      },
      "lineNbr": 131,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-15T23:07:50Z",
      "side": 1,
      "message": "Ack, possible we should remove this in a separate patch after this. better not allow lower EL depend on this value and do its own initialization from scratch.",
      "parentUuid": "c258e5ce_d637b0aa",
      "revId": "6f98aa33b01dcd2e346ddd66a7b4d3a00909f628",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}