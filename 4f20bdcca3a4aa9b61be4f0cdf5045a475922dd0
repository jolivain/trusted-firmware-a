{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ed9bb299_5592629f",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 204,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-01-11T08:16:50Z",
      "side": 1,
      "message": "I guess we can drop the _elf suffix.",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d35e5b45_ef12ab8b",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 204,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-11T20:04:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed9bb299_5592629f",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "000603c1_778613c8",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-01-11T08:16:50Z",
      "side": 1,
      "message": "I think we can depend on image_header-\u003enb_images to be 1 too. Two images are only used if OP-TEE has paging enabled and that\u0027s obviously not the case here. With image_header-\u003enb_images \u003d\u003d 1 we can simplify a bit and skip the loops below.",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d430c977_28fc960d",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-11T20:04:56Z",
      "side": 1,
      "message": "I end up with 2 images from the ELF file generated for OpTee when I\u0027m building it for ChromeOS. I\u0027m referring to the 2 LOAD sections below. \n\nElf file type is EXEC (Executable file)\nEntry point 0x43200000\nThere are 3 program headers, starting at offset 64\n\nProgram Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  LOAD           0x0000000000010000 0x0000000043200000 0x0000000043200000\n                 0x00000000000588b0 0x000000000009c680  RWE    0x10000\n  LOAD           0x0000000000070000 0x0000000043400000 0x0000000043400000\n                 0x0000000000005910 0x0000000000005910  RW     0x10000\n  DYNAMIC        0x0000000000070000 0x0000000043400000 0x0000000043400000\n                 0x0000000000000100 0x0000000000000100  RW     0x8\n\n Section to Segment mapping:\n  Segment Sections...\n   00     .text .rodata .data.rel.ro .got .data .bss .heap1 .nozi \n   01     .dynamic .hash .dynsym .dynstr .rela \n   02     .dynamic",
      "parentUuid": "000603c1_778613c8",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cee43d42_8c528843",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-01-12T10:08:57Z",
      "side": 1,
      "message": "I think there\u0027s a misunderstanding about how OP-TEE should be loaded. The tee.elf can\u0027t just be loaded as an ordinary ELF. scripts/gen_tee_bin.py generates binaries that can be loaded, in this case it\u0027s tee-header_v2.bin followed by tee-pager_v2.bin that you need, tee-pageable_v2.bin is just an empty file unless paging is enabled.\n\nThat script converts the relocation information needed for ASLR into a more compact representation. So at boot OP-TEE depends on the processing done by gen_tee_bin.py. Loading tee.elf instead is unsupported and will break if for instance ASLR is enabled.",
      "parentUuid": "d430c977_28fc960d",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "692f88c4_1ed0c955",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-12T20:42:00Z",
      "side": 1,
      "message": "Is this possibly different for us given that ChromeOS doesn\u0027t use TF-A for all boot stages, but only for the BL3 stage?  I know in our build system, if we bundle OP-TEE into the firmware, then we provide the tee.elf file to be built w/ coreboot and it bundles that in. On boot, when it gets to executing BL32, the contents of the memory for BL32 matches what it would be if I copied the 2 LOAD sections from the ELF file to their corresponding addresses (which is why I implemented it this way where the kernel parses the ELF file and then passes the corresponding LOAD sections to EL3 for execution).\n\nI tried changing things to use the generated tee-header_v2.bin + tee-pager_v2.bin files and get an exception in EL3 once it tries to execute OP-TEE. I can debug OP-TEE startup further if you think this should work to figure out where it\u0027s failing  if you think this should work; but wanted to get your feedback before I spent a bunch of time on that. (OP-TEE doesn\u0027t get to the part where it does it\u0027s normal startup logging when using the bin files)\n\nOr is there more I need to do to prepare OP-TEE for execution when using those bin files? (the TF-A code I was testing w/ is functionally the same as what\u0027s in this change, just added more logging)",
      "parentUuid": "cee43d42_8c528843",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bedd7e2b_b409c852",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-01-13T01:15:26Z",
      "side": 1,
      "message": "Note that coreboot\u0027s BL32 loading mechanism wasn\u0027t designed for OP-TEE specifically, it was originally written for other secure OSes and just provides the option to load a normal ELF according to normal ELF-loading rules. Sounds like that isn\u0027t the right thing to do for OP-TEE(?) and what you tested previously probably just worked by accident.",
      "parentUuid": "692f88c4_1ed0c955",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "508165e0_9c03d138",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-01-13T14:05:19Z",
      "side": 1,
      "message": "@jeffrey, it is expected to work. There\u0027s an example of how this is done upstream in qemu_bl2_handle_post_image_load(). I\u0027m afraid it isn\u0027t that easy to follow, but who knows it\u0027s perhaps enough for you to see what you\u0027re missing.",
      "parentUuid": "bedd7e2b_b409c852",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c73279e_e2be0abf",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-13T19:25:06Z",
      "side": 1,
      "message": "Thanks both, I\u0027ll look into this more and figure out what\u0027s going on.",
      "parentUuid": "508165e0_9c03d138",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c99bb85_0b29af47",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-14T00:27:56Z",
      "side": 1,
      "message": "I\u0027ve spent all day trying to get this to work and no luck so far. I didn\u0027t discover anything from looking at the qemu_bl2_handle_post_image_load() function unfortunately.\n\nIt doesn\u0027t even appear to be getting into the entry point for OP-TEE from what I can tell ( logging in TF-A right up until it enters OP-TEE is getting hit).\n\nSorry for a naive question (this is the first time I\u0027m touching ASM code in probably 25 years), but I\u0027m assuming the memory contents at the entry point are getting executed first, right?  And those contents should be what\u0027s in __start in entry_a64.S from OP-TEE, right?  https://github.com/OP-TEE/optee_os/blob/203ee23d005b2cec2f21b5de334c5a246be32599/core/arch/arm/kernel/entry_a64.S#L57\n\nBecause if I put an SMC call as the first thing there, it\u0027s not getting hit using the bin loading. (I know my code is right, because if I use the ELF loading technique with the same build of OP-TEE and TF-A, then I can see the logging from my SMC call).\n\nAs a side note, I think I know why it was working with my ELF technique. The code that handles the embedded data and does the relocations here: https://github.com/OP-TEE/optee_os/blob/203ee23d005b2cec2f21b5de334c5a246be32599/core/arch/arm/kernel/entry_a64.S#L104d will end up with a zero size for the relocations, so it wouldn\u0027t bother to do that code and the ELF loading likely put everything in the right spots already so that wasn\u0027t needed. We are buillding without CFG_WITH_PAGER (the platform Makefile for Mediatek indicates it isn\u0027t supported for ARM64).",
      "parentUuid": "0c73279e_e2be0abf",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47ab2246_acc022a6",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-01-14T00:46:02Z",
      "side": 1,
      "message": "Sounds like you\u0027re probably not loading the bytes you intend to load to the right location (could be anything really, e.g. some tiny off-by-one mistake somewhere). Have you tried hexdumping the loaded OP-TEE code from BL31 before executing it to see whether it looks like the __start instructions you expect?",
      "parentUuid": "2c99bb85_0b29af47",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9461ede_1a80a2a4",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-17T19:05:12Z",
      "side": 1,
      "message": "Yeah, I\u0027ve already hex-dumped the memory and it\u0027s exactly what I expect it to be. What I\u0027m not sure about is if the __start instructions are at the entry point address or not. I\u0027ll see if I can analyze that more and figure out what\u0027s going on there.",
      "parentUuid": "47ab2246_acc022a6",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbf589a8_93e9e873",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 235,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-17T20:00:40Z",
      "side": 1,
      "message": "So apparently the \u0027arch\u0027 field in the OP-TEE image header inverts what is used in the code (but the documentation is correct, I just missed this). Fixing that solved the problem.",
      "parentUuid": "c9461ede_1a80a2a4",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd88fb4_7d5b5928",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 339,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-01-11T08:16:50Z",
      "side": 1,
      "message": "It looks like a helper function to convert two uint32_t\u0027s into a uint64_t could simplify things a bit. There are 3 or 4 places in this patch that would benefit from that.",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "416fac03_cc079354",
        "filename": "services/spd/opteed/opteed_main.c",
        "patchSetId": 4
      },
      "lineNbr": 339,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-11T20:04:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fd88fb4_7d5b5928",
      "revId": "4f20bdcca3a4aa9b61be4f0cdf5045a475922dd0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}