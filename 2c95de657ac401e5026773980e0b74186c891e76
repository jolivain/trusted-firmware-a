{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3b1a1fbd_82dbe6ad",
        "filename": "include/drivers/partition/efi.h",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-12-21T13:34:47Z",
      "side": 1,
      "message": "As per patches in the series, this function accepts uuid_t ptr or efi_guid ptr as input parameter, but implementation covers only comparing the size of \u0027struct efi_guid\u0027. Are we assuming the sizes of uuid and efi_uuid structures are equal? \nI think it is better to have a fixed type input parameter instead of \u0027void*\u0027, but let me know what do you think?",
      "range": {
        "startLine": 15,
        "startChar": 17,
        "endLine": 15,
        "endChar": 57
      },
      "revId": "2c95de657ac401e5026773980e0b74186c891e76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d2b3632_0ab57e14",
        "filename": "include/drivers/partition/efi.h",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2021-12-23T05:40:50Z",
      "side": 1,
      "message": "Both UUID and GUID are 16 byte unique identifiers, so they both are used for the same purpose. It should not matter how the 16 bytes are arranged in the structure, since the comparison happens on a per byte level. Actually, we can compare any two 16 byte entities. It should not be an issue to be using a void pointer here.",
      "parentUuid": "3b1a1fbd_82dbe6ad",
      "range": {
        "startLine": 15,
        "startChar": 17,
        "endLine": 15,
        "endChar": 57
      },
      "revId": "2c95de657ac401e5026773980e0b74186c891e76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}