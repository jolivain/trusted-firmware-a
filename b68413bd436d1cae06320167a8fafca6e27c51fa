{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "55f4b2eb_d09b255d",
        "filename": "include/lib/el3_runtime/simd_ctx.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-07-22T11:24:21Z",
      "side": 1,
      "message": "If the structure definition is already aligned to 16 bytes, then each instance within the array should also be aligned to 16 bytes. Therefore, it is unlikely that indexing into the array would start a struct at an address that is not 16-byte aligned. Therefore, explicitly adding reserved bytes is not needed here IMO. Am I missing something?\nHave you encountered a scenario where array indexing leads to an unaligned address if reserved bytes are not added?",
      "range": {
        "startLine": 78,
        "startChar": 41,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "b68413bd436d1cae06320167a8fafca6e27c51fa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76261898_159fb756",
        "filename": "include/lib/el3_runtime/simd_ctx.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-07-24T20:02:03Z",
      "side": 1,
      "message": "I did not encounter such a scenario in my limited testing. I agree with your observation that each instance within an array is expected to have the alignment constraints as the original declaration of the structure. However, I am not sure if compilers might influence the outcome. Moreover, the keyword `__attribute__(aligned)` is an extension supported by GCC (GNU tool chain). I dont know if LLVM clang would support it.\n\nEven if we remove the `reserved` bytes here, compiler will anyways insert padding for alignment purposes. Hence, I took the safer approach.",
      "parentUuid": "55f4b2eb_d09b255d",
      "range": {
        "startLine": 78,
        "startChar": 41,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "b68413bd436d1cae06320167a8fafca6e27c51fa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26802c1c_dc43df20",
        "filename": "include/lib/el3_runtime/simd_ctx.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-07-25T08:29:32Z",
      "side": 1,
      "message": "I agree with taking the safer approach and it\u0027s fine to proceed with it.\n\nHowever, I noticed that this safer approach isn\u0027t consistently applied across all structures in TF-A. For instance, the [cpu_data structure] is aligned(CACHE_WRITEBACK_GRANULE), but we haven\u0027t added any reserved bytes to ensure alignment.\n\nAdditionally, if we are manually adding padding bytes to ensure alignment (instead of relying on the compiler), I\u0027m not sure why we still need to explicitly use the alignment attribute then.\n\n[cpu_data structure]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a/+/refs/heads/integration/include/lib/el3_runtime/cpu_data.h#119",
      "parentUuid": "76261898_159fb756",
      "range": {
        "startLine": 78,
        "startChar": 41,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "b68413bd436d1cae06320167a8fafca6e27c51fa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b8b0226_57b7defa",
        "filename": "include/lib/el3_runtime/simd_ctx.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-07-26T16:17:43Z",
      "side": 1,
      "message": "I had a rethink of this. It looks like clang also supports the keyword __attribute__(aligned). I believe compilers are much better at this relative to humans. The data structure could change over time with more fields being added. Which means, if we take the manual approach of adding reserved bytes , the burden falls on developers and could be error prone.\n\nSo I am thinking to remove reserved bytes and just stick to aligned keyword usage which puts the burden on compiler to ensure alignment. If you agree with this, I will make necessary changes.",
      "parentUuid": "26802c1c_dc43df20",
      "range": {
        "startLine": 78,
        "startChar": 41,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "b68413bd436d1cae06320167a8fafca6e27c51fa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85bc2f10_740c1c2b",
        "filename": "include/lib/el3_runtime/simd_ctx.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-07-29T16:30:53Z",
      "side": 1,
      "message": "\u003eI had a rethink of this. It looks like clang also supports the keyword attribute(aligned). I believe compilers are much better at this relative to humans. The data structure could change over time with more fields being added. Which means, if we take the manual approach of adding reserved bytes , the burden falls on developers and could be error prone. \n\n\u003eSo I am thinking to remove reserved bytes and just stick to aligned keyword usage which puts the burden on compiler to ensure alignment. If you agree with this, I will make necessary changes.\n\nYes, that\u0027s what I was thinking too. I agree with using the aligned attribute and removing the manually added padding, it\u0027s more robust that way.",
      "parentUuid": "6b8b0226_57b7defa",
      "range": {
        "startLine": 78,
        "startChar": 41,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "b68413bd436d1cae06320167a8fafca6e27c51fa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc45376a_3965a740",
        "filename": "include/lib/el3_runtime/simd_ctx.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2024-08-12T13:23:16Z",
      "side": 1,
      "message": "Madhu, your approach makes sense.\nHave you taken action on it?",
      "parentUuid": "85bc2f10_740c1c2b",
      "range": {
        "startLine": 78,
        "startChar": 41,
        "endLine": 81,
        "endChar": 13
      },
      "revId": "b68413bd436d1cae06320167a8fafca6e27c51fa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}