{
  "comments": [
    {
      "key": {
        "uuid": "e6b59ef6_818b2595",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-01-30T13:55:20Z",
      "side": 1,
      "message": "can block_addressing \u003c 0? See line #265",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f123efab_0fa92d06",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2020-02-02T01:56:06Z",
      "side": 1,
      "message": "This commit retains the original \u0027int\u0027,\nbut I can change it \u0027bool\u0027.",
      "parentUuid": "e6b59ef6_818b2595",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ecc16da_ba90560f",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-01-30T13:55:20Z",
      "side": 1,
      "message": "Make MISRA scan happy:\nif (uniphier_emmc_host.block_addressing \u003d\u003d 0)",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "771c815a_9b835150",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2020-02-02T01:56:06Z",
      "side": 1,
      "message": "I will change the type to \u0027bool\u0027,\nthen the ! operation will be fine.",
      "parentUuid": "0ecc16da_ba90560f",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb98a405_4093f1bf",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-01-30T13:55:20Z",
      "side": 1,
      "message": "remove \",\"",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfb069af_f01eae11",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2020-02-02T01:56:06Z",
      "side": 1,
      "message": "I do not understand you point.\n\nWhen I add a new entry at the end,\nI will end up with changing two lines.\n\nstatic const uintptr_t uniphier_emmc_base[] \u003d {\n\t[UNIPHIER_SOC_LD11] \u003d 0x5a000200,\n\t[UNIPHIER_SOC_LD20] \u003d 0x5a000200,\n\t[UNIPHIER_SOC_PXS3] \u003d 0x5a000200,\n\t[ (next soc)      ] \u003d (base address),\n};\n\n\nSince C99, it is allowed to have a comma at the end.\nThis is helpful for diff\u0027ing the code change.",
      "parentUuid": "eb98a405_4093f1bf",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3598b34_000e9cd6",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-02-05T10:11:36Z",
      "side": 1,
      "message": "All these addresses are the same, do you really need this array at all?\nIf you plan to add a new entry, you\u0027ll have to modify your code anyway, so counting lines to be changed is not relevant. Although this array is defined with [], the comma might give (false) impression that other array members are set 0. Leave this comma if you are more comfortable with it.",
      "parentUuid": "dfb069af_f01eae11",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96b660fa_446cf92d",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2020-02-12T03:52:45Z",
      "side": 1,
      "message": "\u003e All these addresses are the same, do you really need this array at all?\n\nYes.\nI need this because the next SoC will change the base address.\n\n\u003e counting lines to be changed is not relevant\n\nThe benefit is \u0027git show\u0027 will display only\nrelevant line.\n\n\u003e the comma might give (false) impression that other array members are set 0. Leave this comma if you are more comfortable with it.\n\nI am more comfortable with the a comma at the tail\nwhen it is useful.",
      "parentUuid": "a3598b34_000e9cd6",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e4c6ef9_57dee935",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 295,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-01-30T13:55:20Z",
      "side": 1,
      "message": "if (uniphier_emmc_host.base \u003d\u003d 0)",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a45a59c_f79a4e0f",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 295,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2020-02-02T01:56:06Z",
      "side": 1,
      "message": "OK, will change.",
      "parentUuid": "9e4c6ef9_57dee935",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28069ebb_95626e20",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 295,
      "author": {
        "id": 1000317
      },
      "writtenOn": "2020-02-12T17:52:35Z",
      "side": 1,
      "message": "Actually, I think comparing against NULL might be better. There is a MISRA rule that says \"Literal \"0\" shall not be used as null pointer constant\".",
      "parentUuid": "7a45a59c_f79a4e0f",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70990a1c_e8495ab8",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-01-30T13:55:20Z",
      "side": 1,
      "message": "add {} around return -ENOTSUP;",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cc8ab69_119e891a",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2020-02-02T01:56:06Z",
      "side": 1,
      "message": "Why?\n\nTF-A adopts Linux kernel\u0027s checkpatch.pl\n\nIt would warn this:\n\n   braces {} are not necessary for single statement blocks\n\nThis is not overridden by docs/process/coding-guidelines.rst\nSo, braces should not be used here.",
      "parentUuid": "70990a1c_e8495ab8",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4e74569_19a51733",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-02-05T10:12:17Z",
      "side": 1,
      "message": "This is an abstract from coding-style.rst which will be submitted shortly:\n\nConditional Statement Bodies\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhere conditional statements (such as ``if``, ``for``, ``while`` and ``do``) are\nused, braces must be placed around the statements that form the body of the\nconditional. This is the case regardless of the number of statements in the\nbody.\n\n.. note::\n  This is a notable departure from the Linux coding style that has been\n  adopted to follow MISRA guidelines more closely and to help prevent errors.\n\nFor example, use the following style:\n\n.. code:: c\n\n  if (condition) {\n      foo++;\n  }\n\ninstead of omitting the optional braces around a single statement:\n\n.. code:: c\n\n  /* This is violating MISRA C 2012: Rule 15.6 */\n  if (condition)\n      foo++;\n\nThe reason for this is to prevent accidental changes to control flow when\nmodifying the body of the conditional. For example, at a quick glance it is easy\nto think that the value of ``bar`` is only incremented if ``condition``\nevaluates to ``true`` but this is not the case - ``bar`` will always be\nincremented regardless of the condition evaluation. If the developer forgets to\nadd braces around the conditional body when adding the ``bar++;`` statement then\nthe program execution will not proceed as intended.\n\n.. code:: c\n\n  /* This is violating MISRA C 2012: Rule 15.6 */\n  if (condition)\n      foo++;\n      bar++;",
      "parentUuid": "2cc8ab69_119e891a",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ab4f2c2_92d0f9fa",
        "filename": "plat/socionext/uniphier/uniphier_emmc.c",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2020-02-12T03:52:45Z",
      "side": 1,
      "message": "It is strange to request this change\nbased on the planned change about the coding style policy.\n\ncoding-style.rst must be updated first in the *mainline*.\n\nI do not see it in the mainline, so the rule falls back to\nthe checkpatch.pl and I stick to it.",
      "parentUuid": "c4e74569_19a51733",
      "revId": "a331c8b5b5d26802cd9495698b4dbfe386f2ffa3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}