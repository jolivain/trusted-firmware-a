{
  "comments": [
    {
      "key": {
        "uuid": "5df4491e_eb28c35a",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-02-28T14:43:29Z",
      "side": 1,
      "message": "would the tool be more usable if enc_key and enc_nonce were files as opposed to strings ?",
      "revId": "7c953417c138206568fee3111fe2d3f802c8783a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d7b51f8_74d06d16",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1000132
      },
      "writtenOn": "2020-03-02T05:27:37Z",
      "side": 1,
      "message": "We can also provide key and nonce files as inputs via current implementation using command line options as:\n\nENC_KEY\u003d`cat key.txt` ENC_NONCE\u003d`cat nonce.txt`\n\nAnd current implementation avoids us to keep redundant default key and nonce files in TF-A repo.",
      "parentUuid": "5df4491e_eb28c35a",
      "revId": "7c953417c138206568fee3111fe2d3f802c8783a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56de8a24_ca528e6d",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-03-02T13:52:09Z",
      "side": 1,
      "message": "Okay. What advantage does it give us to not have an example file? Using `cat filename` is not intuitive from a usability standpoint(at least for me)and this behavior is different from ROTPK and other keys used during signing. Are there other examples of using cat filename for a makefile variable in trusted firmware?",
      "parentUuid": "8d7b51f8_74d06d16",
      "revId": "7c953417c138206568fee3111fe2d3f802c8783a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcd6b67d_0bad4815",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-03-02T15:21:23Z",
      "side": 1,
      "message": "Another problem is that typically encryption keys are password protected(and encrypted through PBKDF2 or some other means) when they are generated. So cat will not work on such files.",
      "parentUuid": "56de8a24_ca528e6d",
      "revId": "7c953417c138206568fee3111fe2d3f802c8783a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d69d82c_93cd22c7",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1000132
      },
      "writtenOn": "2020-03-02T15:25:07Z",
      "side": 1,
      "message": "AFAIK, generally a symmetric key or a nonce is represented as random HEX string rather than a particular file format whereas a signing key (ROTPK) is represented via a particular file format eg. \".pem\", \".der\" etc.\n\nSo binding the symmetric key or a nonce to a particular file format seems limiting to me and also could cause confusion on user\u0027s behalf. Consider a case where the tool is expecting a symmetric key or a nonce stored in binary format file whereas user provides ascii format file.\n\nAlso, IMO, having the secret key stored in a file in plain format gives false sense of security. Generally the secret key should be protected via hardware backed security modules.\n\nAnd regarding usage of `cat filename`, you can find its usage with \"keyctl\" [1] Linux user-space utility.\n\n[1] https://www.kernel.org/doc/Documentation/security/keys-trusted-encrypted.txt",
      "parentUuid": "56de8a24_ca528e6d",
      "revId": "7c953417c138206568fee3111fe2d3f802c8783a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73e3ae85_666466e7",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1000132
      },
      "writtenOn": "2020-03-02T15:34:44Z",
      "side": 1,
      "message": "\u003e Another problem is that typically encryption keys are password protected(and encrypted through PBKDF2 or some other means) when they are generated. So cat will not work on such files.\n\nThe enctool in its current implementation only supports encryption key to be provided in plain format. A typical implementation can very well extend this tool to support custom techniques to protect encryption key.",
      "parentUuid": "3d69d82c_93cd22c7",
      "revId": "7c953417c138206568fee3111fe2d3f802c8783a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3342cb27_3a71c830",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 11
      },
      "lineNbr": 119,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-03-02T15:35:08Z",
      "side": 1,
      "message": "The link you provided makes my point precisely. \"User space sees,\nstores, and loads only encrypted blobs\". This is what the FW encryption tool needs to do as well. You take blobs of data, not tied to any format, and let the tool, openssl and other layers of software handle it appropriately. In fact, i was thinking of EXACTLY this situation, where you have a key in a TPM or HSM. THe tool user will not have access to the key bits and will only have access to some abstract binary file. ALso, i\u0027m not asking you to bind to any format. I\u0027m asking you to bind to a file of some format, which your tool is agnostic to. Right now the tool expects the absolute key bits and i dont think that will work very well.",
      "parentUuid": "3d69d82c_93cd22c7",
      "revId": "7c953417c138206568fee3111fe2d3f802c8783a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}