{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2a44ff24_4bc7b3d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000793
      },
      "writtenOn": "2024-07-10T08:22:56Z",
      "side": 1,
      "message": "StMM, which is a SEL0 SP uses SSL for secure boot. The SSL library use FPs to do the calculations. I suspect denying access to the FPregs in Secure World would cause issues.\n\nCould you please add more details on why there is a conflict between SVE and FP Rregs?\nPlease correct me if I am wrong, but according to my understanding, If SVE registers are saved, it will automatically save fpregs because both point to the same set of registers. It is like x and w core registers. Same registers, different widths.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 10
      },
      "revId": "553a0a2119dc02805e36f60aaa77b2162ae8676e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e643d3d_109f83d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2024-07-10T16:27:03Z",
      "side": 1,
      "message": "The underlying reason is that TF-A itself does *not* support saving SVE state, because that\u0027s potentially large. There are comments that suggest a SPM would need to do that:\nhttps://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/+/refs/heads/master/lib/el3_runtime/aarch64/context_mgmt.c#680\n\nAlso note that accessing a SIMD register using its NEON v\u003cn\u003e name will clear all bits beyond the lower 128 bits of the associated SVE register: See rule RWKYLB in the ARM ARM B1.4.3. So if we allow FP usage without saving the whole SVE state, this would corrupt the (unsaved!) SVE state.\nThe commonly expected use case is that only non-secure world would use FP/NEON and SVE, so we don\u0027t need to save state at all. If only FP is needed or supported, we can allow FP usage in secure world, but need to save the registers (but only 32*128bits worth of it) when switching between SWD and NS.\n\nSo the conflict here is between allowing SVE in NS, but also allowing FP access in the secure world, so saving just the FP part is not enough. I think for most use cases the former (SVE in NS) is far more important, since SVE is visible to the NS world, and for instance the Linux kernel will just use it if it sees the feature bit, which atm triggers a TF-A panic.",
      "parentUuid": "2a44ff24_4bc7b3d9",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 10
      },
      "revId": "553a0a2119dc02805e36f60aaa77b2162ae8676e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "093c1c61_03f0d9be",
        "filename": "plat/arm/board/neoverse_rd/platform/rdn2/platform.mk",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000774
      },
      "writtenOn": "2024-07-15T08:57:36Z",
      "side": 1,
      "message": "Hi Andre,\n\nWith SVE enabled, we probably can\u0027t support this CI config.\n\nhttps://git.trustedfirmware.org/ci/tf-a-ci-scripts.git/+/refs/heads/master/tf_config/fvp-rdn2-tbb-ras\n\nas it has SPM_MM dependency. This seems to have come up as a failure for the current CI run. We are discussing within the team on how best we can handle these conflicting features. One option would be to disable SPM_MM for older platforms, but we are yet to test the scale of impact as we have to disable RAS as well I suppose.\n\nCould I check if it would be okay for us to test this internally and get back to you (it could take a week or two as are doing a release now). Are you blocked with this patch at the moment?",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 113,
        "endChar": 24
      },
      "revId": "553a0a2119dc02805e36f60aaa77b2162ae8676e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b668c15f_fe0c756a",
        "filename": "plat/arm/board/neoverse_rd/platform/rdn2/platform.mk",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-08-06T13:36:33Z",
      "side": 1,
      "message": "Any updates on this?",
      "parentUuid": "093c1c61_03f0d9be",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 113,
        "endChar": 24
      },
      "revId": "553a0a2119dc02805e36f60aaa77b2162ae8676e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04b0b783_61da1390",
        "filename": "plat/arm/board/neoverse_rd/platform/rdn2/platform.mk",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000774
      },
      "writtenOn": "2024-08-06T14:42:55Z",
      "side": 1,
      "message": "Jerry (CC) will be looking into this.",
      "parentUuid": "b668c15f_fe0c756a",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 113,
        "endChar": 24
      },
      "revId": "553a0a2119dc02805e36f60aaa77b2162ae8676e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35a2a552_39301f99",
        "filename": "plat/arm/board/neoverse_rd/platform/rdn2/platform.mk",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1001165
      },
      "writtenOn": "2024-08-16T09:43:14Z",
      "side": 1,
      "message": "To build with these changes with SPM_MM disabled. SPM and SPMC also need to be disabled. This is not enough for RAS. Alternatively, would it be ok to temporarily disable RAS for SVE?",
      "parentUuid": "04b0b783_61da1390",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 113,
        "endChar": 24
      },
      "revId": "553a0a2119dc02805e36f60aaa77b2162ae8676e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}