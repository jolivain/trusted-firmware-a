Property Access Layer
=====================

This document provides an overview of the (|PAL|) abstraction.

Introduction
~~~~~~~~~~~~

The Property Access Layer (|PAL|) is an abstraction layer for platform specific
data, allowing a "property" to be queried and a value retrieved without the
requesting entity knowing what backing store is being used to hold the data.

It is used to bridge new and old ways of providing platform-specific data:
Today, information like the Chain of Trust is held within several, nested
platform-defined tables. In the future, it may be provided as part of a device
blob, along with the rest of the information about images to load.
Introducing this abstraction layer will make migration easier and will preserve
functionality for platforms that cannot / don't want to use device tree.

Accessing properties
~~~~~~~~~~~~~~~~~~~~

Properties defined in the (|PAL|) are grouped around namespaces and
sub-namespaces: a.b.property.
Examples namespace can be:
 - (|TBBR|) Chain of Trust data: tbbr.cot.trusted_boot_fw_cert
 - (|TBBT|) dynamic configuration info: tbbr.dyn_config.disable_auth
 - Arm io policies: arm.io_policies.bl2_image

Properties can be accessed with the ``PAL_GET_PROPERTY(a,b,property)`` macro.

Defining properties
~~~~~~~~~~~~~~~~~~~

Properties composing the (|PAL|) have to be stored in C structure. If another
backing store want to be used, the platform have to provide a ``populate()``
function to fill the corresponding C structure.

The ``populate()`` function must be registered to the PAL framework with
the ``PAL_REGISTER_POPULATOR()`` macro. This insure that the function would be
called inside the generic ``pal_populate()`` function, during initialization.

::

    int pal_populate_tbbr_dyn_config(void* dtb)
    {
    	// read dtb and fill tbbr_dyn_config struct
    }

    PAL_REGISTER_POPULATOR(pal_populate_tbbr_dyn_config);

Then, a wrapper have to be provided to match the ``PAL_GET_PROPERTY()`` macro:

::
    // generic getter
    #define PAL_GET_PROPERTY(a,b,property)	a##__##b##_getter(property)

    // my specific getter
    #define tbbr__dyn_config_getter(id)	tbbr_dyn_config.id

This second level wrapper can be used to remap the ``PAL_GET_PROPERTY()`` to
anything appropriate: structure, array, function, etc..

Loading the property device tree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``pal_load_config()`` must be called to load the device tree containing the
properties value. This must be done after the io layer is initialize, as the dtb
is stored on an external device (FIP).

.. uml:: ../resources/diagrams/plantuml/pal_bl1_load_config.puml

Populating the properties
~~~~~~~~~~~~~~~~~~~~~~~~~

Once a valid device tree is available, the ``pal_populate(dtb)`` function can be
used to fill the C data structure with the data from the dtb.
This function will call all the ``populate()`` callback which has been
registered with ``PAL_REGISTER_POPULATOR()``.

.. uml:: ../resources/diagrams/plantuml/pal_bl2_populate.puml
