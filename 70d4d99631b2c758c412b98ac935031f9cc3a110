{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1b954f32_e63e91f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-07-08T17:05:37Z",
      "side": 1,
      "message": "I think there is an (undocumented?) assumption in TF-A project that the systems must be homogeneous i.,e., every CPU must be symmetric in the features it supports. IMHO support for heterogeneous systems is not trivial in TF-A and the fix you are providing may not be sufficient. At this point in time, heterogeneous CPU configuration is not supported.",
      "revId": "70d4d99631b2c758c412b98ac935031f9cc3a110",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95c5d6ad_03ca3d6e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-07-08T18:49:59Z",
      "side": 1,
      "message": "To add on top of Madhukar\u0027s statements.\n@Manish Pandey has been looking into this requirement recently, but that is still in the initial analysis phase. But at this moment there is no complete end-to-end support for heterogeneous CPUs.",
      "parentUuid": "1b954f32_e63e91f8",
      "revId": "70d4d99631b2c758c412b98ac935031f9cc3a110",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75a15496_cbfba3a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000108
      },
      "writtenOn": "2024-07-09T08:27:15Z",
      "side": 1,
      "message": "Hi @Madhukar, @jayanthdodderi,\n\nFrom my understanding, from very early phase TF-A has supported heterogeneous CPUs, this is why every CPU variant has its CPU operation structure (for specific reset and ERRATA workaround, etc), and the context management provides contexts per-CPU and per-world which provides fundamental support for heterogeneous system. My personal understanding is we are not far away from support heterogeneous system.\n\nThe situation gets worse is that different CPU variants support different features. That is said, if we look again at the code (e.g. cm_manage_extensions_el3()), it has considered the code must run on the CPU itself for feature detecting. The commit 123002f91713 introduces regression and this patch just fix the regression, but I agree this patch only fixes partially the feature detecting on heterogeneous system.\n\nSo I think the question is how to fit this change into the whole patches worked by @Manish.P .  If this patch is conflict or cause difficulty for Manish\u0027s work, then it is totally fine for me to drop this one. If not, then we should consider this patch as a fixing and merge it.",
      "parentUuid": "95c5d6ad_03ca3d6e",
      "revId": "70d4d99631b2c758c412b98ac935031f9cc3a110",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c45dbb_f9502afc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-07-09T17:11:07Z",
      "side": 1,
      "message": "Hi Leo\nIn this context, heterogeneous does not mean different CPUs. It means CPUs with different feature sets. So, a big LITTLE configuration is not necessarily a heterogeneous configuration from software(firmware) perspective.\n\nThe existing context management infrastructure is necessary purely from the standpoint of supporting a multi-world software stack on a multi core platform. It has always been assumed that all PEs in the system support same set of features(except a few deviations to this rule such as erratas, IMPDEF registers etc). \n\nIn an ideal world where every CPU has same feature set, it does not matter where cm_manage_extensions_el3() gets invoked to identify the feature set but if the system is heterogeneous, our best bet would to work with a subset of common features. This is a difficult problem to solve because primary core may be feature-rich or feature-poor relative to secondary cores. so in a way, the regression can help to solve the issue in one of the scenarios(where primary core has lower features compared to other cores).\n\nI was wondering what is the benefit of detecting exclusive features on secondary cores. Can rich OS like Linux work with a heterogeneous system? Wouldn\u0027t it lead to unpredictable behaviour if workloads get migrated between incompatible cores?",
      "parentUuid": "75a15496_cbfba3a3",
      "revId": "70d4d99631b2c758c412b98ac935031f9cc3a110",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bfc047d_19e366d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000108
      },
      "writtenOn": "2024-07-10T10:30:52Z",
      "side": 1,
      "message": "Hi Madhukar,\n\n\u003e I was wondering what is the benefit of detecting exclusive features on secondary cores. Can rich OS like Linux work with a heterogeneous system? Wouldn\u0027t it lead to unpredictable behaviour if workloads get migrated between incompatible cores?\n\nIn TC platform, not all CPUs support Arm SPE. So we want to enable Arm SPE in Linux kernel for partial CPUs. If we do not grant Arm SPE permission to Linux kernel, the instruction abort is triggered when Linux kernel accesses Arm SPE system registers.\n\nGenerally speaking, if only partial cores have tracing and debugging features, it should enable the features on these cores.\n\nManish.P just shared me his patch for the fixing: https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/29718. I confirmed his patch which also can fix the regression I observed. So I will abandon my patch.\n\nAnyway, thanks a lot for looking into this issue.",
      "parentUuid": "43c45dbb_f9502afc",
      "revId": "70d4d99631b2c758c412b98ac935031f9cc3a110",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d937490_c844ad33",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-07-10T10:41:49Z",
      "side": 1,
      "message": "Let me try to summarise:\nThere are more and more requests coming to provide support for some level of heterogeneity in platforms. So, from TF-A team we need to provide some support (whether we like it or not).\nIt is still under discussion that what features are allowed to differ across CPUs (that decision is mostly dependent on OS kernel).\n\nFrom EL3 PoV, in theory, the features which are only used by Lower ELs, it can support assymetricty (Lower EL\u0027s problem to find a mechanism to work this out with help from EL3).\nThe fundamental problem in TF-A is, creating the context of secondary by primary CPU. I have a WIP patch to get rid of cpu_init by index.\n\nAs you already mentioned, this patch is not complete fix as well as it has bigger problem, system registers on a given core has different values (some registers from primary core and some registers are from secondary cores and if their is dependency between system registers then it can cause weird behaviour at runtim)",
      "parentUuid": "43c45dbb_f9502afc",
      "revId": "70d4d99631b2c758c412b98ac935031f9cc3a110",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ],
  "submitRequirementResults": []
}