{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "06674021_9c09db98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2022-09-13T08:09:04Z",
      "side": 1,
      "message": "Hi Claus,\n\nCould you check the build errors (mostly on aarch32 platforms)?\nhttps://ci.trustedfirmware.org/job/tf-a-ci-gateway/16730/\n\nThanks,\nYann",
      "revId": "dd3276f17dcb88b67cf1cda61d7f8f41fc86139d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9c42fd2_cea7e8f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2022-09-13T08:13:47Z",
      "side": 1,
      "message": "Could you also rebase your series? At least one of the compilation issues is solved with:\nhttps://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/16648",
      "revId": "dd3276f17dcb88b67cf1cda61d7f8f41fc86139d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8157a0c_0fae06c0",
        "filename": "lib/libc/snprintf.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-09-13T08:20:25Z",
      "side": 1,
      "message": "Hi Claus,\nAgainst previous panicking behaviour, I\u0027m wondering how this simple \u0027return\u0027 makes sense. Do we simply ignore this error and proceed?",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 9
      },
      "revId": "dd3276f17dcb88b67cf1cda61d7f8f41fc86139d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a36893d_ee728bf2",
        "filename": "lib/libc/snprintf.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000888
      },
      "writtenOn": "2022-09-13T18:19:19Z",
      "side": 1,
      "message": "Hi Manish,\n\nThe radix check was added recently. `unsigned_num_print()` is only called from within `vsnprintf()` with either a radix of 10 or 16. The check seems to have been added of concern that the buffer `num_buf` may overflow with a radix less than 10.\n\nUnless someone introduces a bug in this module, the radix check would not fail.\n\nBy returning in case of `radix \u003c 10`, nothing is printed to the buffer, and parsing continues.\n\nI can also add an assertion of the radix, if you prefer.\n\nPlease let me know if you have any concerns about this.",
      "parentUuid": "d8157a0c_0fae06c0",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 9
      },
      "revId": "dd3276f17dcb88b67cf1cda61d7f8f41fc86139d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edd9e95b_c6e0009d",
        "filename": "lib/libc/snprintf.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-09-14T08:32:03Z",
      "side": 1,
      "message": "Hi Claus,\n\nBased on the usage of \u0027unsigned_num_print\u0027 private to this file, what you said seems to be correct. Due to the possibility that this function will be made public, it would be better to add assertion and error log though.\nAs well, I agree there is no need for a \u0027panic handler\u0027, however I would like to know Andre\u0027s opinion who is author of this change.",
      "parentUuid": "1a36893d_ee728bf2",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 9
      },
      "revId": "dd3276f17dcb88b67cf1cda61d7f8f41fc86139d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d146936_47a53da6",
        "filename": "lib/libc/snprintf.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-09-14T08:59:24Z",
      "side": 1,
      "message": "\"Unless someone introduces a bug in this module, the radix check would not fail.\"\n\nYes, but this was the concern. There was an actual buffer overflow in here before, so we didn\u0027t want to take any chances. I agree that panicking is not a good idea, but at least it points to the problem ;-) I couldn\u0027t pull off a compile time check, even though constant propagation would make this seemingly possible.\n\nI guess just returning would work as well, anyone adding %o would then hopefully see that it just doesn\u0027t work. Can you please add a comment why we have this restriction (buffer sized for at least radix 10 only). Otherwise people might just replace the 10 with 8 ...",
      "parentUuid": "edd9e95b_c6e0009d",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 9
      },
      "revId": "dd3276f17dcb88b67cf1cda61d7f8f41fc86139d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5666427c_3c3b8d36",
        "filename": "lib/libc/snprintf.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000888
      },
      "writtenOn": "2022-09-14T22:02:58Z",
      "side": 1,
      "message": "Hi Andr√©,\n\nThanks for commenting. It\u0027s valuable to understand the background.\n\nIf we want to avoid returning silently, I could also add an assertion, but I would still insist on keeping the `return`, since assertion could be disabled. I\u0027ll also add the comment you suggested.\n\nWe could also do something else; instead change the radix argument to a boolean to indicate whether the base is 10 or 16. However, this would complicate matters if someone\u0027s going to support a base smaller than 10.\n\nPlease let me know what you think.",
      "parentUuid": "3d146936_47a53da6",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 9
      },
      "revId": "dd3276f17dcb88b67cf1cda61d7f8f41fc86139d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac747e7d_26499fca",
        "filename": "lib/libc/snprintf.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-09-15T16:29:07Z",
      "side": 1,
      "message": "Hi Claus,\nthanks for the reply!\nSo for the \"if (radix \u003c 10); return;\": I actually like that, because it\u0027s a simple and safe solution. Since this is EL3 firmware, we should not panic unless it\u0027s really unavoidable. The former code was the outcome of some discussion back then to avoid this situation in the future.\nCorrectness is a different subject here, and would only affect new code, which would naturally be tested for working correctly. So just having a comment there, acting as a heads up for future contributors would be enough.\nI would not try to optimise this further (boolean radix), we should try to keep this code as simple and readable as possible, to avoid bugs.\n\nSo: just return, plus a comment. Optionally adding an assert might help debugging.",
      "parentUuid": "5666427c_3c3b8d36",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 9
      },
      "revId": "dd3276f17dcb88b67cf1cda61d7f8f41fc86139d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}