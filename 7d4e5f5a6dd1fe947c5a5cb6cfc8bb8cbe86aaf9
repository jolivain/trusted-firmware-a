{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "26ed2b9c_594e13b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T13:42:38Z",
      "side": 1,
      "message": "I am afraid auth/mbedtls is not a valid scope. Valid scopes are listed in changelog.yaml. I think the most appropriate one here would be just \"auth\":\n\n fix(auth): Only accept v3 X.509 certificates",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa808e7f_ec326f58",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-07T14:54:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26ed2b9c_594e13b0",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1443ede_485dacfb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T13:42:38Z",
      "side": 1,
      "message": "Which one? What is the mandatory extension you\u0027re referring to here?",
      "range": {
        "startLine": 9,
        "startChar": 27,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "562039a0_02208227",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-01T18:44:05Z",
      "side": 1,
      "message": "From my understanding of the Trusted Board Boot flow, subsequent code will try to obtain an extension from the certificate and panic if it cannot.  I am not sure which extension in particular is required, and it may be different for different certificates, but I am almost certain that each certificate must have at least one.",
      "parentUuid": "e1443ede_485dacfb",
      "range": {
        "startLine": 9,
        "startChar": 27,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b465cd4_f24dfa2b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-07T14:20:48Z",
      "side": 1,
      "message": "Ah OK, so the part about \"at least one extension is required\" is an implementation choice (or a limitation) in TF-A code rather than an RFC 8250 requirement, I see.\n\nIndeed, after double-checking the code, I see that cert_parse() expects at least one extension [1]:\n\n\tret \u003d mbedtls_asn1_get_tag(\u0026p, end, \u0026len, MBEDTLS_ASN1_CONSTRUCTED |\n\t\t\t\t   MBEDTLS_ASN1_SEQUENCE);\n\tif (ret !\u003d 0) {\n\t\treturn IMG_PARSER_ERR_FORMAT;\n\t}\n\nFor all other OPTIONAL fields, we further check the error code against MBEDTLS_ERR_ASN1_UNEXPECTED_TAG, which is not the case here. And like you say, if it cannot find at least one extension, the parser will reject the certificate as invalid, which will result in an authentication failure.\n\n[1] https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/drivers/auth/mbedtls/mbedtls_x509_parser.c#n305",
      "parentUuid": "562039a0_02208227",
      "range": {
        "startLine": 9,
        "startChar": 27,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb723ab1_ca6a3eb7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-07T17:27:28Z",
      "side": 1,
      "message": "Right now, the code requires that the Extensions field be present, but allows it to be an empty SEQUENCE (containing no extensions).  Such a certificate is ill-formed, but is (harmlessly) accepted by the current code.  However, it would cause an authentication failure later on, as get_ext() (and thus get_auth_param()) will return IMG_PARSER_ERR_NOT_FOUND.  Therefore, it is preferable to just reject the malformed certificate earlier.",
      "parentUuid": "0b465cd4_f24dfa2b",
      "range": {
        "startLine": 9,
        "startChar": 27,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "683c4263_48534f02",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-08T12:48:27Z",
      "side": 1,
      "message": "\u003e Right now, the code requires that the Extensions field be present, but allows it to be an empty SEQUENCE (containing no extensions).  Such a certificate is ill-formed, but is (harmlessly) accepted by the current code.\n\nThanks, I had missed that.",
      "parentUuid": "cb723ab1_ca6a3eb7",
      "range": {
        "startLine": 9,
        "startChar": 27,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "862c96ae_6ca288e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-01T18:44:05Z",
      "side": 1,
      "message": "Sorry for the confusion.  I don’t expect people to be able to encode ASN.1 DER “by hand”.  The easiest way to validate this patch is to note that since DER requires unique encodings, either this would work for all valid certificates or it would work for none of them.",
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc68d9c3_17f5907a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-07T14:20:48Z",
      "side": 1,
      "message": "Ack. So existing TF-A CI tests have already checked that, good.",
      "parentUuid": "862c96ae_6ca288e3",
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddbb7efb_239253db",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T13:42:38Z",
      "side": 1,
      "message": "TF-A coding style requires using tabs to indent code. Please replace all spaces with tabs.",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 149,
        "endChar": 8
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "877cb5eb_b15a8bc5",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-01T18:44:05Z",
      "side": 1,
      "message": "Will fix.",
      "parentUuid": "ddbb7efb_239253db",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 149,
        "endChar": 8
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79e809ea_268012c6",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T13:42:38Z",
      "side": 1,
      "message": "Instead of crafting a byte structure, could we rather use a struct mbedtls_asn1_buf? This would be more meaningful and easier to understand IMO, because then we could have field names against the values.\n\nIf it\u0027s not possible, please consider adding comments for each of the fields, like so:\n\n static const char v3[] \u003d {\n   /* Tag */\n   MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC,\n\n   /* Length */\n   3,\n\n   /* Value */\n   MBEDTLS_ASN1_INTEGER, 1, 2,\n };\n\nArguably, people reading this code should be well-versed in ASN.1 grammar so maybe that\u0027s just because I wasn\u0027t...",
      "range": {
        "startLine": 153,
        "startChar": 8,
        "endLine": 153,
        "endChar": 18
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88de3022_d85afdae",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-01T18:44:05Z",
      "side": 1,
      "message": "Something like this?\n\n```c\n static const char v3[] \u003d {\n   /* Outer [CONTEXT SPECIFIC 0] EXPLICIT tag */\n   MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC,\n   /* Length of contained INTEGER */\n   3,\n   /* Tag of version number */\n   MBEDTLS_ASN1_INTEGER,\n   /* Length of version number\n   1,\n   /* v3 version number (2) */\n   2,\n };\n```\n\nThis is the manual DER encoding of the v3 extension field.",
      "parentUuid": "79e809ea_268012c6",
      "range": {
        "startLine": 153,
        "startChar": 8,
        "endLine": 153,
        "endChar": 18
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c47fae_7dacf663",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-07T14:20:48Z",
      "side": 1,
      "message": "Yes, that would work for me.",
      "parentUuid": "88de3022_d85afdae",
      "range": {
        "startLine": 153,
        "startChar": 8,
        "endLine": 153,
        "endChar": 18
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e40bf0c5_cd7334e9",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-07T17:27:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88de3022_d85afdae",
      "range": {
        "startLine": 153,
        "startChar": 8,
        "endLine": 153,
        "endChar": 18
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c4abed_9d7b2270",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T13:42:38Z",
      "side": 1,
      "message": "I find it confusing to include the following tag in this structure, as it\u0027s not part of the v3 extension field per se. I\u0027d rather remove it from here and continue calling mbedtls_asn1_get_tag() for the certificate serial number at line 209, even if it results in slightly less efficient code.",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 159,
        "endChar": 33
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c69edcc5_42ceac81",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-01T18:44:05Z",
      "side": 1,
      "message": "That is fair.",
      "parentUuid": "56c4abed_9d7b2270",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 159,
        "endChar": 33
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86bd4d0e_e646ba09",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 196,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T13:42:38Z",
      "side": 1,
      "message": "What does the \u0027EXPLICIT\u0027 keyword mean in the ASN.1 grammar? I could not easily find it in RFC 5280 but I suspect I might have missed it.",
      "range": {
        "startLine": 196,
        "startChar": 22,
        "endLine": 196,
        "endChar": 30
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6989eb3b_2ce72f40",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 196,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-01T18:44:05Z",
      "side": 1,
      "message": "EXPLICIT means that both the outer tag and inner tag are present, instead of the inner tag being omitted.",
      "parentUuid": "86bd4d0e_e646ba09",
      "range": {
        "startLine": 196,
        "startChar": 22,
        "endLine": 196,
        "endChar": 30
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2634c4aa_536470a0",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 196,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-07T14:20:48Z",
      "side": 1,
      "message": "OK, thanks. So does this mean that if the version number had been IMPLICIT, then its encoding would have looked something like that instead?\n\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC | 0,\n            1,\n            2,\n\nOne more question... Sorry, I am taking advantage of your expertise in ASN.1/X.509, feel free to point me to the RFC 5280 if you don\u0027t have time to answer my questions...\n\nSo I noticed that the issuerUniqueID field in the TBSCertificate sequence is an IMPLICIT one. However, when I compare the way they are parsed in TF-A code right now, I don\u0027t see much difference, both are handled through a call to mbedtls_asn1_get_tag(). I suppose mbedTLS library abstracts that? Do you know?",
      "parentUuid": "6989eb3b_2ce72f40",
      "range": {
        "startLine": 196,
        "startChar": 22,
        "endLine": 196,
        "endChar": 30
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e494d3fa_83640706",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 196,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-07T17:27:28Z",
      "side": 1,
      "message": "\u003e OK, thanks. So does this mean that if the version number had been IMPLICIT, then its encoding would have looked something like that instead?\n\u003e \n\u003e             MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC | 0,\n\u003e             1,\n\u003e             2,\n\nCorrect.\n\n\u003e One more question... Sorry, I am taking advantage of your expertise in ASN.1/X.509, feel free to point me to the RFC 5280 if you don\u0027t have time to answer my questions...\n\nThe actual ITU-T X.690 standard for ASN.1 DER is X.690 at https://www.itu.int/ITU-T/studygroups/com10/languages/.\n\n\u003e So I noticed that the issuerUniqueID field in the TBSCertificate sequence is an IMPLICIT one. However, when I compare the way they are parsed in TF-A code right now, I don\u0027t see much difference, both are handled through a call to mbedtls_asn1_get_tag(). I suppose mbedTLS library abstracts that? Do you know?\n\nFor an EXPLICIT tag one would use two calls to mbedtls_asn1_get_tag(): the first to get the outer tag, the second to get the inner one.  An IMPLICIT tag only uses the outer call.  Validating the unique ID fields is pointless, since they are unused in practice and no other code actually cares about them.",
      "parentUuid": "2634c4aa_536470a0",
      "range": {
        "startLine": 196,
        "startChar": 22,
        "endLine": 196,
        "endChar": 30
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ec35360_21bedac3",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 196,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-08T12:48:27Z",
      "side": 1,
      "message": "Thanks a lot for the explanations, that all makes sense to me now.",
      "parentUuid": "e494d3fa_83640706",
      "range": {
        "startLine": 196,
        "startChar": 22,
        "endLine": 196,
        "endChar": 30
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "749db95f_1930831c",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-12-01T15:34:35Z",
      "side": 1,
      "message": "I was wondering if there is any way to check the version by directly using the mbedtTLS library function instead of using such checks that require ASN.1 encoding of v3",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 65
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "123f8841_f42bb3b4",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T16:02:21Z",
      "side": 1,
      "message": "@Manish: I believe this would require us to parse the version field (using mbedtls_asn1_get_tag() and friends), whereas the intent here (as stated in the commit message) was to avoid any parsing since it\u0027s static information that never changes, so we can just compare with the expected byte sequence, which is expected to be more efficient.\n\nBut I\u0027ll let Demi Marie further comment on that!",
      "parentUuid": "749db95f_1930831c",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 65
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "823ea51f_d551a7cb",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-12-01T16:11:58Z",
      "side": 1,
      "message": "Indeed, I gone through the commit message and understood the intent. Just checking the way to generically handle version checking as this file is mbedTLS wrapper using all friend functions from the mbedTLS library.\n\nHaving said that don\u0027t have any issue in the current approach also.",
      "parentUuid": "123f8841_f42bb3b4",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 65
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "114198d5_1db5a4e0",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-09T15:10:49Z",
      "side": 1,
      "message": "The mbedTLS functions themselves do not check for valid DER encodings of lengths.  I have a PR with mbedTLS to fix that, but such a check could also be added to TF-A as well.",
      "parentUuid": "823ea51f_d551a7cb",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 65
      },
      "revId": "7d4e5f5a6dd1fe947c5a5cb6cfc8bb8cbe86aaf9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}