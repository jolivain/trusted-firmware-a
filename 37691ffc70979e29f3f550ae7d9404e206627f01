{
  "comments": [
    {
      "key": {
        "uuid": "509a85b6_2e2fd258",
        "filename": "lib/fconf/fconf_dyn_cfg_getter.c",
        "patchSetId": 13
      },
      "lineNbr": 33,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-23T12:33:05Z",
      "side": 1,
      "message": "Would it not be better to take the config id as an extra argument? This would make this function a generic dyn_cfg_dtb_info_t constructor, which seems better from a software design perspective to me, even though this is only used by BL1 to construct the fw config descriptor right now.",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 42
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c28e382_8ba8fbc1",
        "filename": "lib/fconf/fconf_dyn_cfg_getter.c",
        "patchSetId": 13
      },
      "lineNbr": 33,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2020-06-23T13:34:29Z",
      "side": 1,
      "message": "As this function name itself specifies that it is for fw_config set only. IMO, we should not expose this function for multiple config info set. Try to restrict this function only for \"FW_CONFIG_ID\" Let me know your opinion",
      "parentUuid": "509a85b6_2e2fd258",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 42
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afdade61_30b3710f",
        "filename": "lib/fconf/fconf_dyn_cfg_getter.c",
        "patchSetId": 13
      },
      "lineNbr": 33,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-24T08:52:14Z",
      "side": 1,
      "message": "I agree that the function name leaves no room for doubt, it clearly indicates that this function only works for the FW_CONFIG file. Still, I see no harm in making it more generic. It\u0027s library code, as such providing a constructor for any dyn_cfg_dtb_info_t sounds like a good idea to me. And you could use it in this file further down at line 76 and for other types of config files at line 94 (provided that you reorganize the code a bit by first extracting the addr/max_size/id from the DTB then call the constructor with this information).",
      "parentUuid": "6c28e382_8ba8fbc1",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 42
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82fc14c7_e785c786",
        "filename": "lib/fconf/fconf_dyn_cfg_getter.c",
        "patchSetId": 13
      },
      "lineNbr": 75,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-23T12:33:05Z",
      "side": 1,
      "message": "AFAIU, this relies on the assumptions that dtb_infos[] is in the BSS section (thus getting initialized to 0) and FW_CONFIG_ID !\u003d 0. Perhaps this is a bit over the top but should we add a compile time assertion here? As in:\n\n CASSERT(FW_CONFIG_ID !\u003d 0, assert_invalid_fw_config_id);\n\n0 is a valid image id (it\u0027s for a FIP image). My motivations are to avoid any breakages in the unlikely event where we would change the image ids but also to self-document the code\u0027s assumptions.",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 75,
        "endChar": 46
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09283e84_8efa2ba2",
        "filename": "lib/fconf/fconf_dyn_cfg_getter.c",
        "patchSetId": 13
      },
      "lineNbr": 75,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2020-06-23T14:07:23Z",
      "side": 1,
      "message": "This is quite unlikely but yes, we can add compile time assertion here.",
      "parentUuid": "82fc14c7_e785c786",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 75,
        "endChar": 46
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1c5d843_18367065",
        "filename": "lib/fconf/fconf_dyn_cfg_getter.c",
        "patchSetId": 13
      },
      "lineNbr": 75,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2020-06-24T08:02:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09283e84_8efa2ba2",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 75,
        "endChar": 46
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62341cb3_844973e6",
        "filename": "plat/arm/common/arm_bl1_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 159,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-23T12:33:05Z",
      "side": 1,
      "message": "I don\u0027t fully understand this change. Why do we need to check whether we\u0027re entering FWU mode that soon now? This would be done a bit later when we\u0027re back in bl1_main() anyway. Any reason why it is required to skip the rest of the platform initialization if we detect that we should take the FWU path? Before this patch, we would go ahead and load the firmware configuration file anyway.",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 159,
        "endChar": 2
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af064ddd_a0fc8432",
        "filename": "plat/arm/common/arm_bl1_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 159,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-23T12:51:22Z",
      "side": 1,
      "message": "Ah, I should have read the review comments before posting this, I now see this was suggested by Raghu (https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/4530/9/plat/arm/common/arm_bl1_setup.c#156).\n\nI think I understand the rationale now. If the FIP is corrupted then we cannot trust the configuration files within it so there\u0027s no point parsing them. Still, I now question the implementation of bl1_plat_get_next_image_id() below, which at the moment checks the FIP integrity again to decide whether it should hand over to BL2 (normal boot flow) or NS_BL1U (FWU flow). I can\u0027t see a reason why a FIP would get corrupted between arm_bl1_platform_setup() and bl1_plat_get_next_image_id(). Once we\u0027ve checked the integrity of the FIP image here at line 155, could we cache this information so as to avoid doing the work twice?\n\nThis is just an optimisation so can be done in a later patch.",
      "parentUuid": "62341cb3_844973e6",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 159,
        "endChar": 2
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc18d10c_cad53457",
        "filename": "plat/arm/common/arm_bl1_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 159,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2020-06-23T13:34:29Z",
      "side": 1,
      "message": "Yes, your understanding is right, \nI too though of this that FIP integrity check is done twice but it should not harm much to do check twice if BL goes for fw_update finally.\nBut agree this check is redundant in case of normal flow (i.e. FIP header is not corrupted)\n\nMay be we can check header corruption way early and set some global variable which can be retrieved here and during bl1_plat_get_next_image_id.\n\nThis can be done as separate patch same as you mentioned.",
      "parentUuid": "af064ddd_a0fc8432",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 159,
        "endChar": 2
      },
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d627aec0_46c9d2d1",
        "filename": "plat/arm/common/arm_bl2_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 75,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-23T12:33:05Z",
      "side": 1,
      "message": "(minor) Remove extra empty line.",
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44771329_3b0bd106",
        "filename": "plat/arm/common/arm_bl2_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 75,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2020-06-23T13:34:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d627aec0_46c9d2d1",
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21c8a05c_9636951d",
        "filename": "plat/arm/common/arm_bl2_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 75,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2020-06-24T08:02:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44771329_3b0bd106",
      "revId": "37691ffc70979e29f3f550ae7d9404e206627f01",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}