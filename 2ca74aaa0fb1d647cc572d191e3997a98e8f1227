{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f3964750_6fb2695f",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 910,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-02T09:27:20Z",
      "side": 1,
      "message": "minor: can we have this width as a define instead so that code will be more readable?",
      "range": {
        "startLine": 910,
        "startChar": 40,
        "endLine": 910,
        "endChar": 41
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cad6ff15_4f8ad090",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 910,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2021-06-02T11:09:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3964750_6fb2695f",
      "range": {
        "startLine": 910,
        "startChar": 40,
        "endLine": 910,
        "endChar": 41
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf04bf05_21229e45",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-02T09:27:20Z",
      "side": 1,
      "message": "Just curious to know, is this keyword used because compiler does not understand this register \u0027zcr_el3\u0027?",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f6cebd_5297f5d8",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2021-06-02T11:09:41Z",
      "side": 1,
      "message": "Yes, zcr_el3 is not recognized. It can be recognized if encosed as follows:\n\n.arch_extension sve\nmsr zcr_el3, x20\n.arch_extension nosve\n\nI deemed it cleaner to have it in this form. Do you prefer the other way?",
      "parentUuid": "cf04bf05_21229e45",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e947ec42_159be712",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-02T12:47:23Z",
      "side": 1,
      "message": "Oh ok.\nIn that case, I think you can add the compiler option \u0027-march\u003darmv8-a+sve\u0027 in makefile to understand this register. is it possible to enable this compiler option by default?",
      "parentUuid": "d3f6cebd_5297f5d8",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f37a34c_0b8f66df",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2021-06-02T13:43:37Z",
      "side": 1,
      "message": "Will add this feature by default, yes. I don\u0027t immediately see any complications from that.",
      "parentUuid": "e947ec42_159be712",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0569c7d5_c6219811",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2021-06-02T15:12:40Z",
      "side": 1,
      "message": "Cannot be enabled by default. aarch32 platforms do not have this option. Will look into that.",
      "parentUuid": "8f37a34c_0b8f66df",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36531f07_5df8285f",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-02T21:56:03Z",
      "side": 1,
      "message": "AFAIK, SVE is applicable only for aarch64 platforms right? \n\nIf yes then IMO, we should add compiler option in main makefile as below:\nifeq ($(ARCH), aarch64)\narch-features           :\u003d       $(arch-features)+sve\nendif\ninstead of updating https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/9565/14/make_helpers/defaults.mk#23. What do you think?",
      "parentUuid": "0569c7d5_c6219811",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "599ce0c4_caa4544b",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2021-06-03T10:23:04Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "36531f07_5df8285f",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c99e1119_93835486",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2021-06-03T11:38:39Z",
      "side": 1,
      "message": "Unfortunatelly there are aarch64 compilers that don\u0027t support sve. I would prefer to leave the S* form for the register. This instruction would not be reached on systems that do not support SVE due to the check before.\nWhat do you think?",
      "parentUuid": "599ce0c4_caa4544b",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3a26825_eb59ec41",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-03T12:35:57Z",
      "side": 1,
      "message": "Thanks for trying out experiment with all compilers. \nI am fine with the current implementation, but just thought if there is any way to provide actual register instead of S* form. \n\nMay I know which aarch64 compiler does not have sve extension support? Interesting to know if there is any other way to provide the extension, or compiler really not support this extension.",
      "parentUuid": "c99e1119_93835486",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c619460d_7d2d4ffa",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2021-06-04T09:52:34Z",
      "side": 1,
      "message": "See this CI build for details: https://ci.trustedfirmware.org/job/tf-ci-gateway/8042/\ngcc-linaro-6.2.1-2016.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gcc for example.",
      "parentUuid": "d3a26825_eb59ec41",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "139ebe04_9ce88df1",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 10
      },
      "lineNbr": 916,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-04T14:45:43Z",
      "side": 1,
      "message": "Ah ok. I think latest Linaro toolchain is needed to make this work.\nAnyways, once we have all latest toolchains (that supports \u0027sve\u0027 extension) then S* form of the instruction can be replaced with actual register as a part of separate patch.",
      "parentUuid": "c619460d_7d2d4ffa",
      "range": {
        "startLine": 916,
        "startChar": 5,
        "endLine": 916,
        "endChar": 17
      },
      "revId": "2ca74aaa0fb1d647cc572d191e3997a98e8f1227",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}