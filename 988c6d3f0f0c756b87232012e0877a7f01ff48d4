{
  "comments": [
    {
      "key": {
        "uuid": "c03242aa_178809a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-04-10T13:49:32Z",
      "side": 1,
      "message": "As a disclaimer, I am not a SMMUv3 expert, my comments are based on a quick read-through of the SMMUv3 specification so I might have got this wrong.\n\nAFAIU, this patch only affects transactions on the *secure* interface, it does not configure anything for transactions on the non-secure interface. If that is correct, I think it would be worth  clarifying here.\n\nAlso, if I am not mistaken, \"disable\" here is a bit misleading. The SMMU_S_CR0.SMMUEN bit is cleared at reset so in a sense transactions are already disabled (although they bypass the SMMU) so this might sound confusing. Perhaps use the word \"abort\" instead?\n\nIn short, I suggest the following commit title:\n\n Abort incoming DMA transactions on SMMU secure interface\n\nFinally, I would like to better understand the consequences of this patch. Without this patch, what would happen if an I/O device issued a DMA request on the secure interface of the SMMU? My understanding is that it would bypass the SMMU, which means that the address would not be translated at all. Is that correct? What does that imply?\n\nThis patch is fundamentally changing the behaviour of the SMMU. I was initially worried that some platforms might rely on the bypass behaviour and would suddenly break if transactions were aborted now ; but it looks like FVP is the only (upstream) platform using this driver so I guess we\u0027re fine.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "988c6d3f0f0c756b87232012e0877a7f01ff48d4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc8aea53_84a692c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-04-10T14:07:34Z",
      "side": 1,
      "message": "On further thoughts, I think the consequences of this patch are slightly more nuanced. The SMMU_S_GBPA.ABORT bit seems to reset to an implementation defined value so I guess that the effect of this patch will differ from one platform to another (on some platforms, this bit might reset to 1, in which case this patch does not change anything). Is that correct?",
      "parentUuid": "c03242aa_178809a2",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "988c6d3f0f0c756b87232012e0877a7f01ff48d4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d9f6ac9_2b277c28",
        "filename": "drivers/arm/smmu/smmu_v3.c",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-04-10T13:49:32Z",
      "side": 1,
      "message": "(minor) Perhaps consider encapsulating this line into a static inline helper function, as this is the pattern used throughout this driver.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 67
      },
      "revId": "988c6d3f0f0c756b87232012e0877a7f01ff48d4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f8a0f7f_e2168cc0",
        "filename": "drivers/arm/smmu/smmu_v3.c",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-04-10T13:49:32Z",
      "side": 1,
      "message": "I think mmio_write_32() might be more appropriate than mmio_setbits_32() here. I think we want to fully initialize this register rather than just updating the ABORT bit. This seems safe to me, given that there\u0027s only RES0 fields in the SMMU_S_GBPA register, there\u0027s no RES1 as far as I can see.",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 16
      },
      "revId": "988c6d3f0f0c756b87232012e0877a7f01ff48d4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}