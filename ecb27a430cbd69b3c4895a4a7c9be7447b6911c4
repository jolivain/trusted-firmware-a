{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5fdab44d_bd7262fc",
        "filename": "common/feat_detect.c",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-01-09T08:58:45Z",
      "side": 1,
      "message": "function?",
      "range": {
        "startLine": 25,
        "startChar": 20,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "ecb27a430cbd69b3c4895a4a7c9be7447b6911c4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d49c6b48_0495ea0c",
        "filename": "common/feat_detect.c",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-01-10T15:47:32Z",
      "side": 1,
      "message": "This is just copied from feat_detect.h.\nThis function will eventually go away after we have converted all features (it\u0027s already gone in my tree), so I didn\u0027t bother to fix those things.",
      "parentUuid": "5fdab44d_bd7262fc",
      "range": {
        "startLine": 25,
        "startChar": 20,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "ecb27a430cbd69b3c4895a4a7c9be7447b6911c4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "596eb40e_88031422",
        "filename": "common/feat_detect.c",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-01-10T16:17:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d49c6b48_0495ea0c",
      "range": {
        "startLine": 25,
        "startChar": 20,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "ecb27a430cbd69b3c4895a4a7c9be7447b6911c4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08ab93fa_040a6ce2",
        "filename": "common/feat_detect.c",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-01-09T08:58:45Z",
      "side": 1,
      "message": "I wonder if this is really to be checked provided this is an internal makefile flag not to be used on the command line?",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "ecb27a430cbd69b3c4895a4a7c9be7447b6911c4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a593067d_d7a7aa97",
        "filename": "common/feat_detect.c",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-01-10T15:47:32Z",
      "side": 1,
      "message": "But this would be a separate patch, wouldn\u0027t it? This one here is just refactoring the existing code, replacing FEAT_STATE_1 (\u003d1) with FEAT_STATE_ALWAYS(\u003d1).",
      "parentUuid": "08ab93fa_040a6ce2",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "ecb27a430cbd69b3c4895a4a7c9be7447b6911c4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66be1e13_3b8005aa",
        "filename": "common/feat_detect.c",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-01-10T16:17:23Z",
      "side": 1,
      "message": "Ok, fine. Yes agree this can be a separate change.\nI wonder if using FEAT_STATE_ALWAYS might be conceptually wrong because this is an internal flag set by the Makefile (not the command line), where those 3-state flag definitions do not really apply?\nhttps://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/make_helpers/defaults.mk#n132\n\nENABLE_PAUTH\u003d1 implies CTX_INCLUDE_PAUTH_REGS\u003d1:\nhttps://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/Makefile#n767\nso I think testing CTX_INCLUDE_PAUTH_REGS alone is more relevant.",
      "parentUuid": "a593067d_d7a7aa97",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "ecb27a430cbd69b3c4895a4a7c9be7447b6911c4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7cda978_e5e05211",
        "filename": "common/feat_detect.c",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-01-10T17:52:25Z",
      "side": 1,
      "message": "There are some features where indeed a three way decision doesn\u0027t make sense or is hard to implement. FEAT_SB is an example, we use that in a critical path, so don\u0027t do a runtime check today, and it sounds pointless to do that (since it\u0027s just a cheaper barrier instruction).\nAnother reason I want to do the conversion feature by feature, we can discuss this there then.",
      "parentUuid": "66be1e13_3b8005aa",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "ecb27a430cbd69b3c4895a4a7c9be7447b6911c4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}