{
  "comments": [
    {
      "key": {
        "uuid": "71f21e92_59f60505",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-11-06T01:17:06Z",
      "side": 1,
      "message": "nit picking here, but there may not be much we can do: If this particular store causes an SError and is taken before CTX_IS_IN_EL3 is set, we will think that the SError came from lower exception level. Is that right ?",
      "range": {
        "startLine": 95,
        "startChar": 1,
        "endLine": 95,
        "endChar": 54
      },
      "revId": "ec4c857bed36cb55434d02da80500d9d6c2c6ebc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57cb20bd_0c729c10",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-11-06T21:36:55Z",
      "side": 1,
      "message": "Hi Raghu,\nI have to admit that this patch is not an elegant solution to the problem at hand. As you mentioned, there is not much I could do. I made the na√Øve assumption that instructions 95-99 execute without causing any further exceptions. In case these instructions cause SError, yes, we (wrongly) attribute the SError to be because of Lower ELs. Moreover, I believe an SError triggered by memory accesses in EL3 is a bigger problem. One particular reason why I made this assumption is that stack at SP_EL3 is probably much safer compared to runtime stack(SP_EL0). Not sure if my assumption makes sense.\n\nLet me know your thoughts.",
      "parentUuid": "71f21e92_59f60505",
      "range": {
        "startLine": 95,
        "startChar": 1,
        "endLine": 95,
        "endChar": 54
      },
      "revId": "ec4c857bed36cb55434d02da80500d9d6c2c6ebc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6f3c771_c94f05da",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 2
      },
      "lineNbr": 148,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-11-06T01:17:06Z",
      "side": 1,
      "message": "do we not need to save x19 here? if you get the SError interrupt between str x19(line 132) in handle_async_ea, the original x19 will be clobbered. same with check and unmask ea.. is that not a problem ? maybe i\u0027m missing something..",
      "range": {
        "startLine": 148,
        "startChar": 3,
        "endLine": 148,
        "endChar": 30
      },
      "revId": "ec4c857bed36cb55434d02da80500d9d6c2c6ebc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9a0fb3e_6d272f1b",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 2
      },
      "lineNbr": 148,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-11-06T21:36:55Z",
      "side": 1,
      "message": "Based on my assumption as stated above, I assumed x19 to be safely saved to the cpu_context structure at SP_EL3. If instruction 133 triggered an SError, wouldnt trying to save x19 here lead to endless aborts? I am sorry if I misunderstood your comments.",
      "parentUuid": "a6f3c771_c94f05da",
      "range": {
        "startLine": 148,
        "startChar": 3,
        "endLine": 148,
        "endChar": 30
      },
      "revId": "ec4c857bed36cb55434d02da80500d9d6c2c6ebc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}