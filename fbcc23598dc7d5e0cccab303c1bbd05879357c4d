{
  "comments": [
    {
      "key": {
        "uuid": "160e44ea_1391426f",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 2,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-01-28T18:34:05Z",
      "side": 1,
      "message": "Is this right?",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cf54e9d_8afb41a6",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-28T12:31:02Z",
      "side": 1,
      "message": "(minor) Is sdei.h really needed here? If it is, what definition do you need from it?",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 26
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51e1124e_d5aff9a3",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2021-01-28T16:25:12Z",
      "side": 1,
      "message": "off + sz could overflow and you would miss this condition. if offset is 0xFFFFFFFFFFFFFFFF and Sz is 1, this would be 0 and \u003c\u003d PCI_OFFSET_MASK.",
      "range": {
        "startLine": 36,
        "startChar": 6,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eec1a643_1bfa337d",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-01-28T18:34:05Z",
      "side": 1,
      "message": "Agree. Need to check for overflow.",
      "parentUuid": "51e1124e_d5aff9a3",
      "range": {
        "startLine": 36,
        "startChar": 6,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66778578_7e123dbf",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000503
      },
      "writtenOn": "2021-01-28T20:24:39Z",
      "side": 1,
      "message": "Silly me, I thought the lower levels were sanitizing to the SMC32 calling convention and truncating the registers and when I went looking for it couldn\u0027t find it (this itself is probably a bug!). I don\u0027t see a saturating add either in tfa, any pointers?\n\nFrankly I think I\u0027m going to actually fix this in the main pci_smc_handler, by zeroing the top bits as the spec requires. I might do it in std svc for 32-bit SMCCC calls, but i\u0027m a bit worried about breaking something now.",
      "parentUuid": "eec1a643_1bfa337d",
      "range": {
        "startLine": 36,
        "startChar": 6,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2066c60_2770acc2",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-29T10:34:45Z",
      "side": 1,
      "message": "\u003e Silly me, I thought the lower levels were sanitizing to the SMC32 calling convention and truncating the registers and when I went looking for it couldn\u0027t find it (this itself is probably a bug!).\n\nYes, it sounds like something that should be sanitized upper by one of the callers. Feel free to submit a patch to this effect.\n\n\u003e I don\u0027t see a saturating add either in tfa, any pointers?\n\nI don\u0027t think we\u0027ve got a saturating add but we\u0027ve got a helper function that checks whether the result of the addition would overflow. See include/lib/utils_def.h, check_uptr_overflow().\n\n\u003e Frankly I think I\u0027m going to actually fix this in the main pci_smc_handler, by zeroing the top bits as the spec requires. I might do it in std svc for 32-bit SMCCC calls, but i\u0027m a bit worried about breaking something now.\n\nYes, I agree on the strategy here. We can have a separate patch to handle the overflow in the std service and we\u0027ll make sure this one goes through deeper reviews from the community.",
      "parentUuid": "66778578_7e123dbf",
      "range": {
        "startLine": 36,
        "startChar": 6,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c45868bc_0f9a8287",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-28T12:31:02Z",
      "side": 1,
      "message": "(minor) This break statement (and others below) is not needed because SMC_RET1() already exits the function.",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 58,
        "endChar": 7
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c67b6302_647af47b",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-28T12:31:02Z",
      "side": 1,
      "message": "Would SMC_PCI_CALL_SUCCESS be more explicit here?",
      "range": {
        "startLine": 67,
        "startChar": 20,
        "endLine": 67,
        "endChar": 21
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "362c0fc7_e7812aca",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-28T12:31:02Z",
      "side": 1,
      "message": "Replace with SMC_PCI_CALL_SUCCESS?",
      "range": {
        "startLine": 82,
        "startChar": 43,
        "endLine": 82,
        "endChar": 45
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b8be54f_cf055a50",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-28T12:31:02Z",
      "side": 1,
      "message": "(minor) Would it make sense to fold these 3 tests, as in\n\n if ((validate...() !\u003d SUCCESS) ||\n     (x4 !\u003d 0) ||\n     (pci_read_config() !\u003d 0)) {\n   SMC_RET2(handle, SMC_PCI_CALL_INVAL_PARAM, 0);\n }\n\n? I would find it easier to the eye but that\u0027s personal style...",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 83,
        "endChar": 49
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85ca61ab_3717eb52",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-28T12:31:02Z",
      "side": 1,
      "message": "Replace with SMC_PCI_CALL_SUCCESS?",
      "range": {
        "startLine": 85,
        "startChar": 20,
        "endLine": 85,
        "endChar": 21
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54b711d5_7d955b2e",
        "filename": "services/std_svc/pci_svc.c",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-28T12:31:02Z",
      "side": 1,
      "message": "(style) Extra space.",
      "range": {
        "startLine": 85,
        "startChar": 23,
        "endLine": 85,
        "endChar": 24
      },
      "revId": "fbcc23598dc7d5e0cccab303c1bbd05879357c4d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}