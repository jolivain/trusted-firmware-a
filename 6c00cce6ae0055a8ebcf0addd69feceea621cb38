{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f4c00b65_dd0b4939",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-06-08T13:44:47Z",
      "side": 1,
      "message": "Hi just a kind nudge as this change is appearing as stalled in our review dashboards.",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "662d29d7_c2a103a2",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1622,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-04-21T13:28:13Z",
      "side": 1,
      "message": "This target should be phony because it doesn\u0027t actually create the `dumpdefines` file:\n\n    .PHONY: dumpdefines\n    dumpdefines:",
      "range": {
        "startLine": 1622,
        "startChar": 0,
        "endLine": 1622,
        "endChar": 12
      },
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2df4f44_458adb9d",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-04-21T10:01:23Z",
      "side": 1,
      "message": "This might be out of scope, but around line 710 a bunch of defines are in BLx_CPPFLAGS. Would it be worth including that too? Or refactoring that bit?",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15f6191a_c6169578",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-04-21T13:28:13Z",
      "side": 1,
      "message": "`BLx_DEFINES` also specifies BL-specific definitions.",
      "parentUuid": "c2df4f44_458adb9d",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29ad5c50_39eea034",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-04-21T13:35:24Z",
      "side": 1,
      "message": "This worked locally for me:\n\n    .PHONY: dump-defines-%\n    dump-defines-%:\n    \t@echo \"$(DEFINES)\" | tr \u0027 \u0027 \u0027\\n\u0027\n    \t@echo \"$(addprefix -D,$($(call uppercase,$*)_DEFINES))\" | tr \u0027 \u0027 \u0027\\n\u0027\n    \t@echo \"$(filter -D,$(CPPFLAGS))\" | tr \u0027 \u0027 \u0027\\n\u0027\n\nPretty helpful - it sure beats scouring V\u003d1 output.",
      "parentUuid": "15f6191a_c6169578",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d42f110e_36d2bcdb",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-04-26T13:27:34Z",
      "side": 1,
      "message": "ACK for .PHONY, forgot about that.\nI tried the other expressions, but they didn\u0027t output anything for me (for fvp).\nIf my makefile knowledge doesn\u0027t let me down, your idea was to say \"make dump-defines-bl1\", and it would also dump $BL1_DEFINES? But I don\u0027t see anything using that prefixed DEFINES pattern.\nAlso CPPFLAGS is constructed using $DEFINES, so that wouldn\u0027t add anything, unless I miss something. The filter expression doesn\u0027t seem to work at all for me anyway.\n\nIn general I am a bit wary of requiring to specify the bootloader stage explicitly on the command line. The relevant -D options seem to be invariant for the BL stages, at least from what I saw. So do we really need that?",
      "parentUuid": "29ad5c50_39eea034",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a99bf0e_eeb9de9f",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-04-26T14:16:37Z",
      "side": 1,
      "message": "well IMAGE_AT_EL3 and IMAGE_AT_EL1 are image dependent (Makefile:710) which is why I brought it up in the first place",
      "parentUuid": "d42f110e_36d2bcdb",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57d6e782_b435cc54",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-04-26T14:28:59Z",
      "side": 1,
      "message": "Mmmh, sure, but they are somewhat obvious, and don\u0027t really convey much information beyond the stage name, which you already know because you specified it? So the idea of dump_define would *not* be to be able to replicate the command line exactly (V\u003d1 does this already), but to check for enabled *features*, or #defines in general. This was triggered by the new feature scheme (\u003d2), especially features that are enabled by default (SPE, SVE), even though many platforms don\u0027t have them.",
      "parentUuid": "9a99bf0e_eeb9de9f",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "889db71d_f3a47ee8",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-04-26T15:45:38Z",
      "side": 1,
      "message": "no, I\u0027m not suggesting to replicate the whole cmdline, but as you say all #defines which these two are examples of (-D right). I do think it is applicable for this to show them.\n\nAdmittedly, these two seem to be the only exceptions I can find... Maybe just change the name to something like dump_generic_defines to explicitly carve them out?",
      "parentUuid": "57d6e782_b435cc54",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd270bc_4350913c",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-06-09T14:30:07Z",
      "side": 1,
      "message": "So I am not too fond of covering everyone and their dog with that. The idea was a sweet, but simple line to cover the feature defines, which are hard to collect otherwise. It is not meant to be a exhaustive list of all compiler options in effect, nor an intricate way of various filtered views - this can be done with grep via a pipeline. For the stage dependent defines: I don\u0027t see how they should be all reported, without getting confusing (double listings). And again, this is not the scope. For the same reason I want to avoid an overlong name.\n\nSo if you don\u0027t mind, I\u0027d like to keep the current focus, and the short name (though with an underscore, to match other targets).\nIf people have other suggestions, I am happy to hear them.",
      "parentUuid": "889db71d_f3a47ee8",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "880333e9_894f1c5e",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-06-12T08:46:25Z",
      "side": 1,
      "message": "That\u0027s alright I suppose. In that case, could I just ask you to update the help comment to say something like \"...a list of \u003cglobal\u003e CPP...\" to maybe make that explicit?",
      "parentUuid": "ccd270bc_4350913c",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f988884_dd379d63",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-06-13T13:20:01Z",
      "side": 1,
      "message": "I\u0027m trying to move the build system away from `DEFINES` in general in anticipation for the eventual transition towards CMake, and as such I imagine that this particular Makefile variable is going to gradually become less useful over time.\n\nI think if we\u0027re going to introduce a Makefile target for this, we should at least *try* to cover as many of the defines as we know about, and if you just want something to dump the enabled features then we should probably give the target an alternative name (e.g. `dump-feature-defines`).",
      "parentUuid": "880333e9_894f1c5e",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d5a4f56_e8844cb3",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-06-13T16:26:45Z",
      "side": 1,
      "message": "@Chris, I am not quite sure what the concerns are here? Are you afraid that we create a Makefile target that people will rely on for the future to come, and that it gets harder and harder to maintain that?\nI don\u0027t really see how we could easily isolate just the feature bits, apart from spelling them out explicitly, and joining them into $DEFINE later, which sounds a bit convoluted. On the other hand, just dumping $DEFINE is literally a one-liner.\n\nThe idea of this dump_define is just a development and debug feature, generating a list that can easily be filtered (line by line), so more symbols than needed is not really a problem. At least that is my perception.\nSo do you want me to just rename the target, or do you have any Makefile magic in mind that would easily implement \"as many of the defines as we know about\", or something more future-proof?",
      "parentUuid": "8f988884_dd379d63",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4bf7656_189e8b1f",
        "filename": "Makefile",
        "patchSetId": 1
      },
      "lineNbr": 1623,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-08-09T11:45:13Z",
      "side": 1,
      "message": "Hi André, sorry for the delay.\n\n\u003e Are you afraid that we create a Makefile target that people will rely on for the future to come, and that it gets harder and harder to maintain that?\n\nSort of. The ultimate aim is that the `DEFINES` variable disappears, and we move towards more granular definition variables for each binary target, at which point the `dump-defines` target becomes empty (because there will be no globally-defined definitions).\n\nWe add definitions to a binary through four mechanisms:\n\n- DEFINES +\u003d X\n- \u003cIMAGE\u003e_DEFINES +\u003d X\n- \u003cIMAGE\u003e_CPPFLAGS +\u003d -DX\n- BL_DEFINES :\u003d X # on demand in build_macros.mk\n\nEventually all but the second form should disappear.\n\nFor a per-image target, we need to take the first three into account (the fourth is inaccessible from the global scope because it\u0027s regenerated for each C file), so I think what we need is:\n\n    .PHONY: dump-defines-%\n    dump-defines-%:\n    \t@echo \"$(sort $(foreach define,$(strip \\\n    \t\t$(DEFINES) $($(call uppercase,$*)_DEFINES) $(filter -D,$(CPPFLAGS))), \\\n    \t\t${define:-D%\u003d%}) \\\n    \t)\" | tr \u0027 \u0027 \u0027\\n\u0027\n\nOn the integration branch this yields (almost) every definition applied to the binary specified by the wildcard, e.g. `dump-defines-bl31`.",
      "parentUuid": "3d5a4f56_e8844cb3",
      "revId": "6c00cce6ae0055a8ebcf0addd69feceea621cb38",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}