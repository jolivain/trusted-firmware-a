{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ef7901a3_0bd44608",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "(minor) Maximum",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 9
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cee5e86c_f5016125",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ef7901a3_0bd44608",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 9
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93e1b5c4_3f402c83",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T19:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cee5e86c_f5016125",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 9
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01c16e5c_599af2e4",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "In v4, this was:\n\n #if TF_MBEDTLS_ECDSA || TF_MBEDTLS_RSA_AND_ECDSA\n \nWhy did you change it in v5? What difference does it make?",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 49
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c8fe0f7_16c97905",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "Previous check was incorrect actually in v5, TF_MBEDTLS_ECDSA and TF_MBEDTLS_RSA_AND_ECDSA are defines and always set to some sane value. so this #if block was always TRUE.",
      "parentUuid": "01c16e5c_599af2e4",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 49
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17cee929_a42c623e",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-13T12:53:15Z",
      "side": 1,
      "message": "Ah yes sure, thanks.",
      "parentUuid": "4c8fe0f7_16c97905",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 49
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e24cfb8c_f376fc86",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "mbedTLS library provides a `mbedtls_pk_parse_subpubkey()` function, which seems to do the same thing. Can\u0027t we use it, rather than implementing our own?",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 177,
        "endChar": 43
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ca8e34c_216d833a",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "I though of this but it needs creation of PK context and all. I feel this way getting the the information using the tag is easier. \nAgain, I believe this function short living until we get some proper proper API from mbedTLS team.",
      "parentUuid": "e24cfb8c_f376fc86",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 177,
        "endChar": 43
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49f6d189_e5187b6e",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-13T12:53:15Z",
      "side": 1,
      "message": "\u003e I though of this but it needs creation of PK context\n\nIsn\u0027t it just a matter of defining a PK context and calling `mbedtls_pk_init()` on it? Because if that\u0027s all it takes, then we\u0027re talking about replacing this whole function by the following code at the caller site:\n\n```\nmbedtls_pk_context pk;\nmbedtls_pk_init(\u0026pk);\nmbedtls_pk_parse_subpubkey(key_start, key_end, \u0026pk);\n```\n\nwhich I find much simpler! This would remove a fair chunk of code from this patch, and not the simplest and easiest to maintain on top of it!\n\nOr am I missing something about `mbedtls_pk_parse_subpubkey()` usage?",
      "parentUuid": "3ca8e34c_216d833a",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 177,
        "endChar": 43
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02e1c16c_d0e6fae6",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "We need to capture the return value of mbedtls_asn1_get_alg() into rc variable.",
      "range": {
        "startLine": 196,
        "startChar": 1,
        "endLine": 196,
        "endChar": 62
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7818f919_0cf9f0d9",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "02e1c16c_d0e6fae6",
      "range": {
        "startLine": 196,
        "startChar": 1,
        "endLine": 196,
        "endChar": 62
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e56241a_e779fd8d",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T19:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7818f919_0cf9f0d9",
      "range": {
        "startLine": 196,
        "startChar": 1,
        "endLine": 196,
        "endChar": 62
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16ba56a7_c3fdca3e",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 201,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "I\u0027d like to check my understanding with you.\n\nLines 195 - 207 are trying to decode the following ASN.1 sequence:\n\n    AlgorithmIdentifier  ::\u003d  SEQUENCE  {\n      algorithm               OBJECT IDENTIFIER,\n      parameters              ANY DEFINED BY algorithm OPTIONAL\n    }\n\nParameters are specific to each key algo. For ECDSA keys, the document [1] provide the details:\n\n    EcpkParameters ::\u003d CHOICE {\n      ecParameters  ECParameters,\n      namedCurve    OBJECT IDENTIFIER,\n      implicitlyCA  NULL }\n\nLooking at line 201, we only support the namedCurve option, which means the parameters are implicitly included through reference to a \"named curve\".\n\nIs my understanding correct? If yes, what was the motivation for not supporting the cases where the parameters are inherited from the issuer and where parameters are explicitly included in the certificate? Are we sure we will not encounter certificates with these?\n\n[1] https://datatracker.ietf.org/doc/html/rfc3279#page-13",
      "range": {
        "startLine": 201,
        "startChar": 1,
        "endLine": 201,
        "endChar": 42
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381f3cb4_9023fb99",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 201,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "This is how currently it is supported in the legacy mbedTLS implementation [1]\n\n[1]:https://github.com/Mbed-TLS/mbedtls/blob/development/library/pkparse.c#L192",
      "parentUuid": "16ba56a7_c3fdca3e",
      "range": {
        "startLine": 201,
        "startChar": 1,
        "endLine": 201,
        "endChar": 42
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56d99e43_3df9f373",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 201,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T19:43:46Z",
      "side": 1,
      "message": "There is a case to support \"parameters are explicitly included in the certificate\" in mbedTLS library, but that needs this config to be enabled \"MBEDTLS_PK_PARSE_EC_EXTENDED\". \nI can\u0027t see this config is enabled in any of the existing mbedtls-config header of TF-A today.",
      "parentUuid": "381f3cb4_9023fb99",
      "range": {
        "startLine": 201,
        "startChar": 1,
        "endLine": 201,
        "endChar": 42
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85a15d77_a41b84f5",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 201,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-13T12:53:15Z",
      "side": 1,
      "message": "Acknowledged. Thanks for the explanation.",
      "parentUuid": "56d99e43_3df9f373",
      "range": {
        "startLine": 201,
        "startChar": 1,
        "endLine": 201,
        "endChar": 42
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c22ff82_28234a24",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "In the event where (alg_params.tag !\u003d MBEDTLS_ASN1_OID) (see line 201), the grp_id variable passed to mbedtls_ecc_group_to_psa() function here would be uninitialized and we\u0027d get an undefined psa_ecc_family value back.\n\n* Either we need to return CRYPTO_ERR_SIGNATURE in the event where (alg_params.tag !\u003d MBEDTLS_ASN1_OID)\n* Or we need to set an initial value for the grp_id variable when defining it at line 180.\n\nI feel we want to enforce the former.",
      "range": {
        "startLine": 207,
        "startChar": 44,
        "endLine": 207,
        "endChar": 50
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73acddfa_b2b71cfe",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "mbedtls library documentation says the following about mbedtls_ecc_group_to_psa() function:\n\n\u003e This function is provided solely for the convenience of Mbed TLS and may be removed at any time without notice.\n\nThis looks fragile for us to use this in TF-A. Do you know of any alternative way of retrieving this information, which would be more stable and future-proof?",
      "range": {
        "startLine": 207,
        "startChar": 19,
        "endLine": 207,
        "endChar": 43
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9cd31fe_8d985021",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "I don\u0027t think any other way apart from writing then same function in TF-A. It is just mapping the mbedTLS_ECP* with PSA_ECC* enums.",
      "parentUuid": "73acddfa_b2b71cfe",
      "range": {
        "startLine": 207,
        "startChar": 19,
        "endLine": 207,
        "endChar": 43
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9171ff89_0c504d1e",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2c22ff82_28234a24",
      "range": {
        "startLine": 207,
        "startChar": 44,
        "endLine": 207,
        "endChar": 50
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89c193e3_2985e227",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T19:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9171ff89_0c504d1e",
      "range": {
        "startLine": 207,
        "startChar": 44,
        "endLine": 207,
        "endChar": 50
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ab8b697_c50f12e5",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-13T12:53:15Z",
      "side": 1,
      "message": "OK, fair enough. In this case, could you please raise a ticket on Mbed TLS Github project to request that mbedtls_ecc_group_to_psa() stays part of the public API for the foreseeable future, or ask them for advice on alternative ways of doing this?",
      "parentUuid": "b9cd31fe_8d985021",
      "range": {
        "startLine": 207,
        "startChar": 19,
        "endLine": 207,
        "endChar": 43
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5336eb46_92b2cee2",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "If I am not mistaken, this computation relies on the absence of padding at the end of the public key buffer. IOW, it relies on the SubjectPublicKeyInfo Sequence to occupy all `*pk_len` bytes.\n\nHowever, I do not believe we necessarily have this guarantee... The first call to `mbedtls_asn1_get_tag()` at line 188 only enforces that the SubjectPublicKeyInfo Sequence occupies _at most_ `*pk_len` bytes, but it could be less. IOW the `len` value obtained as a result of line 188 might be less than `*pk_len`.\n\n* Either we need to check that there is no padding at the end of the SubjectPublicKeyInfo Sequence (`pk_ptr + len \u003d\u003d pk_end` after the call line 188).\n\n* Or maybe change the computation at line 109.",
      "range": {
        "startLine": 209,
        "startChar": 1,
        "endLine": 209,
        "endChar": 58
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d3037aa_708a1532",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "Sorry, I didn\u0027t understand comment. Can\u0027t these padding bytes gets removed after invocation of line no. 210 (that provides actual length of the PK without padding byte). Here \"end\" generally specified as a maximum value, right?",
      "parentUuid": "5336eb46_92b2cee2",
      "range": {
        "startLine": 209,
        "startChar": 1,
        "endLine": 209,
        "endChar": 58
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4dce824_95a62a3d",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-10T09:02:06Z",
      "side": 1,
      "message": "Just to show-case with and example, what I\u0027m trying to achieve in the latest version of the patch i.e. v7 is as below -\n\nConsider ECDSA PK-\n3059301306072a8648ce3d020106082a8648ce3d030107034200042927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513\n\nand its breakdown is as below -\n 30 59 # Sequence length 0x59 -  91 bytes long -\u003e i.e. pk_ptr + *pk_len;\n 30 13 # Sequence length 0x13 -  21 bytes long -\u003e i.e. pk_ptr + len (0x59)\n 06 07 2a8648ce3d0201  # Object ID -  7 bytes long - 1.2.840.10045.2.1 (ECC)\n 06 08 2a8648ce3d030107  # Object ID -  8 bytes long - 1.2.840.10045.3.1.7 (ECDSA \n P256)\n 03 42 # Bit stream - 0x42 (66 bytes long) -\u003e -\u003e pk_ptr + len - (oid-len(0x07) + \n param-len(0x08) - 2 x (tag-size(0x1) + len-size(0x1)))\n\nPlease let me know if this makes sense!",
      "parentUuid": "2d3037aa_708a1532",
      "range": {
        "startLine": 209,
        "startChar": 1,
        "endLine": 209,
        "endChar": 58
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dc84804_8fa0d7af",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-13T12:53:15Z",
      "side": 1,
      "message": "I think the computation in v7 is more accurate because it no longer relies on `*pk_len` but rather relies on the length we got back from `mbedtls_asn1_*()` functions.",
      "parentUuid": "e4dce824_95a62a3d",
      "range": {
        "startLine": 209,
        "startChar": 1,
        "endLine": 209,
        "endChar": 58
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89729d4b_2e25216e",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 227,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "It would be useful to put for reference in this comment the ASN.1 encoding of what we are trying to parse:\n\n```\nEcdsa-Sig-Value  ::\u003d  SEQUENCE  {\n  r     INTEGER,\n  s     INTEGER\n}\n```",
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce4c387e_35f806da",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 227,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "89729d4b_2e25216e",
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35d5cb73_5db10232",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 227,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T19:43:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce4c387e_35f806da",
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e273354_36f2af5e",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 247,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "Can\u0027t we use mbedtls_asn1_get_int() instead?",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 247,
        "endChar": 28
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60c113e1_662f65bb",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 247,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:16:23Z",
      "side": 1,
      "message": "Issue is mbedtls_asn1_get_int() provides a single integer value.and also, this function assumes that integer has no padding bit.",
      "parentUuid": "6e273354_36f2af5e",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 247,
        "endChar": 28
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffbfcdb7_d7bf3032",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 247,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-13T12:53:15Z",
      "side": 1,
      "message": "\u003e Issue is mbedtls_asn1_get_int() provides a single integer value.\n\nBut we\u0027re already using 2 calls to mbedtls_asn1_get_tag() to retrieve R integer then S integer, so I don\u0027t see much of a difference if we use 2 calls to mbedtls_asn1_get_int()...\n\n\u003e and also, this function assumes that integer has no padding bit.\n\nRight, that is more problematic. I am surprised that Mbed TLS does not provide a variant of mbedtls_asn1_get_int() which handles the padding bit... Out of curiosity, during your testing did you encounter integers with a padding bit?",
      "parentUuid": "60c113e1_662f65bb",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 247,
        "endChar": 28
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdd9ab37_8e18f82e",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 350,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T13:28:56Z",
      "side": 1,
      "message": "(minor) Truncate line to 80 columns.",
      "range": {
        "startLine": 350,
        "startChar": 61,
        "endLine": 350,
        "endChar": 69
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba1a4d5c_ac7f7cf0",
        "filename": "drivers/auth/mbedtls/mbedtls_psa_crypto.c",
        "patchSetId": 5
      },
      "lineNbr": 350,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-09T14:34:01Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "bdd9ab37_8e18f82e",
      "range": {
        "startLine": 350,
        "startChar": 61,
        "endLine": 350,
        "endChar": 69
      },
      "revId": "2048e116bfe135df75651716e7d69c532892877f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}