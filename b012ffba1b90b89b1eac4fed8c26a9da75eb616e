{
  "comments": [
    {
      "key": {
        "uuid": "619bfc36_ac7f602d",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1000061
      },
      "writtenOn": "2020-07-17T07:19:21Z",
      "side": 1,
      "message": "SPMC can be S-EL1 component for pre-Armv8.4 platforms. You may want to add this",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 82,
        "endChar": 34
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2977d458_c249fb73",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-17T16:03:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "619bfc36_ac7f602d",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 82,
        "endChar": 34
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94c9d077_61860ce3",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000061
      },
      "writtenOn": "2020-07-17T07:19:21Z",
      "side": 1,
      "message": "I think, this switch is not required. SPMD_SPM_AT_SEL2 can still be used for this purpose. Isn\u0027t it?\n\nSPMD_SPM_AT_SEL2\u003d1 -\u003e save/store EL2 registers\nSPMD_SPM_AT_SEL2\u003d0 -\u003e Do nothing",
      "range": {
        "startLine": 123,
        "startChar": 5,
        "endLine": 123,
        "endChar": 25
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fcc30c4_9b4efb92",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-17T16:03:10Z",
      "side": 1,
      "message": "We chose to make CTX_INCLUDE_EL2_REGS independent from SPMD.\nThis option provides the generic support for barely saving/restoring EL2 registers from an Arm arch perspective.\nWe thought this option might be re-purposed for use cases different from the SPMD context, in the future.",
      "parentUuid": "94c9d077_61860ce3",
      "range": {
        "startLine": 123,
        "startChar": 5,
        "endLine": 123,
        "endChar": 25
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9988b313_31965f20",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 1000061
      },
      "writtenOn": "2020-07-17T07:19:21Z",
      "side": 1,
      "message": "SPMC runs at S-EL1 with single secure partition at S-EL1.",
      "range": {
        "startLine": 300,
        "startChar": 36,
        "endLine": 300,
        "endChar": 54
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "521d64b7_a10e6632",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-17T16:03:10Z",
      "side": 1,
      "message": "Not sure what you mean exactly?\nAre you suggesting to reword?",
      "parentUuid": "9988b313_31965f20",
      "range": {
        "startLine": 300,
        "startChar": 36,
        "endLine": 300,
        "endChar": 54
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e40da4f_3afbf9e5",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 1000061
      },
      "writtenOn": "2020-07-19T06:07:48Z",
      "side": 1,
      "message": "Yes, suggesting reword.\nAs per the specification, SP manifest at physical FF-A instance must be used by the SPMD to setup a SP that co-resides with the SPMC and executes in S-EL1 or Secure Supervisor mode at the physical FF-A instance.",
      "parentUuid": "521d64b7_a10e6632",
      "range": {
        "startLine": 300,
        "startChar": 36,
        "endLine": 300,
        "endChar": 54
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1cfd001_1cb8cfec",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-21T07:36:07Z",
      "side": 1,
      "message": "Ok I will reword this.",
      "parentUuid": "3e40da4f_3afbf9e5",
      "range": {
        "startLine": 300,
        "startChar": 36,
        "endLine": 300,
        "endChar": 54
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15060b68_f71355fb",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-10T20:44:05Z",
      "side": 1,
      "message": "what is the primary SP? Is it like primary VM in NWd or did you mean the \"SP\u0027s primary Execution Context exits through...\"?",
      "range": {
        "startLine": 497,
        "startChar": 4,
        "endLine": 497,
        "endChar": 16
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2d5a364_6017a00d",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-13T12:17:45Z",
      "side": 1,
      "message": "No I meant the EC corresponding the the primary core in the given SP, that is the EC used when the partition is booted (knowing we map EC# \u003d PE#).\nI will reword this.",
      "parentUuid": "15060b68_f71355fb",
      "range": {
        "startLine": 497,
        "startChar": 4,
        "endLine": 497,
        "endChar": 16
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59975680_1880ce7b",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-13T15:22:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b2d5a364_6017a00d",
      "range": {
        "startLine": 497,
        "startChar": 4,
        "endLine": 497,
        "endChar": 16
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "724e401a_38d76efa",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 537,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-10T20:44:05Z",
      "side": 1,
      "message": "The primary EC of *an* SP ?",
      "range": {
        "startLine": 537,
        "startChar": 20,
        "endLine": 537,
        "endChar": 34
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db1d7b27_bfb7e8e8",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 537,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-13T12:17:45Z",
      "side": 1,
      "message": "Yes, the EC used when booting within the given SP.",
      "parentUuid": "724e401a_38d76efa",
      "range": {
        "startLine": 537,
        "startChar": 20,
        "endLine": 537,
        "endChar": 34
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "534a297b_031cd77c",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 537,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-13T15:22:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "db1d7b27_bfb7e8e8",
      "range": {
        "startLine": 537,
        "startChar": 20,
        "endLine": 537,
        "endChar": 34
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "826c4c4c_12baa38d",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-10T20:44:05Z",
      "side": 1,
      "message": "i assume this is because we dont have the memory management messages still ?",
      "range": {
        "startLine": 621,
        "startChar": 19,
        "endLine": 621,
        "endChar": 80
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1683b9a_1e17374d",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-13T12:17:45Z",
      "side": 1,
      "message": "Hum, right, I think that\u0027s an overlook! I will correct this.",
      "parentUuid": "826c4c4c_12baa38d",
      "range": {
        "startLine": 621,
        "startChar": 19,
        "endLine": 621,
        "endChar": 80
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61e95e42_0bb1e40a",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-13T15:22:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b1683b9a_1e17374d",
      "range": {
        "startLine": 621,
        "startChar": 19,
        "endLine": 621,
        "endChar": 80
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2380aeaf_052f5f69",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-10T20:44:05Z",
      "side": 1,
      "message": "i assume this will be validated through CPU architectural state since the id specified cannot be trusted implicitly?",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 655,
        "endChar": 69
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27f06fc6_16e862c8",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-13T12:17:45Z",
      "side": 1,
      "message": "I\u0027m not sure I see your point, but I\u0027m sure there\u0027s a sensible reason for your question, can you elaborate a bit more?\nIndeed we don\u0027t trust the id, but as soon as the running instance (Hypervisor or SPMC) \"knows\" it is running in NWd or SWd, then it can filter the IDs appropriately. Such knowledge is not inferred by architectural state (actually I don\u0027t know of a way to identify the running security state as EL2/EL1 states are \"virtualized\" by the EL3 monitor). The chosen method for now is adopting a SECURE_WORLD macro and make the code conditional: https://review.trustedfirmware.org/c/hafnium/hafnium/+/4708",
      "parentUuid": "2380aeaf_052f5f69",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 655,
        "endChar": 69
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d7d8b36_f1a168a6",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-13T15:22:27Z",
      "side": 1,
      "message": "Understood. I guess i was asking how does SPMC(hafnium with SECURE_WORLD macro) enforce/police that a VM/SP is not lying about it\u0027s origin world. I was thinking about SCR_EL3.NS bit when i was talking about CPU architectural state and was thinking about using things like is_secure_caller(), secure_origin flags etc which are derived from SCR_EL3 at the lowest layer, to ensure that, for example, a VM cannot claim to be of secure origin.",
      "parentUuid": "27f06fc6_16e862c8",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 655,
        "endChar": 69
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d3a3b3_bcfeb848",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-17T16:03:10Z",
      "side": 1,
      "message": "We discussed checking NS bit indeed, but that can only be done at SPMD/EL3. In order to make SPMD as generic as possible we agreed the filtering logic might better fit in the SPMC. Although at S-EL1/S-EL2 there is no architectural means to check the running security state. Thus the SECURE_WORLD build time macro provides such means of statically determining the security state when the hafnium binary in SWd is built with such macro.",
      "parentUuid": "8d7d8b36_f1a168a6",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 655,
        "endChar": 69
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f83436c_f5cd96b5",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-17T17:50:21Z",
      "side": 1,
      "message": "apologize, i think i\u0027m missing something trivial here. If a VM sends a message to an SP with FFA_MSG_SEND_DIRECT_REQ, and lies about it\u0027s source endpoint id as being from secure world(bit 15 set), what component checks that the VM is not lying that it is from the secure world?\nI\u0027m not asking about checking the security state that hafnium itself is running in(which is provided by SECURE_WORLD macro), i\u0027m asking about verifying the security state that a sender of a message \"claims\" to be from.\n\nSpecifically, the statement here says: \"A VM-to-SP messaging\npassing shall have an origin world being non-secure (id bit 15 clear)\". I was trying to ask if hafnium assumes that a VM will not lie by clearing bit 15 or if it actively enforces(which it must) by checking that it is not lying. An SP could lie too that it is from the normal world. Both of these conditions must be policed/enforced, so how is that done?",
      "parentUuid": "43d3a3b3_bcfeb848",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 655,
        "endChar": 69
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "777656bd_07c24cc6",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-21T07:36:07Z",
      "side": 1,
      "message": "Note, the description here is only current thinking. Nothing is really enforced yet and still open to discussion.\n\n\u003e  what component checks that the VM is not lying that it is from the secure world?\n\nAn incoming direct message request arriving at SPMD from NWd is forwarded to SPMC without a specific check. The SPMC is resumed through eret and \"knows\" the message is coming from normal world in this specific code path. Thus the origin endpoint id must be checked by SPMC for being a normal world id at this stage.\n\n\u003e I was trying to ask if hafnium assumes that a VM will not lie by clearing bit 15 or if it actively enforces(which it must) by checking that it is not lying.\n\nThe SPMC should just reject the direct message if the claimed world in origin endpoint id is not consistent. It is either forwarded by SPMD and origin endpoint id must be \"normal world id\", or initiated by an SP and origin endpoint id must be \"secure world id\".\n\n\u003e An SP could lie too that it is from the normal world. Both of these conditions must be policed/enforced, so how is that done?\n\nAn SP sending a direct message request must have its origin endpoint id with bit 15 set, and this can be checked by the SPMC when the SP invokes the ABI.",
      "parentUuid": "0f83436c_f5cd96b5",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 655,
        "endChar": 69
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba3d9c09_3bd8f4f1",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 669,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-10T20:44:05Z",
      "side": 1,
      "message": "if an SP cannot send a direct message to a VM, can it or should it be allowed to receive a direct message response from a VM?",
      "range": {
        "startLine": 669,
        "startChar": 6,
        "endLine": 669,
        "endChar": 56
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c86a50c2_951ea24b",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 669,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-07-13T12:17:45Z",
      "side": 1,
      "message": "You\u0027re right, that\u0027s a mistake I will correct this.\nWe should have: \"An SP can send a direct message response to a VM\"\n\nIn fact this is currently even more restrictive as current direct message req/resp implementation in NWd only permits the PVM to send direct message requests (https://review.trustedfirmware.org/c/hafnium/hafnium/+/4090)\n\nSo I suspect this section will evolve as the development goes on this front.\n\nUltimately we\u0027d not want restrictions on direct messaging at least for SPs. Although the Hafnium based implementation hardly scales to direct messaging semantics and might require a sensible amount of changes to achieve this goal. As a an interim plan, what is mentioned here is a minimum set of rules to permit early bring up of a TEE like OP-TEE.",
      "parentUuid": "ba3d9c09_3bd8f4f1",
      "range": {
        "startLine": 669,
        "startChar": 6,
        "endLine": 669,
        "endChar": 56
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d3d22ef_5bc9e99e",
        "filename": "docs/components/secure-partition-manager.rst",
        "patchSetId": 3
      },
      "lineNbr": 669,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-13T15:22:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c86a50c2_951ea24b",
      "range": {
        "startLine": 669,
        "startChar": 6,
        "endLine": 669,
        "endChar": 56
      },
      "revId": "b012ffba1b90b89b1eac4fed8c26a9da75eb616e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}