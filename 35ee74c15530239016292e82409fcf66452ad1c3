{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5912229d_474eccc9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000962
      },
      "writtenOn": "2023-01-04T20:05:29Z",
      "side": 1,
      "message": "The corresponding Linux kernel driver source is currently available here: https://chromium-review.googlesource.com/c/chromiumos/third_party/kernel/+/4004284\n\nLet me know if you\u0027d like me to upload that as well (and where it gets uploaded to) as I see you are also the maintainer for the kernel driver.",
      "revId": "35ee74c15530239016292e82409fcf66452ad1c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a89ced5_f128f6cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-01-05T12:22:47Z",
      "side": 1,
      "message": "I\u0027m not sure this is such a good idea. With this you add a wide open door into secure world. How can you guarantee that an attacker isn\u0027t able to block this SMC and leave it open post boot?\n\nI guess you\u0027re adding this for added flexibility. I\u0027ve seen other solutions where for instance U-Boot is used to load TF-A before switching over to normal world. Perhaps that\u0027s an option instead?",
      "revId": "35ee74c15530239016292e82409fcf66452ad1c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b6f78bd_e982b2e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-01-05T15:53:20Z",
      "side": 1,
      "message": "Just to add some context, we had brought the basic idea for this up on the mailing list before writing this patch: https://lists.trustedfirmware.org/archives/list/tf-a@lists.trustedfirmware.org/thread/D2HEKDEGRBLMMLAQ6OKC3AQDM4ELSJPL/#D2HEKDEGRBLMMLAQ6OKC3AQDM4ELSJPL\n\nOf course we\u0027re aware of the security implications of this patch, and that\u0027s why it\u0027s supposed to be a default-off build option with a big warning next to it to make sure nobody turns this on without really understanding the implications. It is something that we need for our particular use case and solves problems for us (e.g. with the update flow) that any model that bundles OpTee with the boot firmware wouldn\u0027t, so that\u0027s why we want to add it as an option. We\u0027re not trying to say that this flow is a generally good idea for the majority of TF-A users. We just want it to be available by choice to those who really need it and can make it work with their threat model. Happy to take feedback on what else we should to the comments or documentation or whatever to make this clearer in the code and avoid accidental use.",
      "parentUuid": "4a89ced5_f128f6cb",
      "revId": "35ee74c15530239016292e82409fcf66452ad1c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c45d4079_51899a19",
        "filename": "services/spd/opteed/opteed.mk",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-01-05T16:17:58Z",
      "side": 1,
      "message": "To continue the discussion from our local review, I still believe this is wrong, but I\u0027m also not quite sure what\u0027s right. Maybe some of the other maintainers here can help clarify:\n\nIn general, my understanding is that build-time options in TF-A should always be defined (via add_define), and then set to either 0 or 1 as a normal Makefile variable (add_define is basically a function that adds `-D\u003cname\u003e\u003d\u003cvalue of the corresponding Makefile variable\u003e` to CFLAGS). In the code, you should then use `#if \u003cname\u003e` (or even just a C `if (name)`) to check the option. This is true for all the variables that are defined in make_helpers/defaults.mk and listed in the big add_defines block of the toplevel Makefile.\n\nHowever, I\u0027m not quite sure what the deal with PLAT_XLAT_TABLES_DYNAMIC is supposed to be. It\u0027s a variable meant for use in generic code, so I would assume it would be listed in defaults.mk, but it isn\u0027t. Maybe that\u0027s just an oversight? The code is using `#if` to check for it in some places and `#ifdef` in others, which definitely doesn\u0027t sound right. There\u0027s an add_define for it in a couple of sub-Makefiles while others (e.g. the arm/board platform.mks) just add a CFLAG for it directly.\n\nI think maybe we should have another patch before this one first to fix up PLAT_XLAT_TABLES_DYNAMIC everywhere else in the code, move it into defaults.mk and the toplevel add_defines, and clean up all the code that uses #ifdef instead of #if to check for it. Then this patch just needs to define OPTEE_ALLOW_SMC_LOAD, but it should also define that as an #if (not #ifdef) option for consistency -- so the add_define for it should be in this file but outside of the ifeq block.",
      "revId": "35ee74c15530239016292e82409fcf66452ad1c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10dd3e91_5d3df6f8",
        "filename": "services/spd/opteed/opteed_common.c",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-01-05T16:17:58Z",
      "side": 1,
      "message": "btw I think this is no longer needed here",
      "revId": "35ee74c15530239016292e82409fcf66452ad1c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}