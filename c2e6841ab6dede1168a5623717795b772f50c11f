{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e35ac9b5_3e1242c5",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 179,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-05-13T06:23:28Z",
      "side": 0,
      "message": "Should we at least check count is non-zero and bounded (to some limit)? What happens if emad_count happens to be very large unintentionally or maliciously? May emad array be accessed beyond its bounds?\nPerhaps this cannot \u0027happen\u0027 because the Hypervisor is trusted? In which case, what about the case when no Hypervisor is present?",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b873fed8_423a8f89",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 179,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-05-15T13:30:50Z",
      "side": 0,
      "message": "Good point, added the check back to ensure that the count is not zero. \nRe the bound check, I guess the simplest way would be to at least ensure that the maximum size cannot go outside the size of the descriptor? This is one of the checks I added during the v1.1 update but I realize I didn\u0027t add the corresponding check here as well.",
      "parentUuid": "e35ac9b5_3e1242c5",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8452a9e9_44dc6bcc",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 179,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-05-17T15:56:50Z",
      "side": 0,
      "message": "Ack",
      "parentUuid": "b873fed8_423a8f89",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "775c332e_faf5fad5",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 575,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-05-13T08:02:49Z",
      "side": 0,
      "message": "Should it check emad_count is at least 1 (up to some limit perhaps)?\nSection 10.11.3.1 says\n \"In an FFA_MEM_LEND and FFA_MEM_SHARE ABI invocation,\n â€“ The Endpoint memory access descriptor count field in the transaction descriptor must be\n set to a non-zero value. This implies that the Owner must specify at least a single\n Borrower  endpoint in a transaction to lend or share memory.\"\n\nAlso notice donate (not supported yet AFAIR) restricts to one borrower hence count must be 1.",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a6c1186_2767f03d",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 575,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-05-15T13:30:50Z",
      "side": 0,
      "message": "Good point, added the same check back to ensure it is not 0. Although I\u0027m not sure what we could set the limit to here as we don\u0027t know what the layout of the normal world would look like?",
      "parentUuid": "775c332e_faf5fad5",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72da4434_d5b1a2ea",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 575,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-05-16T09:10:19Z",
      "side": 0,
      "message": "I guess the threat is if emad array is accessed beyond the upper limit, which means TX buffer is accessed beyond its limit resulting in an EL3 page fault?\nI guess this couldn\u0027t happen before because the emad array was fixed to a single item?",
      "parentUuid": "6a6c1186_2767f03d",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3575eafe_6c85e7ab",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 575,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-05-16T11:59:55Z",
      "side": 0,
      "message": "Yes that is my understanding, therefore the only check I could think of was to ensure that the maximum element of the emad array resides within the TX buffer and return an error if this is not the case? \nDo you have anything else in mind?",
      "parentUuid": "72da4434_d5b1a2ea",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8490308_4f35ad88",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 575,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-05-17T15:56:50Z",
      "side": 0,
      "message": "Yes, do you mean this check is already implemented somewhere?",
      "parentUuid": "3575eafe_6c85e7ab",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43c60161_115729ca",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 32
      },
      "lineNbr": 575,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-05-17T19:15:44Z",
      "side": 0,
      "message": "Ah apologies I had confused myself where this comment was located and had though this was part of the original share/lend transaction which would be covered by the in spmc_shmem_check_obj.\n\nUpdated this to ensure the emad array lies within the size of the retrieve descriptor.",
      "parentUuid": "e8490308_4f35ad88",
      "revId": "c2e6841ab6dede1168a5623717795b772f50c11f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}