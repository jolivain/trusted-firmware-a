{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4ab6f268_796cde5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-06T11:56:57Z",
      "side": 1,
      "message": "The code looks good to me (I only have some minor comments) but I\u0027ve got some questions about the expected usage model for these interfaces. \n\n1. I think the DAK is an asymmetric key pair, is that right?\n\n2. If this is the case, which of the public or private part do we get from rss_delegated_attest_get_delegated_key()?\n\nI am confused because we need both AFAIU (the private part will be needed to sign the secondary attestation token, while the public part must be hashed to establish the hash lock with the platform attestation token), but the interface only seems to return one through \u0027key_buf\u0027...\n\n3. rss_delegated_attest_get_token() needs to be told which hash algorithm will be used on the DAK. Why? Does the \"get platform\" service on the RSS side use this information to make sense of the DAK hash it receives?",
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5cb4dfb_31f8f051",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-09-07T10:01:27Z",
      "side": 1,
      "message": "I have added a description in the header file about the expected usage model.\n\n1.) Yes.\n2.) Only the private, the public part is computed by the requester. In this case RMM. mbedtls does it when the private part of the key is registered. The PSA API works similarly, we modelled based on that. \n3.) rss_delegated_attest_get_delegated_key() indicates which hash_algo will be used by the requester to compute the hash of the public key (afterwards it computed the public key.).  RSS needs this info because in rss_delegated_attest_get_token() the hash of the public key is the input. RSS needs to verify that the hash and the previously derived key are indeed aligned. Only the hash of the DAKpub is allowed to be the challenge value in the platform attestation token. Other data must be rejected.",
      "parentUuid": "4ab6f268_796cde5c",
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "204d7d17_836157d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-08T14:15:44Z",
      "side": 1,
      "message": "Many thanks for the detailed answer and the additional comments in the code. This is much clearer to me now.\n\nGiven that rss_delegated_attest_get_delegated_key() returns the *private* part of the DAK then I suppose it requires careful management to keep it safe in root world.\n* I suppose we will need to store it in root SRAM, and clear the key buffer once we\u0027re done with it. This is a caller\u0027s responsibility so it\u0027s outside the scope of this patch, but I am just making a note of it for the future.\n* Also I suppose the private DAK will be encrypted before it gets sent to RMM? Or will it just be passed through a realm-world owned buffer?",
      "parentUuid": "b5cb4dfb_31f8f051",
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9081a0b2_9a3f28c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-15T12:31:37Z",
      "side": 1,
      "message": "Just one more thought: this patch might require an update to TF-A threat model. As I understand, the DAK is a new asset to protect, from a threat modelling perepective.",
      "parentUuid": "204d7d17_836157d1",
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "817475f0_258c4709",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-09-16T14:32:23Z",
      "side": 1,
      "message": "\u003e I suppose we will need to store it in root SRAM, and clear the key buffer once \u003ewe\u0027re done with it. This is a caller\u0027s responsibility so it\u0027s outside the scope \u003eof this patch, but I am just making a note of it for the future.\n\nMHU driver allocates a buffer in root SRAM (rss_comms.c:51) for message exchange, where data is stored temporarily until it is copied further to caller-provided buffers. The caller of PSA APIs allocates their own buffers where DAK key will end up. In the case of RMM, this buffer can be in shared memory (b/w BL31 and RMM). When SMC returns to RMM, then RMM is responsible for clearing the data from the shared memory and copy to its final location. But BL31 is responsible for clearing the temporary MHU message buffer in root SRAM, which does not happen right now. So I have added a patch to do it:\nhttps://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/16753/\n\n\u003eAlso I suppose the private DAK will be encrypted before it gets sent to RMM? Or \u003ewill it just be passed through a realm-world owned buffer?\n\nIt is passed without encryption. RMM needs to trust in BL31 anyway so I think there is no point to encrypt. DAK key is sent over this path RSS-BL31-RMM. If BL31 is compromised then it can read all memory (???).\n\n\u003e Just one more thought: this patch might require an update to TF-A threat model. \u003e As I understand, the DAK is a new asset to protect, from a threat modelling perepective.\n\nCould you point out the TF-A threat model. I will check and add DAK if necessary.",
      "parentUuid": "9081a0b2_9a3f28c7",
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5944913e_af7fc66f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-19T10:03:30Z",
      "side": 1,
      "message": "\u003e MHU driver allocates a buffer in root SRAM (rss_comms.c:51) for message exchange, where data is stored temporarily until it is copied further to caller-provided buffers. The caller of PSA APIs allocates their own buffers where DAK key will end up. In the case of RMM, this buffer can be in shared memory (b/w BL31 and RMM). When SMC returns to RMM, then RMM is responsible for clearing the data from the shared memory and copy to its final location. But BL31 is responsible for clearing the temporary MHU message buffer in root SRAM, which does not happen right now. So I have added a patch to do it:\n\u003e https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/16753/\n\nGot it, thanks!\n\n\u003e It is passed without encryption. RMM needs to trust in BL31 anyway so I think there is no point to encrypt. DAK key is sent over this path RSS-BL31-RMM. If BL31 is compromised then it can read all memory (???).\n\nI agree that RMM needs to trust BL31. My comment was not about protecting RMM from BL31.\n\nInstead, I am concerned about *other* malicious entities being able to steal the private part of the DAK while BL31 sends it to RMM. AFAIU this would allow them to could forge valid attestation tokens, which presumably we want to prevent.\n\nMy thinking was, if we encrypt the DAK with a key known only by the RMM then even if the encrypted DAK gets intercepted then one wouldn\u0027t be able to use it as is.\n\nBut even encrypting it might not be needed. If we properly mark BL31/RMM shared buffer as realm PAS, only software running in realm world will be able to read this memory. Moreover, I believe that the DAK is retrieved once by RMM when it boots up and never again after that. If this is correct (?), then no other software is running in realm world at this time and so there is no risk of it being stealed.\n\nDoes this make sense? I mostly wanted to check my understanding with you and make sure the flow I have in mind is correct and that we can rely on the assumptions above.\n\n\u003e Could you point out the TF-A threat model. I will check and add DAK if necessary.\n\nSure, it is inside TF-A source tree: docs/threat_model/threat_model.rst\n\nhttps://trustedfirmware-a.readthedocs.io/en/latest/threat_model/threat_model.html",
      "parentUuid": "817475f0_258c4709",
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39652b5f_e88aa7c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-09-19T10:50:15Z",
      "side": 1,
      "message": "\u003eBut even encrypting it might not be needed. If we properly mark BL31/RMM shared \u003ebuffer as realm PAS, only software running in realm world will be able to read \u003ethis memory. Moreover, I believe that the DAK is retrieved once by RMM when it \u003eboots up and never again after that. If this is correct (?), then no other \u003esoftware is running in realm world at this time and so there is no risk of it \u003ebeing stealed.\n\nYour understanding is correct:\n- DAK (and platform attestation token) is retrieved only once at the boot stage.\n- BL31/RMM shared buffers are only accessible by them. https://review.trustedfirmware.org/q/topic:%22jas%252Frmm-el3-ifc%22+(status:open%20OR%20status:merged)",
      "parentUuid": "5944913e_af7fc66f",
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db96523d_c2224fa5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-19T11:37:07Z",
      "side": 1,
      "message": "Many thanks, Tamas, I have no more questions.",
      "parentUuid": "39652b5f_e88aa7c6",
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0967d2b_7dea201e",
        "filename": "include/lib/psa/delegated_attestation.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-06T11:56:57Z",
      "side": 1,
      "message": "Please remove this, as we do not worry about C++ callers in TF-A project.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 6
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51e990c0_35fa86a5",
        "filename": "include/lib/psa/delegated_attestation.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-09-07T10:01:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0967d2b_7dea201e",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 6
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "944be54a_5436899f",
        "filename": "include/lib/psa/psa_manifest/sid.h",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-06T11:56:57Z",
      "side": 1,
      "message": "typo: DELEGATED?",
      "range": {
        "startLine": 18,
        "startChar": 12,
        "endLine": 18,
        "endChar": 21
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e6ebe47_bdde9905",
        "filename": "include/lib/psa/psa_manifest/sid.h",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-09-07T10:01:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "944be54a_5436899f",
      "range": {
        "startLine": 18,
        "startChar": 12,
        "endLine": 18,
        "endChar": 21
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a065225_7666bbd9",
        "filename": "lib/psa/delegated_attestation.c",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-06T11:56:57Z",
      "side": 1,
      "message": "This should be\n\n if (key_size \u003d\u003d NULL)\n\nfor MISRA compliance.",
      "range": {
        "startLine": 31,
        "startChar": 1,
        "endLine": 31,
        "endChar": 15
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d313534_22438be4",
        "filename": "lib/psa/delegated_attestation.c",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-09-07T10:01:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a065225_7666bbd9",
      "range": {
        "startLine": 31,
        "startChar": 1,
        "endLine": 31,
        "endChar": 15
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d51dcf6_8bc494ac",
        "filename": "lib/psa/delegated_attestation.c",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-06T11:56:57Z",
      "side": 1,
      "message": "(minor) The indentation looks here, probably because it\u0027s not using tabs on this line.",
      "range": {
        "startLine": 49,
        "startChar": 17,
        "endLine": 49,
        "endChar": 24
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "463a90ce_985fcec9",
        "filename": "lib/psa/delegated_attestation.c",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-09-07T10:01:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d51dcf6_8bc494ac",
      "range": {
        "startLine": 49,
        "startChar": 17,
        "endLine": 49,
        "endChar": 24
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "846cd88b_ab42ba4a",
        "filename": "lib/psa/delegated_attestation.c",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-06T11:56:57Z",
      "side": 1,
      "message": "This should be:\n\n if (token_size \u003d\u003d NULL)\n\nfor MISRA compliance.",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 17
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57d61863_2615d22a",
        "filename": "lib/psa/delegated_attestation.c",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-09-07T10:01:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "846cd88b_ab42ba4a",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 17
      },
      "revId": "a2c23dfbd7de8782f0de2cae5dba08650df0b295",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}