{
  "comments": [
    {
      "key": {
        "uuid": "4e6f812c_e58f1ac8",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-02-18T19:24:36Z",
      "side": 1,
      "message": "question. I understand the DSB before exiting EL3, that ensures that any async EA\u0027s caused by instructions in EL3 get handled before the ERET. What is the purpose of the DSB on EL3 entry ? To handle async EA\u0027s from lower EL\u0027s immediately?(assuming scr_el3.EA is set of course, otherwise they should be handled at the appropriate EL).",
      "range": {
        "startLine": 85,
        "startChar": 6,
        "endLine": 85,
        "endChar": 7
      },
      "revId": "97d03b48dc8e8c81e59e2daf5a1caab2c7671e06",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "202324be_5f012559",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-02-18T20:40:52Z",
      "side": 1,
      "message": "Yes. To handle async EA\u0027s from lower EL\u0027s immediately. A similar discussion can be found here:\nhttps://lore.kernel.org/patchwork/patch/846451/",
      "parentUuid": "4e6f812c_e58f1ac8",
      "range": {
        "startLine": 85,
        "startChar": 6,
        "endLine": 85,
        "endChar": 7
      },
      "revId": "97d03b48dc8e8c81e59e2daf5a1caab2c7671e06",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f6a77ca_4e73cb8d",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-02-18T20:56:30Z",
      "side": 1,
      "message": "Thanks. Another general/philosophical question, not intended to block the patch. If there is an instruction that causes an async external abort from lower EL(perhaps from speculative accesses), and scr_el3.EA is set, on entry into EL3, perhaps due to an SMC and executing the DSB here, the SError can trigger immediately and will appear on serror_sp_elx(since we havent yet changed to sp_el0), and serror_sp_elx calls the platform handler, which per the documentation is not supposed to return. Is this behavior we want ? This seems like it would violate 4.5.4. Handling recoverable errors of the coding guidelines document. If the plat handler is not expected to return and must be written in assembly, it would be relatively easy for the kernel running at NS-EL1/EL2 to trigger crashes in secure world easily.",
      "parentUuid": "202324be_5f012559",
      "range": {
        "startLine": 85,
        "startChar": 6,
        "endLine": 85,
        "endChar": 7
      },
      "revId": "97d03b48dc8e8c81e59e2daf5a1caab2c7671e06",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c6edda0_15c09022",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 2
      },
      "lineNbr": 537,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-02-18T19:14:34Z",
      "side": 1,
      "message": "I think this is concerning part of this patch as it adds latency to all exception returns. IIUC, we need this only when returning from a RAS exception? If yes, then is there a way to do this conditionally?",
      "range": {
        "startLine": 537,
        "startChar": 1,
        "endLine": 537,
        "endChar": 7
      },
      "revId": "97d03b48dc8e8c81e59e2daf5a1caab2c7671e06",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}