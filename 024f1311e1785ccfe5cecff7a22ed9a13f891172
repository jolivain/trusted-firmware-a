{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "74c3db97_3f6dccd5",
        "filename": "include/lib/extensions/amu.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-03-22T12:58:42Z",
      "side": 1,
      "message": "This is likely to cause multiple definition errors; this conditional function definition should be in a C file.",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 33,
        "endChar": 6
      },
      "revId": "024f1311e1785ccfe5cecff7a22ed9a13f891172",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78d96533_9e8a1cdf",
        "filename": "include/lib/extensions/amu.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-22T13:12:58Z",
      "side": 1,
      "message": "No, we deliberately want that in a header, it\u0027s a pattern the Linux kernel uses extensively, and we also use that already.\nBut it should indeed be \"static inline\", to avoid this double definition issue with -O0.",
      "parentUuid": "74c3db97_3f6dccd5",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 33,
        "endChar": 6
      },
      "revId": "024f1311e1785ccfe5cecff7a22ed9a13f891172",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79e37bc6_2a34e64d",
        "filename": "include/lib/extensions/amu.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-03-22T13:33:07Z",
      "side": 1,
      "message": "What is the benefit of doing this in the header file as opposed to cutting out the implementation? The only thing I can think of is to a avoid a function call, but it complicates the header quite a lot.\n\nIn fact I\u0027m not quite sure why we need to stub this out at all; we shouldn\u0027t be including this header at all if FEAT_AMU hasn\u0027t been enabled.",
      "parentUuid": "78d96533_9e8a1cdf",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 33,
        "endChar": 6
      },
      "revId": "024f1311e1785ccfe5cecff7a22ed9a13f891172",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86bdcd75_b6eacaf4",
        "filename": "include/lib/extensions/amu.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-22T13:53:26Z",
      "side": 1,
      "message": "Having this in the header allows the compiler to better optimise this away, and \"static inline\" definitely helps with that.\nOriginally we left the header alone, and relied on the compiler to optimise the call away completely. However this only works with -O1 or higher, and for some reason we want to support -O0 as well.\n\nOn a higher level: we want to get rid of all those #ifdef\u0027s in the code: they hide code from the compiler (no type checking), and decrease readability. Especially nested #ifdef\u0027s can be a nightmare.\nSo the pattern is to convert:\n#if ENABLE_FEAT_AMU\n    amu_enable();\n#endif\nto:\n    if (is_feat_amu_supported()) {\n        amu_enable();\n    }\nWith the right definition of is_feat_amu_supported(), and -O1 or -Os, this has the very same effect: if ENABLE_FEAT_AMU is 0, the code will be removed, with ENABLE_FEAT_AMU being 1 the call to the check function will be removed.\nWe gain the ability of setting ENABLE_FEAT_AMU to 2, and doing a runtime check.\nThis is all hidden is is_feat_amu_supported(), but in a readable way and not using CPP.",
      "parentUuid": "79e37bc6_2a34e64d",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 33,
        "endChar": 6
      },
      "revId": "024f1311e1785ccfe5cecff7a22ed9a13f891172",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb411b40_3ed78ab5",
        "filename": "include/lib/extensions/amu.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-22T14:04:47Z",
      "side": 1,
      "message": "To answer on this \"complicates the header\" argument: Yes, it makes the header more ugly, and that\u0027s mostly the price we pay for supporting -O0.\nBesides, since the header is very easy to begin with, it is still readable, and once you are familiar with that pattern, it is easy to understand and read over.\nIn the Linux kernel there is the understanding that having nasty CPP constructs confined to header files is a much better approach than cluttering actual code with #ifdef\u0027s.\n\nI am actually wondering why we have separate headers for each feature, given their almost trivial content. We could as well unify them in one extension.h header.",
      "parentUuid": "86bdcd75_b6eacaf4",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 33,
        "endChar": 6
      },
      "revId": "024f1311e1785ccfe5cecff7a22ed9a13f891172",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acab479e_6b25044b",
        "filename": "include/lib/extensions/amu.h",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-03-22T14:56:05Z",
      "side": 1,
      "message": "We don\u0027t support -O0 (or at least don\u0027t use it by default) - even debug builds use -Os. I\u0027ll let this through on the basis of it being an existing pattern, but I think we ought to pushing IPO harder rather to deal with this than trying to DIY optimisations via the preprocessor.",
      "parentUuid": "eb411b40_3ed78ab5",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 33,
        "endChar": 6
      },
      "revId": "024f1311e1785ccfe5cecff7a22ed9a13f891172",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}