{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "16e40c03_cdffd0fd",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-01T16:00:21Z",
      "side": 1,
      "message": "does this have to happen at reset? Couldn\u0027t it be delayed until some time in context management?",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e728250_3594c4e0",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-03-01T17:37:41Z",
      "side": 1,
      "message": "This change is done where the cptr_el3 is initialized for the root world. The generic context management code in the later stages modifies and saves cptr_el3 value in the cpu_context and later programs its to cptr_el3 register upon exit from el3.",
      "parentUuid": "16e40c03_cdffd0fd",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9591dd_9df4d170",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-02T18:10:08Z",
      "side": 1,
      "message": "Sure, but there is no root context yet. On the first el3_exit this register will be overwritten by whatever the outgoing context says and the value above will never be written back. If this bit is necessary for ctx_save/restore, then the short-term solution would be that it should be set somewhere closer to them and el3_exit can overwrite it later. This will also help with refactoring the code for the long-term solution - the root context.",
      "parentUuid": "3e728250_3594c4e0",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f43ec403_711b4efd",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-03-03T15:14:07Z",
      "side": 1,
      "message": "This value to cptr_el3 is required before the first el3_exit happens as part of restoring el2 sysregs context.\n\u003e the value above will never be written back.\nThis value will be retained as enabling SVE_FOR_NS and CTX_INCLUDE_EL2_REGS, will set this bit as part of sve_enable extension call. Setting this bit closer to el2_ctx_save/restore is not clean and will force to add an isb. I agree that this can be later refactored when adding support for root cpu_ctx.",
      "parentUuid": "3e9591dd_9df4d170",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c75806cc_28942bdb",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-03T17:48:53Z",
      "side": 1,
      "message": "\u003e enabling SVE_FOR_NS and CTX_INCLUDE_EL2_REGS, will set this bit as part of sve_enable extension call\n\nApologies, I hadn\u0027t seen this. Regardless, something similar is done in lib/el3_runtime/aarch64/context.S:1179. Also, wouldn\u0027t this blow up in secure world with ENABLE_SVE_FOR_SWD not set? Then sve would explicitly be disabled in secure world, and by extension EL3, since it won\u0027t be changed on the return path, then it won\u0027t have access.",
      "parentUuid": "f43ec403_711b4efd",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "177b90f7_fcc61778",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-03-06T15:20:47Z",
      "side": 1,
      "message": "\u003e secure world with ENABLE_SVE_FOR_SWD not set\nI see your concern, the current design is that, if SVE is enabled for NS world then secure world must enable SVE, even if wants to only use floating point. So any SEL1 TOS (SPD\u003d\u003clegacy dispatcher\u003e) or SEL2 SPM (SPD\u003dspmd) must set ENABLE_SVE_FOR_SWD\u003d1 if it wants to use SVE in NS world and use FP or SVE in secure world.\n\nWithout S-EL2 or R-EL2, the NS world can enable SVE and disable it for Secure world, in that case setting is bit in cptr_el3 will be skipped as it is used only when saving/restoring el2 context register.",
      "parentUuid": "c75806cc_28942bdb",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93cf446d_6e6448cd",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-06T19:11:57Z",
      "side": 1,
      "message": "I understand that but I\u0027m talking about a different scenario: the cpu supports SVE, SVE is enabled for NS (ENABLE_SVE_FOR_NS\u003d1), SVE is not enabled for secure world (ENABLE_SVE_FOR_SWD\u003d0), SEL2 is populated (SPD\u003dspmd) and does not want to use SVE or floating point. I don\u0027t see why this wouldn\u0027t be plausible and the TF-A makefile allows this.\n\nIn that scenario, as you mention cptr_el3.ez will not be set. However, as soon as NS makes a secure call, the zcr register will be attempted to be saved (by cm_el2_sysregs_context_save) as this save has no reference to the _SWD flag. This should produce an exception as the ez bit isn\u0027t set.\n\nI\u0027m struggling to run a test config to demonstrate what I mean but I can try to make one if I still can\u0027t explain it.",
      "parentUuid": "177b90f7_fcc61778",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53b6570d_8eda5f21",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-03-07T16:31:01Z",
      "side": 1,
      "message": "For CPU that supports SVE and with S-EL2 enabled, the SPM always saves/restores SVE context upon entry/exit. This is to allow Secure partitions to use FP or SVE. The config option to disable SVE for SWD is kept for legacy dispatchers.\nFor the scenario you mentioned, if there is any test config in CI, let me know so I can take a look.",
      "parentUuid": "93cf446d_6e6448cd",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56d0997c_5e4f2fc1",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-07T17:25:44Z",
      "side": 1,
      "message": "No, there is no specific CI config, and as you say this won\u0027t happen with the spmd. I suppose this is unlikely to cause any problems in practice.\n\nThough, I still think this is not a good solution to do this and would rather have it later/closer to where it is needed.",
      "parentUuid": "53b6570d_8eda5f21",
      "revId": "663f45265ada3d660a0d6428f1abd9cd13eb8a59",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}