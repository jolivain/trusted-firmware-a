{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2bdbc1a1_e7312f03",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1098,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-02-08T16:20:09Z",
      "side": 1,
      "message": "Explicitly check if not 0?",
      "range": {
        "startLine": 1098,
        "startChar": 6,
        "endLine": 1098,
        "endChar": 25
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f14865fa_07ec248d",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1098,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-08T17:21:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2bdbc1a1_e7312f03",
      "range": {
        "startLine": 1098,
        "startChar": 6,
        "endLine": 1098,
        "endChar": 25
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69b09e97_e2550a1b",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-02-08T16:20:09Z",
      "side": 1,
      "message": "For the existing implementation we cannot mandate the order of the partition IDs therefore we will still need this check otherwise we would introduce a breaking change.\n\nAdding a recommendation for ordering is something we could look into to in future revisions, however do you know if this is causing a performance impact on real systems? We would not expect the number of borrowers participating in a memory transaction to be very large to cause significant overhead.",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69914739_0e33b7f4",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-08T17:21:51Z",
      "side": 1,
      "message": "\u003e do you know if this is causing a performance impact on real systems?\n\nI have no idea, as I do not have any real systems (or even emulated ones) to test on.\n\n\u003e We would not expect the number of borrowers participating in a memory transaction to be very large to cause significant overhead.\n\nIs this enforced anywhere?  Otherwise, the O(n²) loop would allow denial-of-service attacks.",
      "parentUuid": "69b09e97_e2550a1b",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eb7d775_7bc4539b",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-02-10T16:54:10Z",
      "side": 1,
      "message": "\u003e Is this enforced anywhere?  Otherwise, the O(n²) loop would allow denial-of-service attacks.\n\nThat\u0027s a fair point, no this isn\u0027t currently enforced as there is no hard limit to the number of borrowers other than the number of partitions in the system. Practially I think the current limit would be number of emad descriptors that would fit inside the memory descriptor.",
      "parentUuid": "69914739_0e33b7f4",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25ca1bd1_b4e97ecc",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-13T20:34:45Z",
      "side": 1,
      "message": "Should there be an explicit check for the number of partitions?  In any case that is outside the scope of this patch.",
      "parentUuid": "9eb7d775_7bc4539b",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c69709_20a9e66a",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-02-21T10:29:23Z",
      "side": 1,
      "message": "Good question, so from a spec perspective there is not an upper bound as, although we only support a single SP in this implemenation, it is IMPDEF how many VMs in the normal world could be involved in any given transaction.\n\nIf you think this is a sticking point we could look to introduce an IMPDEF transaction partition limit for the SPMC to reject any transactions that exceed this?",
      "parentUuid": "25ca1bd1_b4e97ecc",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "239deecc_326fcb7e",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-03-07T02:40:47Z",
      "side": 1,
      "message": "Perhaps have two limits, one if the objects are in sorted order and one if they are not?",
      "parentUuid": "17c69709_20a9e66a",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8adc9a1_07148cdc",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-03-10T22:44:38Z",
      "side": 1,
      "message": "I would not expect any implementations to provide the IDs in order unless mandated. Therefore I expect a limit corresponding to that scenario would not be used and could cause extra confusion. If we went with this direction I think a platform configurable value could be the simpler option. This could be adjusted accordingly depending on the expected environment and threat model.",
      "parentUuid": "239deecc_326fcb7e",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94329aa4_4d1d8cd9",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-03-12T04:36:49Z",
      "side": 1,
      "message": "What about just having firmware sort the IDs itself?",
      "parentUuid": "b8adc9a1_07148cdc",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b96e9b05_6b353004",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 2
      },
      "lineNbr": 1108,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-03-24T21:31:00Z",
      "side": 1,
      "message": "Apologies for the delay in replying. Checking through the spec I think should be compliant.\n\nJust to check I understand the proposal, we allow the order of partition IDs to be specified in an IMPDEF order for both the initial share/lend and for the retrieval of the memory region as things currently stand. However after validation we sort the IDs internally so when it comes to searching for valid IDs we are comparing against a sorted list. This will help reduce the computation required while maintaining compatibility with existing implementations?",
      "parentUuid": "94329aa4_4d1d8cd9",
      "range": {
        "startLine": 1107,
        "startChar": 45,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "abc5819f11ed30c92054045eb5c0d95544176e24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}