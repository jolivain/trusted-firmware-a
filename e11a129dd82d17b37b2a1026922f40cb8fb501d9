{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "55d7c3d8_40d0473d",
        "filename": "lib/libc/aarch32/memcpy_align8.S",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2022-02-03T14:03:33Z",
      "side": 1,
      "message": "-2022",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9c1eec1_842621aa",
        "filename": "lib/libc/aarch32/memcpy_align8.S",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2022-02-03T14:03:33Z",
      "side": 1,
      "message": "r3 is not needed to be saved/restored:\n\"The first four registers r0-r3 (a1-a4) are used to pass argument values into a subroutine and to return a\nresult value from a function. They may also be used to hold intermediate values within a routine (but,\nin general, only between subroutine calls)....\nA subroutine must preserve the contents of the registers r4-r8, r10, r11 and SP (and r9 in PCS variants\nthat designate r9 as v6).\"",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ad29931_a7884350",
        "filename": "lib/libc/aarch32/memcpy_align8.S",
        "patchSetId": 14
      },
      "lineNbr": 24,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2022-02-03T14:40:11Z",
      "side": 1,
      "message": "/* Skip m_loop8 if len \u003c 8 */\n\tcmp\tr2, #8\n\tblo\tm_loop1\n\n\tpush\t{r4, r5}\n\tlsr\tr5, r2, #3\n\n/* copy 8 bytes at a time */\nm_loop8:\n\tldrd\tr3, r4, [r1], #8\n\tstrd\tr3, r4, [r0], #8\n\tsubs\tr5, r5, #1\n\tbne\tm_loop8\n\tpop\t{r4, r5}\n\n\tands\tr2, r2, #7\n\tbxeq\tlr\n\n/* copy byte per byte */\nm_loop1:\n\tldrb\tr3, [r1], #1\n\tstrb\tr3, [r0], #1\n\tsubs\tr2, r2, #1\n\tbne\tm_loop1\n\tbx\tlr",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab9b19f0_380198b5",
        "filename": "lib/libc/aarch32/memcpy_align8.S",
        "patchSetId": 14
      },
      "lineNbr": 24,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2022-02-03T15:13:04Z",
      "side": 1,
      "message": "or better use:\n\t/* Skip m_loop8 if len \u003c 8 */\n\tlsrs\tr3, r2, #3\n\tbeq\tm_loop1\n\n\tpush\t{r4, r5}\n\n/* copy 8 bytes at a time */\nm_loop8:\n\tldrd\tr4, r5, [r1], #8\n\tstrd\tr4, r5, [r0], #8\n\tsubs\tr3, r3, #1\n\tbne\tm_loop8\n\tpop\t{r4, r5}\n\n\tands\tr2, r2, #7\n\tbxeq\tlr\n\n/* copy byte per byte */\nm_loop1:\n\tldrb\tr3, [r1], #1\n\tstrb\tr3, [r0], #1\n\tsubs\tr2, r2, #1\n\tbne\tm_loop1\n\tbx\tlr",
      "parentUuid": "8ad29931_a7884350",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90dfe774_daa4017e",
        "filename": "lib/libc/aarch64/memcpy_align8.S",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2022-02-03T14:03:33Z",
      "side": 1,
      "message": "-2022",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d714112_d060908e",
        "filename": "lib/libc/memcpy.c",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-02-04T13:24:39Z",
      "side": 1,
      "message": "Is it possible to use aligned logic if src/dst are unaligned by copying byte wise until they are aligned?",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 29
      },
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e43c062_6a54a000",
        "filename": "lib/libc/memcpy_asm.c",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-02-01T16:05:30Z",
      "side": 1,
      "message": "2022",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "104f3947_fb8e5e86",
        "filename": "lib/libc/memcpy_asm.c",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-02-01T16:05:30Z",
      "side": 1,
      "message": "} else {",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd577b77_217cdd08",
        "filename": "lib/libc/memcpy_simple.c",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-02-04T13:24:39Z",
      "side": 1,
      "message": "What is purpose of creating this file?",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b79842ec_cd183498",
        "filename": "lib/libc/memcpy_simple.c",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-02-01T16:05:30Z",
      "side": 1,
      "message": "2022 Arm",
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5a9f7e3_c2c7b2cc",
        "filename": "lib/libc/memcpy_simple.c",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2022-02-03T14:03:33Z",
      "side": 1,
      "message": "while (len--) {\n    *d++ \u003d *s++;\n}",
      "range": {
        "startLine": 15,
        "startChar": 1,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "e11a129dd82d17b37b2a1026922f40cb8fb501d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}