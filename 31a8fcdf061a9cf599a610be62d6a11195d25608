{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "818f0438_39888d53",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 61,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "can we use smaller types to reduce memory footprint ?",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 12
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae88e3a7_98da025a",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 65,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "Need a comment that the entries need to be sorted in descending order of contiguous sizes.",
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a17e78c_7d5f3d9c",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 102,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "Need to see the size reduction achieved if the lib can statically assume 4K page size.",
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00f012bf_f45da153",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 176,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "we could increment this pointer and then avoid having to keep the idx counter thus saving memory.",
      "range": {
        "startLine": 176,
        "startChar": 27,
        "endLine": 176,
        "endChar": 28
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2e0e4a4_a1caa9e6",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 177,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "not needed if we do validation of L0 size within the L0 function init.",
      "range": {
        "startLine": 177,
        "startChar": 14,
        "endLine": 177,
        "endChar": 29
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dae5e9b_8e3b671d",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "\"Bit lock base for each 512 MB block of PPS\"",
      "range": {
        "startLine": 180,
        "startChar": 33,
        "endLine": 180,
        "endChar": 51
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "111c20dc_b636aa41",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "nit: perhaps bitlock_base ?",
      "range": {
        "startLine": 180,
        "startChar": 18,
        "endLine": 180,
        "endChar": 27
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37d95b8f_5e62e018",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 209,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "memset ?\n\nI know the TF-A memset() implementation is not performant. But in future, I expect memset may use FEAT_MOPS extension and in that case, we would get the performance boot automatically.",
      "range": {
        "startLine": 207,
        "startChar": 1,
        "endLine": 209,
        "endChar": 2
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a5c1b9f_d83858cb",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 383,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:14:44Z",
      "side": 1,
      "message": "Some of the below validation seemingly are a bit over-engineered IMO. We rely on the platform to the right thing and these checks are basic sanity checks.\n\nWe just need to ensure that there is no overlap in the incoming PAS regions. This can be easily done by sorting the PAS_REGION array and ensuring that each region starts after the previous region has started. \n\nAlso, if adjacent regions are having the same PAS attr, then they can be combined.\n\nAll of the pas_region validation can be restricted to Debug builds.\n\nThis will bring down the size of the lib hopefully.",
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c87260a1_17f810ff",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 1227,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:19:30Z",
      "side": 1,
      "message": "needs to be done in gpt_init_l0_tables()",
      "range": {
        "startLine": 1206,
        "startChar": 0,
        "endLine": 1227,
        "endChar": 2
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64541abc_d10deeef",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 24
      },
      "lineNbr": 1330,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T11:19:30Z",
      "side": 1,
      "message": "This print needs to be part of gpt_init_l0_tables",
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e3b5a7_e00f6820",
        "filename": "lib/gpt_rme/gpt_rme.mk",
        "patchSetId": 24
      },
      "lineNbr": 8,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T10:42:42Z",
      "side": 1,
      "message": "The option is getting passed twice for every compiler invocation. \n\n\n\"\u0027/work/tools/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin/aarch64-none-elf-gcc\u0027  -g -gdwarf-4  ... -DRME_GPT_MAX_BLOCK\u003d2 -DRME_GPT_MAX_BLOCK\u003d2  .. -o /work/github/trusted-firmware-a/trusted-firmware-a/build/fvp/debug/libc/memchr.o \"\n\nCould be a problem with TF-A make system, but would be good to resolve this.",
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8823a4f_bfd59f58",
        "filename": "lib/gpt_rme/gpt_rme.mk",
        "patchSetId": 24
      },
      "lineNbr": 8,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-04-19T11:42:51Z",
      "side": 1,
      "message": "Yes, it is passed for BL2 \u0026 BL31. Can we put it in main Makefile?",
      "parentUuid": "69e3b5a7_e00f6820",
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd5758a9_84ff8071",
        "filename": "lib/gpt_rme/gpt_rme_private.h",
        "patchSetId": 24
      },
      "lineNbr": 313,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T10:42:42Z",
      "side": 1,
      "message": "There are generic helpers __align in TF_A , would be good to reuse them or define this as a generic macro in utils_def.h. When generic, it needs to take the size as parameter.",
      "range": {
        "startLine": 313,
        "startChar": 8,
        "endLine": 313,
        "endChar": 17
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3935c5aa_1798691e",
        "filename": "lib/gpt_rme/gpt_rme_private.h",
        "patchSetId": 24
      },
      "lineNbr": 313,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-04-19T11:42:51Z",
      "side": 1,
      "message": "This definition in \\include\\lib\\utils_def.h\n\n#define round_boundary(value, boundary)\t\t\\\n\t((__typeof__(value))((boundary) - 1))\n\nis not MISRA C complian because SZ_2M is UL for aarch64.",
      "parentUuid": "bd5758a9_84ff8071",
      "range": {
        "startLine": 313,
        "startChar": 8,
        "endLine": 313,
        "endChar": 17
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fe3f132_6f9b90a7",
        "filename": "plat/arm/board/fvp/platform.mk",
        "patchSetId": 24
      },
      "lineNbr": 31,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-19T09:35:16Z",
      "side": 1,
      "message": "This would be a breaking change for all CIs which do not specify this option. We cannot merge this without notifying affected stakeholders. \n\nNeed to understand more details as in :\n\n1. Which BL image has increased in size and by how much ? \n2. Is there further optimization that need to be done to reduce the code size ?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 4
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85f9ff22_48ce2842",
        "filename": "plat/arm/board/fvp/platform.mk",
        "patchSetId": 24
      },
      "lineNbr": 31,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-04-19T11:42:51Z",
      "side": 1,
      "message": "\"all CIs which do not specify this option\":\nIf ENABLE_RME \u003d\u003d 0, then these platforms aren\u0027t effected and will use original 256KB value. I can revert this change to see if CI fails.",
      "parentUuid": "4fe3f132_6f9b90a7",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 4
      },
      "revId": "31a8fcdf061a9cf599a610be62d6a11195d25608",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}