{
  "comments": [
    {
      "key": {
        "uuid": "0b10c1d6_5a55a8b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-30T14:03:27Z",
      "side": 1,
      "message": "Usually there is a tradeoff for reclaiming init code. There is a fine balance wherein the reclaimed code from RO code memory just fits into RW memory without causing additional page allocation.\n\nThe removal of code from RO memory will not necessary save a page in RO section because the alignement requirements still mean the page is still needed. Only an analysis with impact to different sections will confirm whether this is beneficial or not.",
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6ec97d9_789b1103",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-30T14:34:35Z",
      "side": 1,
      "message": "ie. what I mean to say is RECLAIM_INIT_MEMORY will increase the memory usage the cases as mentioned in commit message. That was the reason to control the size of reclamation using filters and avoid the extra page for stack.",
      "parentUuid": "0b10c1d6_5a55a8b8",
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e4eb3e9_6aa7b502",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-07-30T16:59:49Z",
      "side": 1,
      "message": "The original code was raising \nASSERT(__INIT_CODE_END__ \u003c\u003d __STACKS_END__,\n        \"Init code ends past the end of the stacks\") .\nfor a number of FVP configurations, see\nhttps://jira.arm.com/browse/GENFW-3712\nfor more details.\n\"The patch removes exclusion of PSCI initialization\nfunctions from the reclaimed .init section in\n\u0027arm_reclaim_init.ld.S\u0027 script, which increases the\nsize of reclaimed memory region.\", so now all reclaimed init section is realocated to the secondary stacks with no extra page. BSS which follows .init section must be page aligned anyway.\nAlso see https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/5000 patch which fixes the issue with BL31 binary size being always 4K aligned.",
      "parentUuid": "f6ec97d9_789b1103",
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6579548a_64b35e86",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-30T21:03:09Z",
      "side": 1,
      "message": "Ok, thats a good to know. If the sizes have been verified to have been reduced, that will be good to document as well in the commit message.",
      "parentUuid": "7e4eb3e9_6aa7b502",
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d812899_8d8bb3f4",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-06-01T12:35:38Z",
      "side": 1,
      "message": "I don\u0027t think it would be good to assume that CPU 0 is always the primary one. Wouldn\u0027t it be safer to use plat_is_my_cpu_primary() here, rather than plat_my_core_pos() and assume that the primary CPU might have any index?",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c0b8906_452a6956",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-01T12:41:59Z",
      "side": 1,
      "message": "I was also thinking of that before making this change, but the existing BL31 implementation assumes that primary CPU is always CPU #0, otherwise its stack will share the .init section memory and execution will crash/panic. All TF-A platforms have their primary CPUs set tp 0.",
      "parentUuid": "3d812899_8d8bb3f4",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "580e2963_f407b594",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-06-01T14:08:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3c0b8906_452a6956",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6618537_82c54cc6",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-30T14:03:27Z",
      "side": 1,
      "message": "This is not necessary although ARM ref platforms do have core ID 0. Making this assumption in common stack file can be dangerous.",
      "parentUuid": "580e2963_f407b594",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd63c141_e6c85991",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-07-30T14:20:03Z",
      "side": 1,
      "message": "Please explain which assumption is dangerous.\nAs I mentioned already \"existing BL31 implementation assumes that primary CPU is always CPU #0, otherwise its stack will share the .init section memory and execution will crash/panic. All TF-A platforms have their primary CPUs set tp 0.\"",
      "parentUuid": "c6618537_82c54cc6",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f98a42f_1eaa10c1",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-30T14:34:35Z",
      "side": 1,
      "message": "Hi Alexei,\nOnly ARM platform set the RECLAIM_INIT feature. As I already mentioned ARM platforms have primary CPU ID as 0 `by default`. Now TF-A does not mandate this and hence the reason for plat_is_my_cpu_primary() function.\n\nAlthough the default is 0, on Juno for example we can change the primary boot CPU to core 4 as I remember. Similarly the boot CPU on FVP can be changed by setting the pctl.startup option to another core. This is also meant to work properly with TF-A. \n\nNow this change is in a common file affecting all platforms and hence they are being forced to confirm to set primary code ID as zero. Hence assuming CPU ID here is wrong IMO.",
      "parentUuid": "dd63c141_e6c85991",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ef458d7_64f5ae19",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-07-30T17:18:55Z",
      "side": 1,
      "message": "This is how SP was allocated for each CPU before this patch:\n\nget_my_mp_stack platform_normal_stacks, PLATFORM_STACK_SIZE\n\nand\n\t.macro get_my_mp_stack _name, _size\n\tbl\tplat_my_core_pos\n\tadrp\tx2, (\\_name + \\_size)\n\tadd\tx2, x2, :lo12:(\\_name + \\_size)\n\tmov x1, #\\_size\n\tmadd x0, x0, x1, x2\n\t.endm\n\nwhich calculates SP position based on CPU ID.\n\nWith platform_normal_stacks \u003d __STACKS_START__, SP for primary CPU is always allocated prior to .init section (trusted-firmware-a\\include\\plat\\arm\\common\\arm_reclaim_init.ld.S):\nSECTIONS\n{\n        .init __STACKS_START__ : {\n            . \u003d . + PLATFORM_STACK_SIZE;\n            . \u003d ALIGN(PAGE_SIZE);\n            __INIT_CODE_START__ \u003d .;\n\t    *(*text.init*);\n            __INIT_CODE_UNALIGNED__ \u003d .;\n            .  \u003d ALIGN(PAGE_SIZE);\n            __INIT_CODE_END__ \u003d .;\n        } \u003eRAM\n\nSo, for any \"primary\" CPU with its ID !\u003d0 , it will be allocated in the .init section which will cause the crash.\n\nThe code which assumes primary CPU being always 0 is inside\n#if (defined(IMAGE_BL31) \u0026\u0026 RECLAIM_INIT_CODE)\n#endif\nand doesn\u0027t effect other platforms which don\u0027t use RECLAIM_INIT_CODE.",
      "parentUuid": "7f98a42f_1eaa10c1",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbed2e33_b72325a3",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-30T21:03:09Z",
      "side": 1,
      "message": "yes, thats why I said that by default ARM platforms have primary core ID \u003d\u003d 0. If you see, the code that makes assumptions about reclaim section and Primary CPU ID \u003d\u003d 0 is ARM platform specific (plat\\arm\\common\\arm_reclaim_init.ld.S). This is the same reason why these linker sections are defined in that platform specific linker script instead of BL31.ld.S\n\nIt doesn\u0027t mean BL31 only supports platforms primary core ID \u003d\u003d0.\n\nOn FVP, we chose to reclaim INIT section for secondary stack and to do that we need a contiguous block of memory which is facilitated by primary Core ID \u003d\u003d0. Depending on platform, this can be reclaimed for other purposes or even unmapped from BL31 page tables for security.\n\nThese changes should be made ARM platform specific and this can be taken up as the next step.",
      "parentUuid": "5ef458d7_64f5ae19",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}