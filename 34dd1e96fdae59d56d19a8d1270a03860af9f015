{
  "comments": [
    {
      "key": {
        "uuid": "0b10c1d6_5a55a8b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-30T14:03:27Z",
      "side": 1,
      "message": "Usually there is a tradeoff for reclaiming init code. There is a fine balance wherein the reclaimed code from RO code memory just fits into RW memory without causing additional page allocation.\n\nThe removal of code from RO memory will not necessary save a page in RO section because the alignement requirements still mean the page is still needed. Only an analysis with impact to different sections will confirm whether this is beneficial or not.",
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d812899_8d8bb3f4",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-06-01T12:35:38Z",
      "side": 1,
      "message": "I don\u0027t think it would be good to assume that CPU 0 is always the primary one. Wouldn\u0027t it be safer to use plat_is_my_cpu_primary() here, rather than plat_my_core_pos() and assume that the primary CPU might have any index?",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c0b8906_452a6956",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-06-01T12:41:59Z",
      "side": 1,
      "message": "I was also thinking of that before making this change, but the existing BL31 implementation assumes that primary CPU is always CPU #0, otherwise its stack will share the .init section memory and execution will crash/panic. All TF-A platforms have their primary CPUs set tp 0.",
      "parentUuid": "3d812899_8d8bb3f4",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "580e2963_f407b594",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-06-01T14:08:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3c0b8906_452a6956",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6618537_82c54cc6",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-30T14:03:27Z",
      "side": 1,
      "message": "This is not necessary although ARM ref platforms do have core ID 0. Making this assumption in common stack file can be dangerous.",
      "parentUuid": "580e2963_f407b594",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd63c141_e6c85991",
        "filename": "plat/common/aarch64/platform_mp_stack.S",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-07-30T14:20:03Z",
      "side": 1,
      "message": "Please explain which assumption is dangerous.\nAs I mentioned already \"existing BL31 implementation assumes that primary CPU is always CPU #0, otherwise its stack will share the .init section memory and execution will crash/panic. All TF-A platforms have their primary CPUs set tp 0.\"",
      "parentUuid": "c6618537_82c54cc6",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "34dd1e96fdae59d56d19a8d1270a03860af9f015",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}