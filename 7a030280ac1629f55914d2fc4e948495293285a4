{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "873bc205_4c356e65",
        "filename": "docs/components/context-management-library.rst",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-07-19T13:00:25Z",
      "side": 1,
      "message": "I wonder if something like `FEAT_STATE_CHECK_ONCE` and `FEAT_STATE_CHECK_ALWAYS` is more appropriate for this pair of states? It\u0027s a bit more reflective of what this changes in the implementation, as the need to check on warm boot is *derived* from the fact that the feature is supported by only some of the cores, and it\u0027s not invalid to use this option even if the feature is supported by all cores... it\u0027s just slower.",
      "range": {
        "startLine": 123,
        "startChar": 4,
        "endLine": 123,
        "endChar": 25
      },
      "revId": "7a030280ac1629f55914d2fc4e948495293285a4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dc40a8c_0d7dc9e2",
        "filename": "docs/components/context-management-library.rst",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1000108
      },
      "writtenOn": "2024-07-19T13:20:10Z",
      "side": 1,
      "message": "Actually, `FEAT_STATE_ASYMMETRIC` is checked on all CPUs, it permits to enable a feature in asymmetric way (some enable a featuer and other CPUs do not).\n\nSeems to me, `FEAT_STATE_CHECK_ONCE` and `FEAT_STATE_CHECK_ALWAYS` are confused.",
      "parentUuid": "873bc205_4c356e65",
      "range": {
        "startLine": 123,
        "startChar": 4,
        "endLine": 123,
        "endChar": 25
      },
      "revId": "7a030280ac1629f55914d2fc4e948495293285a4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b2dc0e6_b3486e22",
        "filename": "docs/components/context-management-library.rst",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-07-19T15:25:57Z",
      "side": 1,
      "message": "Hi Leo, yes, I understand the context, but in this case I am using it as in \"check the feature state only during cold boot\" versus \"check the feature state on every boot\".",
      "parentUuid": "7dc40a8c_0d7dc9e2",
      "range": {
        "startLine": 123,
        "startChar": 4,
        "endLine": 123,
        "endChar": 25
      },
      "revId": "7a030280ac1629f55914d2fc4e948495293285a4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00ce6a40_364c1a50",
        "filename": "docs/components/context-management-library.rst",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-07-19T15:38:52Z",
      "side": 1,
      "message": "Just to clarify on context initialisation. It is done during cold boot for primary.\nIt is also done during warmboot of secondary by the core executing CPU_ON call(primary). Meaning even without this change we never rely on ONCE but we do it every warm boot.\n\nThe other somewhat related point is, majority of platforms(\u0026 features) are going to be symmetric, so did not want add even a single extra instruction for unaffected platforms.\n\nIf i misunderstood you @Chris let me know",
      "parentUuid": "0b2dc0e6_b3486e22",
      "range": {
        "startLine": 123,
        "startChar": 4,
        "endLine": 123,
        "endChar": 25
      },
      "revId": "7a030280ac1629f55914d2fc4e948495293285a4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}