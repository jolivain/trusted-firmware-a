{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "33adab8c_3e015207",
        "filename": "include/plat/arm/common/plat_arm.h",
        "patchSetId": 8
      },
      "lineNbr": 301,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-02-07T15:43:24Z",
      "side": 1,
      "message": "OK I get it. The functions declared from lines 281 to 294 are actually specific to the event log backend (they are needed to pass the event log address across firmware images), and we need different ones for the DPE backend (used to pass the context handle across firmware images)...\n\nAlso, I\u0027ve realized that, when using the RSS backend, we still define the event-log specific functions at lines 281-294, even though they are not needed. This does not do any harm but it does not sound right to me either.\n\nPerhaps we need to do some refactoring...\n\nOne option would be to rename the functions declared at lines 281-294 such that they refer to the event log. E.g. `arm_write_evlog_info_in_tos_fw_config()`, which is a really bad name but hopefully it conveys my point. We\u0027d namespace the DPE variants as well.\n\nAnother option would be to have a unified interface across measured boot backends, using an opaque data pointer, such as `int arm_set_nt_fw_info(void *data);`. Then each backend would know what the `data` argument corresponds to.\n* For the event log backend, this would be a pointer to a structure like that:\n\n```\nstruct evlog_info {\n#ifdef SPD_opteed\n  uintptr_t log_addr;\n#endif\n  size_t log_size;\n  uintptr_t ns_log_addr;\n}\n```\n\n* For the DPE backend, this would the `int *ctx_handle`.\n\nBut this is not great from a type safety point of view, as we\u0027d need to blindly cast.\n\nYet another option would be to move these functions out of `plat_arm.h` and put them into some header file specific to each measured boot backend. I guess that would work, as these are called by platform code, which already knows which measured boot backend it uses anyway.",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 301,
        "endChar": 40
      },
      "revId": "3b6fb60efb4c405ae0be17db80faaff880059178",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90d59029_6107d17a",
        "filename": "include/plat/arm/common/plat_arm.h",
        "patchSetId": 8
      },
      "lineNbr": 301,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-02-07T21:11:34Z",
      "side": 1,
      "message": "I believe these APIs also presume that MEASURED_BOOT and DPE are mutually exclusive. Is this confirmed across all Arm platforms?\n\nI have doubt about placing these function declarations in the header specific to measured boot backends. These APIs are not inherently backend-specific (involving measurement and extension, etc.), but rather pertain more to platform-specific functionalities.\n\nHow about renaming these function, but still denoting these are platform functions (we may think about moving them to common platform header also?)for example-\n\n```\narm_set_tb_fw_info() -\u003e arm_evlog_set_tb_fw_info();\narm_dpe_set_tb_fw_info();\n```\nor (considering common platform function)\n```\narm_set_tb_fw_info() -\u003e plat_evlog_set_tb_fw_info();\nplat_dpe_set_tb_fw_info();\n```",
      "parentUuid": "33adab8c_3e015207",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 301,
        "endChar": 40
      },
      "revId": "3b6fb60efb4c405ae0be17db80faaff880059178",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}