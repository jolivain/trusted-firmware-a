{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "33adab8c_3e015207",
        "filename": "include/plat/arm/common/plat_arm.h",
        "patchSetId": 8
      },
      "lineNbr": 301,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-02-07T15:43:24Z",
      "side": 1,
      "message": "OK I get it. The functions declared from lines 281 to 294 are actually specific to the event log backend (they are needed to pass the event log address across firmware images), and we need different ones for the DPE backend (used to pass the context handle across firmware images)...\n\nAlso, I\u0027ve realized that, when using the RSS backend, we still define the event-log specific functions at lines 281-294, even though they are not needed. This does not do any harm but it does not sound right to me either.\n\nPerhaps we need to do some refactoring...\n\nOne option would be to rename the functions declared at lines 281-294 such that they refer to the event log. E.g. `arm_write_evlog_info_in_tos_fw_config()`, which is a really bad name but hopefully it conveys my point. We\u0027d namespace the DPE variants as well.\n\nAnother option would be to have a unified interface across measured boot backends, using an opaque data pointer, such as `int arm_set_nt_fw_info(void *data);`. Then each backend would know what the `data` argument corresponds to.\n* For the event log backend, this would be a pointer to a structure like that:\n\n```\nstruct evlog_info {\n#ifdef SPD_opteed\n  uintptr_t log_addr;\n#endif\n  size_t log_size;\n  uintptr_t ns_log_addr;\n}\n```\n\n* For the DPE backend, this would the `int *ctx_handle`.\n\nBut this is not great from a type safety point of view, as we\u0027d need to blindly cast.\n\nYet another option would be to move these functions out of `plat_arm.h` and put them into some header file specific to each measured boot backend. I guess that would work, as these are called by platform code, which already knows which measured boot backend it uses anyway.",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 301,
        "endChar": 40
      },
      "revId": "3b6fb60efb4c405ae0be17db80faaff880059178",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90d59029_6107d17a",
        "filename": "include/plat/arm/common/plat_arm.h",
        "patchSetId": 8
      },
      "lineNbr": 301,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-02-07T21:11:34Z",
      "side": 1,
      "message": "I believe these APIs also presume that MEASURED_BOOT and DPE are mutually exclusive. Is this confirmed across all Arm platforms?\n\nI have doubt about placing these function declarations in the header specific to measured boot backends. These APIs are not inherently backend-specific (involving measurement and extension, etc.), but rather pertain more to platform-specific functionalities.\n\nHow about renaming these function, but still denoting these are platform functions (we may think about moving them to common platform header also?)for example-\n\n```\narm_set_tb_fw_info() -\u003e arm_evlog_set_tb_fw_info();\narm_dpe_set_tb_fw_info();\n```\nor (considering common platform function)\n```\narm_set_tb_fw_info() -\u003e plat_evlog_set_tb_fw_info();\nplat_dpe_set_tb_fw_info();\n```",
      "parentUuid": "33adab8c_3e015207",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 301,
        "endChar": 40
      },
      "revId": "3b6fb60efb4c405ae0be17db80faaff880059178",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b7d9a05_2d3c01f6",
        "filename": "include/plat/arm/common/plat_arm.h",
        "patchSetId": 8
      },
      "lineNbr": 301,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-02-09T14:35:19Z",
      "side": 1,
      "message": "\u003e I believe these APIs also presume that MEASURED_BOOT and DPE are mutually exclusive.\n\nI think you\u0027re right, but only because `MEASURED_BOOT` here seems to mean \"measured boot support with event-log/RSS backend\", as opposed to `DICE_PROTECTION_ENVIRONMENT` which means \"measured boot support with DPE backend\". At least, that\u0027s my understanding of the patches right now, and that seems to be enforced by Tamas\u0027 explanations about DPE being just another flavour/backend for measured boot in TF-A.\n\nThat being said, I don\u0027t think the above is right from a design perspective. I think `MEASURED_BOOT` should just refer to the generic measured boot support in TF-A, and that needs to be complemented by one or several backends. Hence `MEASURED_BOOT` should be a prerequisite of `DICE_PROTECTION_ENVIRONMENT` IMO.\n\nActually, this discussion goes back to Tamas\u0027 proposal to introduce a new `MEASURED_BOOT_FLAVOUR` build option, see [here](https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/24645/3..8/plat/arm/board/tc/tc_common_dpe.c#b21). I still think we can avoid it, assuming each platform knows which measured boot backend they want to use. Which is true on all upstream platforms right now but not true anymore on TC platform with this patch stack. Therefore, my suggestion was to handle this difference in TC platform makefile for now, until we see more platforms having that requirement, at which point we can revisit and make that more generic through a `MEASURED_BOOT_FLAVOUR` kind of mechanism.\n\n\u003e I have doubt about placing these function declarations in the header specific to measured boot backends. These APIs are not inherently backend-specific (involving measurement and extension, etc.), but rather pertain more to platform-specific functionalities.\n\nI think you\u0027ve got a point but I would say these functions are **both** backend specific AND platform specific.\n* The backend dictates **what data** needs to be passed across firmware images: event log (TPM), DICE context handle or nothing (RSS).\n* The platform dictates **how** this data gets passed: in the case of Arm platforms, it\u0027s through device tree files, but there could be other transport mechanisms used by other platforms.\n\nI am not sure where that leaves us... Perhaps we need different interfaces to retrieve the data on one hand and to pass it around on the other hand. The former would be a measured boot backend interface, while the latter would be a platform interface. Then the generic measured boot code would combine the 2 to effectively implement what\u0027s `arm_set_nt_fw_info()` responsibilities today.",
      "parentUuid": "90d59029_6107d17a",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 301,
        "endChar": 40
      },
      "revId": "3b6fb60efb4c405ae0be17db80faaff880059178",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}