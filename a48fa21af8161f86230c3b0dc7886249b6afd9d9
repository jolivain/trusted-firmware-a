{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cf7e57cc_0c558a80",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-08-01T00:25:51Z",
      "side": 1,
      "message": "Note that this may exceed the length of the TL which you checked before this point, you need to move that check down here. Also, if you want to check overflows everywhere, this  addition should probably also have one.",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecfc2a5c_798bf757",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-08-01T16:10:52Z",
      "side": 1,
      "message": "Make sense. This should be replaced by ROUNDUP_OVERFLOW.",
      "parentUuid": "cf7e57cc_0c558a80",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99cfe097_6abf4e62",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-08-01T18:24:41Z",
      "side": 1,
      "message": "This doesn\u0027t solve the other problem yet (exceeding the length of the TL, i.e. tl_max_ev). (In fact, the whole new_ev \u003e tl_max_ev check above is kinda pointless anyway, new_ev is just where the resized tag itself will end, there may still be many tags behind it.)",
      "parentUuid": "ecfc2a5c_798bf757",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5428901f_303ac31e",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-08-01T20:21:37Z",
      "side": 1,
      "message": "Fix in patch set 4",
      "parentUuid": "99cfe097_6abf4e62",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec946236_9c94ae10",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-08-01T00:25:51Z",
      "side": 1,
      "message": "What is this check trying to do? Note that in general, having multiple TEs of the same tag ID appear in the TL is allowed (e.g. they could represent multiple instances of the same kind of object).",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d95184a_a4e9f9a0",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-08-01T16:10:52Z",
      "side": 1,
      "message": "The check is to skip the TE that already with a VOID tag or if the tag doesn\u0027t exist.\n\nIn this case, I think we are missing to define a behaviour that how to delete(disable) a tag if duplicated tag IDs exist in the list?\nCurrently I assume to delete the one first found searching from the head.",
      "parentUuid": "ec946236_9c94ae10",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "993a5f2a_a07a0a29",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-08-01T18:24:41Z",
      "side": 1,
      "message": "I mean, this function already gets a direct TE pointer, so I don\u0027t think this function needs to do or check anything to take care of the duplicate case. You should just assume that whoever called this made sure that they\u0027re actually calling it on the right pointer. (Besides, if you call this on a TE that\u0027s already VOID, it\u0027s just gonna be a no-op.)\n\nYou\u0027re right that you have currently no good way to find duplicated tags. You would probably want either a function that just iterates over all tags or a sort of transfer_list_find_next(tl, id, previous_te) for that. Up to you whether you want to add that right away or leave it until someone actually needs it.",
      "parentUuid": "3d95184a_a4e9f9a0",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9e4cff5_6e11d131",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-08-01T20:21:37Z",
      "side": 1,
      "message": "You are right. I will keep this function just to disable the TE from the input pointer. The handle of duplicated ones will leave for more definitions when we have a usecase.",
      "parentUuid": "993a5f2a_a07a0a29",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "990df9f3_c3934bba",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 336,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2023-08-01T00:25:51Z",
      "side": 1,
      "message": "I think the code below is fine but I\u0027m not really sure what this comment has to do with it? Nothing here depends on tag ID.",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1901149_7d953d44",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 336,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-08-01T16:10:52Z",
      "side": 1,
      "message": "I can remove this comment since the code is telling what to do explicitly.",
      "parentUuid": "990df9f3_c3934bba",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c7bc884_4572421f",
        "filename": "lib/transfer_list/transfer_list.c",
        "patchSetId": 2
      },
      "lineNbr": 336,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-08-01T20:32:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1901149_7d953d44",
      "revId": "a48fa21af8161f86230c3b0dc7886249b6afd9d9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}