{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f8a84697_f811bfe9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2023-09-13T13:01:40Z",
      "side": 1,
      "message": "Hi Robin,\nA bit more explanation about how it is working could be good here.\nShould the tools/cert_create/src/main.c::print_help() be updated?\nAnd maybe docs/design/trusted-board-boot.rst?\nSandrine, do you know which other parts of the doc should be updated too?",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d4176ae_41ddb959",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1001111
      },
      "writtenOn": "2023-09-14T09:07:13Z",
      "side": 1,
      "message": "Hi Yann,\nYou are right, updating the help/docs is required.\nBefore putting more work into this, I\u0027d like to note that openssl deprecated support for the engine API since version 3.0. Linking this with openssl \u003e\u003d 3.0 will give warnings.\nI did push this change because I believe cert_create without the ability to use a HSM is not usable in a production environment.\nIt would be better to add pkcs11 support with the new openSSL provider API.\nI was hoping this push might get something rolling ;)",
      "parentUuid": "f8a84697_f811bfe9",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "644cb11e_70ebad11",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-09-18T11:06:46Z",
      "side": 1,
      "message": "Hi,\n\nThanks for the patch! I agree it would be great if the cert_create tool supported HSMs. In fact, you\u0027re not the first person to raise interest on this topic!\n\nAs I understand, this patch only provides one piece of PKCS#11 support, namely the ability to retrieve private keys (optionally protected by a PIN) from an HSM over PKCS#11. I imagine that a complete PKCS#11 solution would also support things like signing a payload (such that private keys never leave the HSM). Is my understanding correct?\n\nRegarding documentation, I suspect there is not much to update. We do not have a dedicated documentation page for the cert_create tool. Perhaps it\u0027s time to create one? This would go under the tools section here:\n\nhttps://trustedfirmware-a.readthedocs.io/en/latest/tools/index.html\n\nWe could mention there that cert_create supports interfacing with an HSM through PCKS#11. Also worth saying that the tool accepts receiving the PIN required to unlock access to private keys within the HSM through the \"PKCS11_PIN\" environment variable.\n\ndocs/design/trusted-board-boot.rst describes the trusted boot design in the firmware itself so it\u0027s irrelevant here, as we\u0027re doing changes to the host tools only.\n\nI am more worried about the incompatibility of this patch with OpenSSL 3.0... Although TF-A tools currently support both OpenSSL 1.1.1+ and 3.0, the latter is the default version used by TF-A OpenCI. So I think this patch would not pass the CI tests as is. Moreover, I believe the plan would be to deprecate OpenSSL 1.x API usage in TF-A tools in the future, when OpenSSL 3.0 is more broadly supported across Linux distros by default.\n\nRobin, how much would it take to support the new OpenSSL provider API instead? Is it a lot more complex than the old engine API? Is that why you went for the old API in the first place? Would you be willing to contribute another patch using the new provider API?",
      "parentUuid": "6d4176ae_41ddb959",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05a2ea5b_99c9596b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1001111
      },
      "writtenOn": "2023-09-18T13:00:43Z",
      "side": 1,
      "message": "Hi Sandrine,\n\nThis patch provides full PKCS11 support. Operations (like signing) used with the EVP_PKEY object retreived through the ENGINE_load_private_key() are provided by the engine as well, thus will go to the HSM. I\u0027m using create_cert with a ROT private key on a HSM for a while now. But I can store all keys required for the TBB on the HSM, and just have to supply their pkcs11 uri (i.e. \"pkcs11:object\u003dtos-key\") instead of a filename for it to work.\n\nPKCS11_PIN is optional. If not provided in the environment the engine (libp11) will ask you to provide the pin it on stdin.\n\nI figured the openssl3 deprecation would be an issue. I have to say a LOT of tooling is stil using the engine API (libp11) for pkcs11 today. I added engine support because I\u0027m familliar with it.\n\nI currently don\u0027t have time to dive into the provider API and update the code accordingly. But I\u0027ll have to do it in the near future anyways... If I do I\u0027ll submit another patch.",
      "parentUuid": "644cb11e_70ebad11",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cb074b3_8cc3de9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-09-19T12:54:50Z",
      "side": 1,
      "message": "Hi Robin,\n\nThanks for your answer, this clarifies a lot of things for me. In particular, I was unaware that all operations would go through the engine for an EVP_PKEY obtained through the engine. That\u0027s great! I\u0027d never thought adding full PKCS#11 support to the cert_create tool would be that straightforward!\n\nI had figured out that the PKCS11_PIN was optional - since getenv() is behind a test condition - but if not provided, I thought access to private keys within the HSM was just unprotected (which, now that I think more about it, would sound unsafe!). So thanks for clarifying that as well.\n\nRegarding the openssl1 deprecation, I guess we could accept your patch for the time being and keep it until we actually do the deprecation. Clearly, this feature is useful to you in its current form, and given what you say about the pkcs11 tooling landscape today, it\u0027s likely it would be useful to others as well. I imagine this could influence the whole openssl1 deprecation decision.\n\nAnd if you can contribute the openssl3/provider API version in the future, that would be even better!\n\nIn summary, it looks to me as if this patch is feature-complete, as far as cert_create source code is concerned. What we are missing are:\n- some documentation, as discussed above.\n- a more elaborate commit message.\n- integration into TF-A build system to drive cert_create tool for PKCS#11-compliant HSMs. I imagine we would need a new flag such as -pkcs11 to run the tool in this mode, and perhaps some argument plumbing to pass \"pkcs11:object\u003dtos-key\" type of strings? Does that make sense?",
      "parentUuid": "05a2ea5b_99c9596b",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "981c0454_813538e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1001111
      },
      "writtenOn": "2023-09-19T15:29:22Z",
      "side": 1,
      "message": "Hi Sandrine,\n\nI\u0027ve re-submitted the patch. The things I\u0027ve changed:\n\n* Created a separate patch[1] for the removal of the \u0027k\u0027 pointer in key_load()\n* Updated the all key releated help_msg so they mention the ability to supply a pkcs11 uri.\n* Added a commit message\n* Added a call to ENGINE_free() in key_load_pkcs11() on failure\n\nI\u0027m not sure that you mean with you last point.\n\n1: https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/23438",
      "parentUuid": "1cb074b3_8cc3de9f",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bae68e89_96496acb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-09-20T08:41:52Z",
      "side": 1,
      "message": "Thanks Robin.\n\n\u003e I\u0027m not sure that you mean with you last point.\n\nAfter looking more into it, this might not be necessary. But let me try to explain what I had in mind.\n\ncert_create tool can be directly invoked, like this (copied from [1]):\n\n tools/cert_create/cert_create -n \\\n    --rot-key build/stm32mp1/release/rot_key.pem \\\n    --tfw-nvctr 0 \\\n    --ntfw-nvctr 0 \\\n    --key-alg ecdsa --hash-alg sha256 \\\n    --trusted-key-cert build/stm32mp1/release/trusted_key.crt \\\n    --tos-fw \u003coptee_directory\u003e/tee-header_v2.bin \\\n    --tos-fw-extra1 \u003coptee_directory\u003e/tee-pager_v2.bin \\\n    --tos-fw-extra2 \u003coptee_directory\u003e/tee-pageable_v2.bin \\\n    --tos-fw-cert build/stm32mp1/release/tos_fw_content.crt \\\n    --tos-fw-key-cert build/stm32mp1/release/tos_fw_key.crt \\\n    --nt-fw \u003cu-boot_directory\u003e/u-boot-nodtb.bin \\\n    --nt-fw-cert build/stm32mp1/release/nt_fw_content.crt \\\n    --nt-fw-key-cert build/stm32mp1/release/nt_fw_key.crt \\\n    --hw-config \u003cu-boot_directory\u003e/u-boot.dtb \\\n    --fw-config build/stm32mp1/release/fdts/fw-config.dtb \\\n    --stm32mp-cfg-cert build/stm32mp1/release/stm32mp_cfg_cert.crt\n\nIn this example, we pass the root-of-trust public key file through \"--rot-key build/stm32mp1/release/rot_key.pem\". With your patch, if I am not mistaken, I think we\u0027d pass something like \"--rot-key pkcs11:object\u003drot-key\" instead.\n\nThis is all fine.\n\nThe other option is to let TF-A build system invoke the cert_create tool, which it will do as soon as you build TF-A with \u0027make GENERATE_COT\u003d1\u0027. In this case, most of the options passed to cert_create program are aliased by some environment variable. For example, ROT_KEY environment variable value will be passed down as the value of the \u0027--rot-key\u0027 option to cert_create.\n\nI originally thought we were missing some plumbing to keep that mechanism working but I now realize that in your case, we could just pass ROT_KEY\u003d\"pkcs11:object\u003drot-key\" on the make command line and this would work just fine. So please disregard my previous comment.\n\nStill, that made me realize that we might need to update the build options documentation page [2]. For example, it says the following about ROT_KEY:\n\n\u003e ROT_KEY: This option is used when GENERATE_COT\u003d1. It specifies the file that contains the ROT private key in PEM format and enforces public key hash generation. If SAVE_KEYS\u003d1, this file name will be used to save the key.\n\nWe should probably change \"It specifies the file\" into \"It specifies the file or URI\". We would need to update all similar build options documentation...\n\nAnother thing to take into consideration is the ability of cert_create tool to save keys on the disk (TF-A SAVE_KEYS build option / cert_create -k option). I guess we do not want to support this feature when interfacing with an HSM. Retrieving keys from the HSM requires entering a PIN ; if we save them on the disk, we lose that protection. So we\u0027d need another patch to disable this feature for keys coming from the HSM. Does it make sense to you?\n\n[1] https://trustedfirmware-a.readthedocs.io/en/latest/plat/st/stm32mp1.html#trusted-boot-board\n\n[2] https://trustedfirmware-a.readthedocs.io/en/latest/getting_started/build-options.html",
      "parentUuid": "981c0454_813538e0",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2b70c78_b4e60f72",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1001111
      },
      "writtenOn": "2023-09-20T10:26:16Z",
      "side": 1,
      "message": "Sandrine,\n\n\u003e \u003e ROT_KEY: This option is used when GENERATE_COT\u003d1. It specifies the file that contains the ROT private key in PEM format and enforces public key hash generation. If SAVE_KEYS\u003d1, this file name will be used to save the key.\n\u003e \n\u003e We should probably change \"It specifies the file\" into \"It specifies the file or URI\". We would need to update all similar build options documentation...\n\nAah, I see. We\u0027ll need to update the doc on the environment variables as well.\n\n\u003e Another thing to take into consideration is the ability of cert_create tool to save keys on the disk (TF-A SAVE_KEYS build option / cert_create -k option). I guess we do not want to support this feature when interfacing with an HSM. Retrieving keys from the HSM requires entering a PIN ; if we save them on the disk, we lose that protection. \n\nThe HSM won\u0027t let you extract it\u0027s keys by design. Even if you want to. It will only allow you to work with the key if you have the PIN. So saving them to a file like that is not possible.\n\nI see why ENGINE_load_private_key gives you the idea that you obtain a key, but that would be defeating the purpose of a HSM. \n\nEVP_PKEY is a generic structure to hold diverse types of asymmetric keys, and can be used for diverse operations, like signing, verifying signatures, key derivation, etc. The asymmetric keys themselves are often referred to as the \"internal key\", and are handled by backends, such as providers (through EVP_KEYMGMT(3)) or ENGINEs.[1]\n\n\u003e So we\u0027d need another patch to disable this feature for keys coming from the HSM. Does it make sense to you?\n\nI forgot to mention that I added a check for a pkcs11 uri in key_store() as-well. So an error is thrown if a pkcs11 uri is used with -k (--save-keys). This might be an issue if you want to save keys to files while using a pkcs11 uri as well, but I can\u0027t think of a situation like that that makes sense. I.e. using a pkcs11 uri for ROT and saving subordinate keys to file/disk is a huge security risk. In that case using a HSM doesn\u0027t make sense... It would still be possiby though, but you\u0027ll have to run the tool twice. First to generate/write the keys than to use the pkcs11 uri with files combination for input.\n\n1: https://www.openssl.org/docs/man3.0/man3/EVP_PKEY_new.html",
      "parentUuid": "bae68e89_96496acb",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca035dcf_d5593e97",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-09-20T11:39:37Z",
      "side": 1,
      "message": "\u003e Sandrine,\n\u003e \n\u003e \u003e \u003e ROT_KEY: This option is used when GENERATE_COT\u003d1. It specifies the file that contains the ROT private key in PEM format and enforces public key hash generation. If SAVE_KEYS\u003d1, this file name will be used to save the key.\n\u003e \u003e \n\u003e \u003e We should probably change \"It specifies the file\" into \"It specifies the file or URI\". We would need to update all similar build options documentation...\n\u003e \n\u003e Aah, I see. We\u0027ll need to update the doc on the environment variables as well.\n\nYes.\n\n\u003e \u003e Another thing to take into consideration is the ability of cert_create tool to save keys on the disk (TF-A SAVE_KEYS build option / cert_create -k option). I guess we do not want to support this feature when interfacing with an HSM. Retrieving keys from the HSM requires entering a PIN ; if we save them on the disk, we lose that protection. \n\u003e \n\u003e The HSM won\u0027t let you extract it\u0027s keys by design. Even if you want to. It will only allow you to work with the key if you have the PIN. So saving them to a file like that is not possible.\n\u003e \n\u003e I see why ENGINE_load_private_key gives you the idea that you obtain a key, but that would be defeating the purpose of a HSM. \n\u003e \n\u003e EVP_PKEY is a generic structure to hold diverse types of asymmetric keys, and can be used for diverse operations, like signing, verifying signatures, key derivation, etc. The asymmetric keys themselves are often referred to as the \"internal key\", and are handled by backends, such as providers (through EVP_KEYMGMT(3)) or ENGINEs.[1]\n\nGot it, thanks for the detailed explanation.\n\n\u003e \u003e So we\u0027d need another patch to disable this feature for keys coming from the HSM. Does it make sense to you?\n\u003e \n\u003e I forgot to mention that I added a check for a pkcs11 uri in key_store() as-well. So an error is thrown if a pkcs11 uri is used with -k (--save-keys). This might be an issue if you want to save keys to files while using a pkcs11 uri as well, but I can\u0027t think of a situation like that that makes sense. I.e. using a pkcs11 uri for ROT and saving subordinate keys to file/disk is a huge security risk. In that case using a HSM doesn\u0027t make sense... It would still be possiby though, but you\u0027ll have to run the tool twice. First to generate/write the keys than to use the pkcs11 uri with files combination for input.\n\u003e \n\u003e 1: https://www.openssl.org/docs/man3.0/man3/EVP_PKEY_new.html\n\nYes, sorry I had missed that piece of code. I agree with your proposed approach.\n\nI\u0027ll run the CI on your patch now but as discussed previously I am expecting many failures as I believe TF-A OpenCI uses OpenSSL 3.0. If that\u0027s the case, we might have to compile out PKCS11 support from cert_create tool by default and require the developer to explicitly enable it at build time through some build flag, if needed.\n\nIn order to test this patch in TF-A OpenCI, we might have to install OpenSSL 1.0 on the docker image it uses. I don\u0027t know whether we already have such a docker image, I\u0027ll try to find out.",
      "parentUuid": "c2b70c78_b4e60f72",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35691ea6_fc9b3afa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-09-13T12:38:39Z",
      "side": 1,
      "message": "Jimmy is on leave right now so he won\u0027t be able to review this patch for some time. Adding a couple more reviewers on this patch in case they get around to taking a look before myself.",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e78e1cde_8fb4e5c5",
        "filename": "tools/cert_create/src/key.c",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-09-19T12:54:50Z",
      "side": 1,
      "message": "Don\u0027t we need to call ENGINE_free() in all error code paths starting from here?",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d78b289_f20e160c",
        "filename": "tools/cert_create/src/key.c",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1001111
      },
      "writtenOn": "2023-09-19T15:29:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e78e1cde_8fb4e5c5",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1adf997f_1599994f",
        "filename": "tools/cert_create/src/key.c",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2023-09-13T13:01:40Z",
      "side": 1,
      "message": "Maybe this should be explained in commit message, as it is not directly related to PKCS11. From what I\u0027ve seen in pem_read_bio_key_decoder(), this doesn\u0027t change a lot, and avoids a free and copy. It also avoids having a temporary variable here.",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad4aefd5_6ac17e31",
        "filename": "tools/cert_create/src/key.c",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1001111
      },
      "writtenOn": "2023-09-14T09:07:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1adf997f_1599994f",
      "revId": "b93332139ade901af0dd553ca989311565459ad9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}