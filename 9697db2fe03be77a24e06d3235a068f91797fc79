{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "49cc066f_1c421509",
        "filename": "services/std_svc/spm/spmc/spmc_main.c",
        "patchSetId": 5
      },
      "lineNbr": 1588,
      "author": {
        "id": 1000340
      },
      "writtenOn": "2022-02-03T00:58:24Z",
      "side": 1,
      "message": "ret is not a boolean type, something like \"ret !\u003d 0\" might be better",
      "range": {
        "startLine": 1588,
        "startChar": 5,
        "endLine": 1588,
        "endChar": 8
      },
      "revId": "9697db2fe03be77a24e06d3235a068f91797fc79",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b595c2d_54131083",
        "filename": "services/std_svc/spm/spmc/spmc_main.c",
        "patchSetId": 5
      },
      "lineNbr": 1588,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-02-11T17:55:22Z",
      "side": 1,
      "message": "That\u0027s a fair point, this pattern has been used throughout the remainder of these patches in the same manor to signify that any \"truthy\" return value indicates that some error has occurred and from what I can tell is also used in other areas of the TF-A code base as well.\n\nTo keep things consistent I\u0027m happy to change this and all the other instances to the proposed format if this is the preferred TF-A style going forward, but just wanted to double check first?",
      "parentUuid": "49cc066f_1c421509",
      "range": {
        "startLine": 1588,
        "startChar": 5,
        "endLine": 1588,
        "endChar": 8
      },
      "revId": "9697db2fe03be77a24e06d3235a068f91797fc79",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e589bb8_42510f27",
        "filename": "services/std_svc/spm/spmc/spmc_shared_mem.h",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000340
      },
      "writtenOn": "2022-02-03T00:58:24Z",
      "side": 1,
      "message": "TFA has a CASSERT definition that seems to serve this same purpose. https://trustedfirmware-a.readthedocs.io/en/v2.2/process/coding-guidelines.html#using-cassert-to-check-for-compile-time-data-errors",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "9697db2fe03be77a24e06d3235a068f91797fc79",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cf72ce8_885bee58",
        "filename": "services/std_svc/spm/spmc/spmc_shared_mem.h",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-02-11T17:55:22Z",
      "side": 1,
      "message": "Thanks for pointing that out. Updated to use CASSERT\u0027s instead.",
      "parentUuid": "9e589bb8_42510f27",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "9697db2fe03be77a24e06d3235a068f91797fc79",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}