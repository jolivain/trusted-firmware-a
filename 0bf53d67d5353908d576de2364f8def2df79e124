{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dbcc76ee_f743e0ba",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-12-22T15:06:52Z",
      "side": 1,
      "message": "Is this for passing a bl_params_t from BL2 to BL31?",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b921c71f_7ff500f7",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-22T16:23:32Z",
      "side": 1,
      "message": "Not quite, its used to pass an array of `entry_point_info_t` structures which is a subset of `bl_params_t`. We\u0027ve opted for this since this is the main information consumed by BL31.\n\nCorresponding spec patch here: https://github.com/FirmwareHandoff/firmware_handoff/pull/31.",
      "parentUuid": "dbcc76ee_f743e0ba",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1b991f7_51fa50ad",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-12-22T16:41:31Z",
      "side": 1,
      "message": "I think BL31 needs to consume `entry_point_info_t` of both BL32 and BL33.\nIn this case, in BL2 we will have to create multiple entries of `EXEC_EP_INFO` if we pass `entry_point_info_t` instead of `bl_params_t`.\nWhat is the expected behavior from BL31 when the TL has multiple entries of `EXEC_EP_INFO`?",
      "parentUuid": "b921c71f_7ff500f7",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "468f3e9e_4d25f552",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-22T17:03:04Z",
      "side": 1,
      "message": "If I\u0027ve understood you correctly, the TE doesn\u0027t just take a single `entry_point_info_t` structure. Instead, we pack all subsequent executable entry point info structures into an array. That means if BL31, or even the runtime firmware in the case of aarch32, has several images to run, we can pass this on in a single TE. In most cases, BL31 unpacks this data and has separate global data structures to keep track of executable state [1].\n\n[1] https://review.trustedfirmware.org/plugins/gitiles/TF-A/trusted-firmware-a/+/refs/heads/master/plat/arm/common/arm_bl31_setup.c#198",
      "parentUuid": "b1b991f7_51fa50ad",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60be50e2_961cb7f4",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-12-22T17:48:51Z",
      "side": 1,
      "message": "Yes. That is what I mean. `bl_params_t` is a better solution as it packs all entry point info that the BL31 needs. Otherwise we might need to think about how to handle multiple TEs with same tag for each `entry_point_info_t`.",
      "parentUuid": "468f3e9e_4d25f552",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adaf14d9_d9114f2e",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-28T18:21:36Z",
      "side": 1,
      "message": "Apologies, but I\u0027m not entirely clear on the specific concern here. You are right that `bl_params_t` packs much more information than just the `entry_point_info_t` structure. However, much of this information is discarded once those are retrieved. Although I may be mistaken, I am yet to find any other usage of `bl_params_t`.\n\nThe motivation here is to remove any unnecessary complexity. It doesn\u0027t make sense that we construct the `bl_params_t` structure from scratch when we have all the information we need defined in static structures.\n\nIn practice, this means that if we need to execute BL32 alongside RMM and BL33, we can just get the `entry_point_info_t` structures for those images in BL2 and pack them into a TE of this new type. We can differentiate the `entry_point_info_t` structures in BL31 based on the attribute field of the header [1]. For instance, on Arm platforms BL32 is encoded with the secure flag, and RMM is encoded with a EP_REALM flag [2].\n\n[1] https://review.trustedfirmware.org/plugins/gitiles/TF-A/trusted-firmware-a/+/refs/heads/master/include/common/ep_info.h#19\n[2] https://review.trustedfirmware.org/plugins/gitiles/TF-A/trusted-firmware-a/+/refs/heads/master/plat/arm/common/aarch64/arm_bl2_mem_params_desc.c#127",
      "parentUuid": "60be50e2_961cb7f4",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6cee809_41221d23",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-12-28T19:31:59Z",
      "side": 1,
      "message": "You might be right in terms of how to differentiate different `entry_point_info_t` in BL31. However, I think currently in the spec we always assume that each TE is with a unique tag ID in the TL, so that we can use this tag ID to identify a TE.\nIf we need to support multiple TEs with a same tag ID, firstly the spec needs to provide a way for how to differentiate the TEs with same tag ID (maybe by adding a new field in the TE header?). Followed by that, some of the APIs need to be redesigned. For example, `transfer_list_find()`.",
      "parentUuid": "adaf14d9_d9114f2e",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42ce56de_a0eca391",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-29T13:33:27Z",
      "side": 1,
      "message": "A redesign of the API would certainly be undesirable for this single structure. \n\nAre there any constraints in the specification that I\u0027m missing that prevent the specification of a TE whose data can be one **or more**  `entry_point_info_t`? That\u0027s the original intent of this TE type at least.",
      "parentUuid": "a6cee809_41221d23",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57f808af_0da358d5",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1001070
      },
      "writtenOn": "2023-12-29T15:17:19Z",
      "side": 1,
      "message": "My only concern related to this PR is when we define a TE for `entry_point_info_t`, that means implicily we allow multiple TEs with same tag ID exist in a TL, since now we have more than one entry point needs to be handled.\nBut this is not yet considered in the spec at the moment, tag ID is the only field to identify a TE. We cannot identify a TE from another one if they have same tag ID.\nBut I agree if we have a plan to update the spec to support this with another PR.",
      "parentUuid": "42ce56de_a0eca391",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a74408a_73af5e45",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-29T17:33:51Z",
      "side": 1,
      "message": "Good point - I\u0027ve tagged you in the corresponding spec patch for the TE type. Would appreciate your input there to refine our approach.",
      "parentUuid": "57f808af_0da358d5",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "602112d8_2e1be761",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-19T18:08:30Z",
      "side": 1,
      "message": "This patch is being discussed in Firmware handoff spec PR",
      "parentUuid": "4a74408a_73af5e45",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6a4c06e_9f64c8d1",
        "filename": "include/lib/transfer_list.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2024-03-06T16:30:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "602112d8_2e1be761",
      "revId": "0bf53d67d5353908d576de2364f8def2df79e124",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}