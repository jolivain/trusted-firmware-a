{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e0f76a60_cc6c6205",
        "filename": "plat/arm/board/fvp/fvp_bl2_measured_boot.c",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-03-08T15:14:49Z",
      "side": 1,
      "message": "Could we replace this runtime check by a static (compile-time) assertion? The event log buffer on FVP is defined as a static array of PLAT_ARM_EVENT_LOG_MAX_SIZE bytes [1], i.e. 0x400 bytes [2]. Thus, I think we could CASSERT(ARM_EVENT_LOG_DRAM1_SIZE \u003c\u003d PLAT_ARM_EVENT_LOG_MAX_SIZE), right?\n\n[1] https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/arm/board/fvp/fvp_bl1_measured_boot.c#n14\n[2] https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/arm/board/fvp/include/platform_def.h#n414",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "49b96165164ebfca5514f394d0896fb3fc70d5e7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "461ba112_96beba38",
        "filename": "plat/arm/board/fvp/fvp_bl2_measured_boot.c",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-03-08T16:30:24Z",
      "side": 1,
      "message": "This is good suggestion! \u0027event_log_cur_size\u0027 is defined at compile time, so CASSERT makes sense.",
      "parentUuid": "e0f76a60_cc6c6205",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "49b96165164ebfca5514f394d0896fb3fc70d5e7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e03ba1b6_2e24f466",
        "filename": "plat/arm/board/fvp/fvp_bl2_measured_boot.c",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-03-08T20:34:25Z",
      "side": 1,
      "message": "\u0027event_log_cur_size\u0027 is actual size and it is always less than PLAT_ARM_EVENT_LOG_MAX_SIZE (ensured by assert implemented in the Event Log driver).\n\nHence CASSERT(ARM_EVENT_LOG_DRAM1_SIZE \u003e\u003d PLAT_ARM_EVENT_LOG_MAX_SIZE) makes sense! Done the changes accordingly.",
      "parentUuid": "461ba112_96beba38",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "49b96165164ebfca5514f394d0896fb3fc70d5e7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63239ea4_114e6e4d",
        "filename": "plat/arm/board/fvp/fvp_bl2_measured_boot.c",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-03-09T07:24:18Z",
      "side": 1,
      "message": "On further thoughts, I realized that this static assertion makes an assumption on the size of the event log allocated by BL1. IOW, it introduces a binary dependency between BL1 and BL2. I suppose that\u0027s fine on Base AEM FVP but that would be incorrect if we were using another BootROM implementation, alongside TF-A BL2. In the latter case, using event_log_cur_size would be the right thing to do.\n\nI am now leaning towards reintroducing the runtime check (in place of a static assertion). What\u0027s the point of dynamically passing \u0027event_log_cur_size\u0027 through the DTB in the first place if we don\u0027t make use of it? This seems to go against the intended design...\n\nSorry for changing my mind on this!",
      "parentUuid": "e03ba1b6_2e24f466",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "49b96165164ebfca5514f394d0896fb3fc70d5e7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08b483cf_b17c7d1d",
        "filename": "plat/arm/board/fvp/fvp_bl2_measured_boot.c",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-03-09T09:43:14Z",
      "side": 1,
      "message": "AFAIR, when implementing the Event Log driver, it was designed so that the maximum size of the Event Log buffer would be determined at compile time and should be same for both TF-A BL1 and TF-A BL2. \u0027event_log_cur_size\u0027 is mainly used to adjust start address of Event Log in BL2 to amend measurements [2], so I still feel compile time asserts are okay given that the same maximum Event Log size is consumed by both BL1 and BL2, and this size is not passed by the Device tree (TB firmware configuration).\n\nIn lieu of using the compiled time value in BL2 [1] I think we can improvise the code as a separate patch to get the maximum Event Log size from BL1 and replace this compile time assert with runtime check. Please let me know what you think?\n\n[1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/arm/board/fvp/fvp_bl2_measured_boot.c#n108\n[2]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/arm/board/fvp/fvp_bl2_measured_boot.c#n106",
      "parentUuid": "63239ea4_114e6e4d",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "49b96165164ebfca5514f394d0896fb3fc70d5e7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4af505b9_16b37cb7",
        "filename": "plat/arm/board/fvp/fvp_bl2_measured_boot.c",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-03-09T13:45:47Z",
      "side": 1,
      "message": "\u003e AFAIR, when implementing the Event Log driver, it was designed so that the maximum size of the Event Log buffer would be determined at compile time and should be same for both TF-A BL1 and TF-A BL2. \u0027event_log_cur_size\u0027 is mainly used to adjust start address of Event Log in BL2 to amend measurements [2], so I still feel compile time asserts are okay given that the same maximum Event Log size is consumed by both BL1 and BL2, and this size is not passed by the Device tree (TB firmware configuration).\n\nRight, thanks for digging through the history of the design. That makes sense to me. In this case, I agree that a compile-time assertion sounds fine.\n\n\u003e In lieu of using the compiled time value in BL2 [1] I think we can improvise the code as a separate patch to get the maximum Event Log size from BL1 and replace this compile time assert with runtime check. Please let me know what you think?\n\nAnd how do you propose we pass the maximum event log size from BL1 to BL2? Through a new DTB property?",
      "parentUuid": "08b483cf_b17c7d1d",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "49b96165164ebfca5514f394d0896fb3fc70d5e7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad9b2feb_a586a4f5",
        "filename": "plat/arm/board/fvp/fvp_bl2_measured_boot.c",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-03-09T14:05:50Z",
      "side": 1,
      "message": "\u003e And how do you propose we pass the maximum event log size from BL1 to BL2? Through a new DTB property?\n\nYes, via new DTB property. say **tpm_event_log_max_size**.",
      "parentUuid": "4af505b9_16b37cb7",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "49b96165164ebfca5514f394d0896fb3fc70d5e7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}