{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9667a67a_ac768f7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000469
      },
      "writtenOn": "2022-08-01T09:07:16Z",
      "side": 1,
      "message": "Hm. You are definitely right but trying to understand why I select this address. It should be 0xfffe5000. Can you please instead of revert to DDR just fix that address to stay in OCM? ",
      "revId": "e281761876a6a79dba82d664ecfcd7dd29c88ac3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac2ee4c5_798bfc3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000864
      },
      "writtenOn": "2022-08-01T11:02:46Z",
      "side": 1,
      "message": "I would love to keep both ATF and OP-TEE OS in OCM but unfortunately we have a bit of chicken egg problem in that and OCM is a bit small for that.\n\nI have tried to picture the boot flow in here:\nhttps://github.com/OP-TEE/optee_os/pull/5350#issuecomment-1200408103\n\n(Feel free to join the discussion to provide Xilinx/AMD view on things ðŸ˜Š)\n\nWhen ATF is compiled with OP-TEE support its memory usage is:\n\n$ nm -v deploy/arm-trusted-firmware.elf  | grep __BL31_\n0000000000001000 T __BL31_START__\n000000000001a000 B __BL31_END__\n\nWhich is 100 KiB.\n\nBut during the boot FSBL also occupies the OCM memory and that is the entity trying to load more stuff in memory.\n\nNow our FSBL build without PMUFW is about 114 KiB:\n\n-rw-r--r-- 2 vej vej   117448 heinÃ¤  29 23:01 boot-usb-0.18.0.unsigned.bin\n\nAnd if you observe source .elf for that:\n\n$ nm -v fsbl-usb.elf | grep -E \u0027 (_vector_table|_end)$\u0027\n00000000fffc0000 T _vector_table\n00000000fffffc40 B _end\n\nWhich more or less consumes the whole OCM.\n\nAnd it is not often a good idea to load next binary into the memory that would override running code.\n\nSo far only way that I have figured out to fix that issue would be to:\n\n- Make FSBL build for Cortex-R5/lock-step mode that gets initially executed from 0xFFFC0000 (OCM start) (ROM requirement)\n- Relocate code execution to R5\u0027s TCM memory (in lock-step mode we have 256 KiB there too)\n- Relocate interrupt vectors and such to TCM\n- Load next Xilinx Image container image containing:\n  - (verify \u0026 decrypt on the go)\n  - PMUFW (to PMU)\n  - Bitstream (to PL)\n  - ATF (to OCM)\n  - OP-TEE (to DDR)\n  - DTB (to DDR)\n  - U-Boot (to DDR)\n- Prepare ATF handoff in OCM(?)\n- Boot ATF from Cortex-A53#0\n- Move R5F to \"deep sleep\"\n- ATF: Shutdown R5F and make cleanups for memory\n- Continue the boot\n\nNow the problem with that is that the real Cortex-R5F image must be loaded after U-Boot has been started as R5F is reserved during the boot. And probably should be firewalled by ATF so that it cannot touch OCM or other Trust Zone protected memories.\n\nAnd then about the OP-TEE OS -- we are current at:\n-rw-r--r-- 2 vej vej  425240 heinÃ¤  29 22:29 tee_raw.bin\n\nWhich would not fit in OCM ðŸ˜¢.\n\nNow if we come back to the actual code (as previously):\n\n#ifndef ZYNQMP_ATF_MEM_BASE\n#if !DEBUG \u0026\u0026 defined(SPD_none) \u0026\u0026 !SDEI_SUPPORT\n# define BL31_BASE                      U(0xfffea000)\n# define BL31_LIMIT                     U(0x100000000)\n#else\n# define BL31_BASE                      U(0x1000)\n# define BL31_LIMIT                     U(0x7ffff)\n#endif\n#else\n# define BL31_BASE                      (ZYNQMP_ATF_MEM_BASE)\n# define BL31_LIMIT                     (ZYNQMP_ATF_MEM_BASE + ZYNQMP_ATF_MEM_SIZE - 1)\n# ifdef ZYNQMP_ATF_MEM_PROGBITS_SIZE\n#  define BL31_PROGBITS_LIMIT           (ZYNQMP_ATF_MEM_BASE + ZYNQMP_ATF_MEM_PROGBITS_SIZE - 1)\n# endif\n#endif\n\nNow if we would change the default address for OP-TEE enabled boot case (eg. SPD_none is not defined) then it would try to load ATF in OCM which would then override running FSBL which is not a good idea.\n\nI suppose this whole #ifdef structure would need to be thinked as a whole as there are different configurations and different allocations. To me that looks like if your ATF is small (\u003c 88 KiB) then we can try to put it on OCM assuming that FSBL would actually be is small enough (and would not use memory at ATF\u0027s point).\n\nEven if R5F boot flow would be in use (as described above) then I suppose that would need to be flagged somehow in ATF build so that one can use also A53 FSBL boot flow.\n\nAny thoughs?",
      "parentUuid": "9667a67a_ac768f7e",
      "revId": "e281761876a6a79dba82d664ecfcd7dd29c88ac3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b40896c_405f034a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000469
      },
      "writtenOn": "2022-08-01T11:53:06Z",
      "side": 1,
      "message": "No doubt that OCM size is limiting factor here. And we can\u0027t do much about it.\n\nThis year we optimize pinctrl implementation in TF-A to reduce size to make sure that we can stay within current footprint in near future. There are some other places which can be optimized to find some space but still this won\u0027t solve problem with adding SPD to TF-A binary. \n\nLet me comment your post but before I dig into it. BL31_BASE/LIMIT can be configured before building to fit any of use case. And the address which I wanted to setup is an address which works fine with U-Boot SPL (not sure why origin patch didn\u0027t have it). And intentional debug configuration is without any SPD which should be possible to fit to OCM. \n\nBefore I did try pinctrl optimization I was thinking about couple of changes in SPL or FSBL which is that both of these SW have some low level code (a lot of the part of psu_init...) which is called only once. It means there is a option with marking initial functions before loading another images as init code and then free this space for using for other SW. It means FSBL will load TF-A from OCM start. This could give you additional space for also including SPD to the image. \nThe only use case which won\u0027t are any PM related configuration where APU restart only requires to still have FSBL in OCM. \nIt means there are ways but depends on use case you need to solve.\nAlso as you write using TCM memory can be also consider if can be used or not. \n\nI am not FSBL developer but that base addr which is setup for !DEBUG case should never be used by fsbl. Last page is maybe used for something but that location which is used for some time should be without any issue. It means you should take a look at sections in elf file to see what it is loaded where. \n\nAnyway as I said these addresses are supposed to target default cases which is without any SPD and for that we should be able to fit to OCM. \n\nAnd OPTEE is not supported by Xilinx. There is a support for ZynqMP done by me and Soren long time ago but we are no longer maintaining it.",
      "parentUuid": "ac2ee4c5_798bfc3f",
      "revId": "e281761876a6a79dba82d664ecfcd7dd29c88ac3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}