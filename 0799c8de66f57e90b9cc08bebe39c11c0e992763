{
  "comments": [
    {
      "key": {
        "uuid": "f788bbef_4adbbe67",
        "filename": "drivers/auth/crypto_mod.c",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "Should this be an enum crypto_dec_algo instead of an unsigned int?",
      "range": {
        "startLine": 118,
        "startChar": 28,
        "endLine": 118,
        "endChar": 49
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4e40a7a_db07f613",
        "filename": "drivers/auth/cryptocell/712/cryptocell_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "Won\u0027t that result in a NULL pointer dereference? The crypto lib wrapper (crypto_mod_auth_decrypt()) just assumes this function hook is provided by the crypto lib and does not check whether the pointer is NULL before invoking it.",
      "range": {
        "startLine": 304,
        "startChar": 67,
        "endLine": 304,
        "endChar": 71
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f04b3e53_e2744238",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "As the block cipher is hard-coded in this function and cannot be chosen through an input parameter, should this be renamed into aes_gcm_decrypt()?",
      "range": {
        "startLine": 209,
        "startChar": 11,
        "endLine": 209,
        "endChar": 22
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9fd3e7e_dba1f904",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2019-12-18T17:01:21Z",
      "side": 1,
      "message": "Could this be a configuration option which would allow to balance stack usage vs execution speed?\nI think it is worth to capture this value in a macro definition. That shows developers, this value could be changed.",
      "range": {
        "startLine": 215,
        "startChar": 19,
        "endLine": 215,
        "endChar": 22
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec82e6d5_a3a39bc9",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 219,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2019-12-18T17:01:21Z",
      "side": 1,
      "message": "if len is zero do we need to do anything? Is is possible to simply return with success in this case?",
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33bbaeb2_dad0e3f0",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 235,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2019-12-18T17:01:21Z",
      "side": 1,
      "message": "Does this number relate to the size of buf? If so I suggest writing this as sizeof(buf), due to readability and maintenance factors.",
      "range": {
        "startLine": 235,
        "startChar": 16,
        "endLine": 235,
        "endChar": 20
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "995b46eb_6364c496",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2019-12-18T17:01:21Z",
      "side": 1,
      "message": "Please use sizeof(tag_buf) here.",
      "range": {
        "startLine": 248,
        "startChar": 40,
        "endLine": 248,
        "endChar": 42
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "643d1f8b_f677ed36",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2019-12-18T17:01:21Z",
      "side": 1,
      "message": "From this I assume sizeof(tag_buf) and tag_len are connected. (sizeof(tag_buf) must be greater or equal to tag_len).\n\nIf this requirement is not met, the code will do out of bounds access to tag_buf. This my or may not result in a crash, but might be worth to be avoided.\nPlease consider adding a check.",
      "range": {
        "startLine": 256,
        "startChar": 11,
        "endLine": 256,
        "endChar": 48
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5afac8ef_f0f1a0dd",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "Should there be some AES-GCM specific sanity-checks on the various arguments passed to gcm_decrypt()? key_len being 128 or 192 or 256 bits, tag_len being at least 4 bytes, that kind of checks? Or would you just resort on mbedTLS to reject these invalid values for you?",
      "range": {
        "startLine": 282,
        "startChar": 0,
        "endLine": 283,
        "endChar": 14
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68939b6f_0a8a012c",
        "filename": "include/drivers/auth/crypto_mod.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "Should \u0027tag\u0027 be a pointer to const data? As far as I understand, it is the reference tag to compare against the one we get out of the authenticated decryption operation, isn\u0027t it? Is there a reason why the function might need to modify it?\n\n\u0027key\u0027 and \u0027iv\u0027 also are input parameters and could be (const void *), I think.",
      "range": {
        "startLine": 53,
        "startChar": 38,
        "endLine": 53,
        "endChar": 47
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}