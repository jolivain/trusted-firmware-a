{
  "comments": [
    {
      "key": {
        "uuid": "f788bbef_4adbbe67",
        "filename": "drivers/auth/crypto_mod.c",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "Should this be an enum crypto_dec_algo instead of an unsigned int?",
      "range": {
        "startLine": 118,
        "startChar": 28,
        "endLine": 118,
        "endChar": 49
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4e40a7a_db07f613",
        "filename": "drivers/auth/cryptocell/712/cryptocell_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "Won\u0027t that result in a NULL pointer dereference? The crypto lib wrapper (crypto_mod_auth_decrypt()) just assumes this function hook is provided by the crypto lib and does not check whether the pointer is NULL before invoking it.",
      "range": {
        "startLine": 304,
        "startChar": 67,
        "endLine": 304,
        "endChar": 71
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f04b3e53_e2744238",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "As the block cipher is hard-coded in this function and cannot be chosen through an input parameter, should this be renamed into aes_gcm_decrypt()?",
      "range": {
        "startLine": 209,
        "startChar": 11,
        "endLine": 209,
        "endChar": 22
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5afac8ef_f0f1a0dd",
        "filename": "drivers/auth/mbedtls/mbedtls_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "Should there be some AES-GCM specific sanity-checks on the various arguments passed to gcm_decrypt()? key_len being 128 or 192 or 256 bits, tag_len being at least 4 bytes, that kind of checks? Or would you just resort on mbedTLS to reject these invalid values for you?",
      "range": {
        "startLine": 282,
        "startChar": 0,
        "endLine": 283,
        "endChar": 14
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68939b6f_0a8a012c",
        "filename": "include/drivers/auth/crypto_mod.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-12-18T13:39:14Z",
      "side": 1,
      "message": "Should \u0027tag\u0027 be a pointer to const data? As far as I understand, it is the reference tag to compare against the one we get out of the authenticated decryption operation, isn\u0027t it? Is there a reason why the function might need to modify it?\n\n\u0027key\u0027 and \u0027iv\u0027 also are input parameters and could be (const void *), I think.",
      "range": {
        "startLine": 53,
        "startChar": 38,
        "endLine": 53,
        "endChar": 47
      },
      "revId": "0799c8de66f57e90b9cc08bebe39c11c0e992763",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}