{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96462889_8f71803a",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-11-28T10:38:55Z",
      "side": 1,
      "message": "Wouldn\u0027t it make sense for this to be _required too? Don\u0027t we want an exact match of features even if they are optional?",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee260662_a332c026",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-30T13:17:04Z",
      "side": 1,
      "message": "I think _required should be the default behaviour for NS world. The only case I think _required is not needed for NS is perhaps during platform bring up phase.\n\nSo perhaps , we need detect_required_arch_features_ns() which calls the _required versions of the features and panics. detect_required_arch_features_ns() can be called during NS world context setup().\n\nIdeally all features should have FEAT_XXX_NS which will enable exclusively NS world. WE can add that gradually later.",
      "parentUuid": "96462889_8f71803a",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4833f999_cbf91233",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-12-05T16:31:05Z",
      "side": 1,
      "message": "So I originally just added that new check into the existing function, but this becomes very trigger-happy. If you just build for PLAT\u003dfvp, for instance, without further compile-time options, this leaves A LOT of options disabled, and basically every run fails now. That makes this feature virtually unusable, especially since the first hit is already fatal, but further missing features are not reported. Fixing those up becomes very tedious (been there, done that). That\u0027s why I reduced that to the options that are really fatal for the non-secure world.\n\nNow I see several solutions:\n- This \"every feature is checked against 0\" becomes a separate build time option.\n- We keep reporting missing features, but only panic after we have finished the whole check.\n- We enable every feature by default (\u003d2). This is actually somewhat the goal, but we are not there yet.",
      "parentUuid": "ee260662_a332c026",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6eef4bb1_d7bead4a",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-12-07T11:16:00Z",
      "side": 1,
      "message": "\u003e So perhaps , we need detect_required_arch_features_ns() which calls the _required versions of the features and panics. detect_required_arch_features_ns() can be called during NS world context setup().\n\nIsn\u0027t the whole point of having this file here to let context setup not care about this?\n\n\u003e Now I see several solutions:\n\u003e * This \"every feature is checked against 0\" becomes a separate build time option.\n\u003e * We enable every feature by default (\u003d2). This is actually somewhat the goal, but we are not there yet.\n\nThe way I understand it we want the check against 0 and the default\u003d2 at the same time. But I think I see a compromise: As each flag gets converted to the new scheme, have it checked with _required and defaulted to 2 on fvp at the same time, while keeping the rest as is. So an unconverted flag will keep its global value of 0 and be unchecked. Nothing changes and the converted ones can silently work. Once all flags are converted, the _required function is absorbed into the default one.\n\nSo once this happens, all features will be converted, fvp will have set them all to 2s, and all other platforms will have all (default) 0s. Platforms set the features they use to 1 (except a couple of notable exceptions but they could probably default to 2 eventually) so they will be fine. If a platform blows up we found a bug, as the way I understand it we are aiming for a 1:1 mapping of hardware and software features everywhere.\n\nDoes this make sense? Am I missing something?\n\n\u003e * We keep reporting missing features, but only panic after we have finished the whole check.\nThis might be a nice QoL feature, but won\u0027t be strictly needed with the above.",
      "parentUuid": "4833f999_cbf91233",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0d26855_17c7259c",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-12-08T17:15:34Z",
      "side": 1,
      "message": "So my understanding is that detect_arch_features() is a pure debug function: For a fixed platform you would run it once, initially, during bringup, and maybe some times later to check for new features that TF-A learned meanwhile. For a given build the result would be constant, so there is no point in checking this for normal builds, not even in debug ones.\nIt\u0027s a different story for QEMU or the FVP, but it\u0027s still a debug feature, by design.\n@Soby: do you plan to promote this to something that\u0027s included in every build?\nI think there are legitimate reasons to disable certain features, and only some of them are fatal when EL3 initialisation is missed. Hence the selective nature of the _required() variant.",
      "parentUuid": "6eef4bb1_d7bead4a",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35097e0a_cdf1aaee",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-15T14:20:48Z",
      "side": 1,
      "message": "Hi Andre, \n\u003e We enable every feature by default (\u003d2). This is actually somewhat the goal, but we are not there yet.\n\nFor the FVPs , this is the path to take I think. Every feature should be dynamic for FVPs and QEMU (set via fvp makefile). so detect_required_arch_fetures_ns() will pass for FVP. Also perhaps the checks shouldn\u0027t panic() but rather print a WARNING on the console.  \n\nThis can then be enabled for DEBUG build for every platform (by default) . There might be some legal case to disable a feature, and it that case this diagnostic can be turned off by another config option (say DISABLE_REQ_FEATURE_CHECK)",
      "parentUuid": "f0d26855_17c7259c",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a0407f4_c695c8c7",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-11-28T10:38:55Z",
      "side": 1,
      "message": "not sure if intentional, but would this not be suitable to be moved to check_feature(_required) too?",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cb5d830_a0c86037",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-12-05T16:31:05Z",
      "side": 1,
      "message": "Do you mean the AMUv1p1 feature? *Every* feature will be converted over, but in separate patches. I have about seven of them already piled up as patches, but am waiting for this groundwork here to be agreed upon.",
      "parentUuid": "9a0407f4_c695c8c7",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c307ce9b_30d080fc",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-12-07T11:16:00Z",
      "side": 1,
      "message": "Alright, I though it belonged on this patchstack and was missed since there already are some AMU changes",
      "parentUuid": "2cb5d830_a0c86037",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}