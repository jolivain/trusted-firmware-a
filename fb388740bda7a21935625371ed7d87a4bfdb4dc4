{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96462889_8f71803a",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-11-28T10:38:55Z",
      "side": 1,
      "message": "Wouldn\u0027t it make sense for this to be _required too? Don\u0027t we want an exact match of features even if they are optional?",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee260662_a332c026",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-30T13:17:04Z",
      "side": 1,
      "message": "I think _required should be the default behaviour for NS world. The only case I think _required is not needed for NS is perhaps during platform bring up phase.\n\nSo perhaps , we need detect_required_arch_features_ns() which calls the _required versions of the features and panics. detect_required_arch_features_ns() can be called during NS world context setup().\n\nIdeally all features should have FEAT_XXX_NS which will enable exclusively NS world. WE can add that gradually later.",
      "parentUuid": "96462889_8f71803a",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4833f999_cbf91233",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-12-05T16:31:05Z",
      "side": 1,
      "message": "So I originally just added that new check into the existing function, but this becomes very trigger-happy. If you just build for PLAT\u003dfvp, for instance, without further compile-time options, this leaves A LOT of options disabled, and basically every run fails now. That makes this feature virtually unusable, especially since the first hit is already fatal, but further missing features are not reported. Fixing those up becomes very tedious (been there, done that). That\u0027s why I reduced that to the options that are really fatal for the non-secure world.\n\nNow I see several solutions:\n- This \"every feature is checked against 0\" becomes a separate build time option.\n- We keep reporting missing features, but only panic after we have finished the whole check.\n- We enable every feature by default (\u003d2). This is actually somewhat the goal, but we are not there yet.",
      "parentUuid": "ee260662_a332c026",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a0407f4_c695c8c7",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-11-28T10:38:55Z",
      "side": 1,
      "message": "not sure if intentional, but would this not be suitable to be moved to check_feature(_required) too?",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cb5d830_a0c86037",
        "filename": "common/feat_detect.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-12-05T16:31:05Z",
      "side": 1,
      "message": "Do you mean the AMUv1p1 feature? *Every* feature will be converted over, but in separate patches. I have about seven of them already piled up as patches, but am waiting for this groundwork here to be agreed upon.",
      "parentUuid": "9a0407f4_c695c8c7",
      "revId": "fb388740bda7a21935625371ed7d87a4bfdb4dc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}