{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "14a63f16_03391800",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1015,
      "author": {
        "id": 1000750
      },
      "writtenOn": "2022-08-29T22:22:47Z",
      "side": 1,
      "message": "As far as I can see, psci_is_last_on_cpu() is a boolean function. Wouldn\u0027t it be better to just ask if !psci_is_last_on_cpu() instead?",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faa9a105_7e86ebac",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1015,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-08-31T13:55:11Z",
      "side": 1,
      "message": "Yes. That\u0027s feasible. As the return type of the existing function was an unsigned int, it prompted me to check in this manner.\nI will modify it.",
      "parentUuid": "14a63f16_03391800",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b135aa2c_d8bc71a2",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1019,
      "author": {
        "id": 1000750
      },
      "writtenOn": "2022-08-29T22:22:47Z",
      "side": 1,
      "message": "Same here.",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "873663e2_f2ad75d1",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1019,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-08-31T13:55:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b135aa2c_d8bc71a2",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ee801ff_97eaee0e",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1047,
      "author": {
        "id": 1000750
      },
      "writtenOn": "2022-08-29T22:22:47Z",
      "side": 1,
      "message": "Performance-wise thinking, maybe it is a good idea to ask if psci_is_last_on_cpu() before entering the loop, as this function contains a loop too. Maybe it needs a little more work, but it would save some time.",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a75401b_64678723",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1047,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-09-01T19:19:26Z",
      "side": 1,
      "message": "Sorry, didn\u0027t completely get your thoughts here.\n\nAre you intending to call psci_is_last_on_cpu() before the while_loop() ?\n\nAs far as I see, in psci_is_last_on_cpu_safe function, they are traversing the forest, (ideally he is checking only the root node and utilising its properties to find the cpu_power_nodes, via ncpus paramter. (psci_non_cpu_pd_nodes[i].ncpus)\n\nLets take FVP as an example, its has one root node and the root node staruct has this values ( psci_non_cpu_pd_nodes[i].ncpus\u003d8, psci_non_cpu_pd_nodes[i].parentnode\u003d-1)\n\nSo in this case, while runs for the first iteration only(i\u003d0), as for i\u003d1 there are parent nodes.\n\nSo utilising this, this API locks all the cpu_power_domains which is nothing but the real core_count {\u003d8}\n\nThen we are trying to check whether all the cores are turned off or not, using the first api.\n\nCorrect me, if there is anything missing here.",
      "parentUuid": "0ee801ff_97eaee0e",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c79f1ad7_afebbabe",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1047,
      "author": {
        "id": 1000750
      },
      "writtenOn": "2022-09-02T22:12:47Z",
      "side": 1,
      "message": "Nevermind. I thought that there was a way you could check all CPUs without iterating on clusters.",
      "parentUuid": "4a75401b_64678723",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22052791_e81208ff",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1056,
      "author": {
        "id": 1000750
      },
      "writtenOn": "2022-08-29T22:22:47Z",
      "side": 1,
      "message": "Why is this variable updated here? Isn\u0027t the number of cores a fixed value? Shouldn\u0027t this variable be set during initialization instead?",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f9ac506_14705ca9",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1056,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-09-01T19:19:26Z",
      "side": 1,
      "message": "Well, the intention is to reuse the psci_is_last_on_cpu api in psci_is_last_on_cpu_safe.\n\nSo, originally psci_is_last_on_cpu api, was looping under the control of this variable.So I thought of updating it here.\nBut its a global one, so instead of that, I have modified the psci_is_last_on_cpu( ) to accept the paramter core_count and loop for it.",
      "parentUuid": "22052791_e81208ff",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1194500f_6c633b92",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1056,
      "author": {
        "id": 1000750
      },
      "writtenOn": "2022-09-02T22:12:47Z",
      "side": 1,
      "message": "Yeah. This approach seems much better :)\n\nHowever, I see that psci_is_last_on_cpu() iterates only on the CPUs for the current cluster/domain, but if you want to check for the CPUs on another cluster/domain, you don\u0027t have that input. Shouldn\u0027t you have a parameter to indicate the domain for which you want to iterate on its CPUs?",
      "parentUuid": "7f9ac506_14705ca9",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d251082d_dc7435cf",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1058,
      "author": {
        "id": 1000750
      },
      "writtenOn": "2022-08-29T22:22:47Z",
      "side": 1,
      "message": "Boolean check here too.\nAlso, how do you ensure that psci_is_last_on_cpu() does only check for CPUs that belong to domain i? As far as I can see, it would check from 0 to psci_plat_core_count - 1 for every domain. Is that correct?",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea6459ad_1a898bf6",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1058,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-09-01T19:19:26Z",
      "side": 1,
      "message": "Boolean check here too : \n\u003e Done\n\nhow do you ensure that psci_is_last_on_cpu() does only check for CPUs that belong to domain \n\u003e Not sure, what you exactly referred here.\nThis api, takes the total number of cores present in the system, and checks whether all of them are turned OFF or not, except the one which called it.\n\nEg: for FVP platform, we have two clusters, and each cluster contains 4 cpus per cluster.\n#define PLATFORM_CORE_COUNT  (U(FVP_CLUSTER_COUNT) * U(FVP_MAX_CPUS_PER_CLUSTER) * U(FVP_MAX_PE_PER_CPU))\n\nPLATFORM_CORE_COUNT \u003d 8 \nSo here it checks for all 8 cores.",
      "parentUuid": "d251082d_dc7435cf",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11088bed_91eb14c9",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1058,
      "author": {
        "id": 1000750
      },
      "writtenOn": "2022-09-02T22:12:47Z",
      "side": 1,
      "message": "OK. I think that I understand now. So the i variable is used to iterate on clusters, and then for each cluster you have psci_non_cpu_pd_nodes[i].ncpus CPUs, numbered from 0 to psci_non_cpu_pd_nodes[i].ncpus - 1, correct?",
      "parentUuid": "ea6459ad_1a898bf6",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dafcc90_5ddf7a15",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 1058,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-09-05T15:54:58Z",
      "side": 1,
      "message": "Yes. Clusters / Forest. In case of FVP we have only one and hence the while loops only once.",
      "parentUuid": "11088bed_91eb14c9",
      "revId": "b651cd4c2fa9957dfe76cd9562ee7e4f088517d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}