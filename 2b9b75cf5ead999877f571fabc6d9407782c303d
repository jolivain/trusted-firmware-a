{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2a6946c0_7ea69efc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-04-03T13:12:43Z",
      "side": 1,
      "message": "Overall LGTM.\nSome minor comments. \n\nAlso if its feasible, kindly add few details in the commit message. Regsiters under the influence of features, not a major concern.  The ones which aren\u0027t may be a little info on them would be helpful.",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "157e0aef_32fc53c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-04-03T16:52:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a6946c0_7ea69efc",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6796845_786c8366",
        "filename": "include/arch/aarch64/arch.h",
        "patchSetId": 2
      },
      "lineNbr": 1438,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-04-03T13:12:43Z",
      "side": 1,
      "message": "nit: Registers",
      "range": {
        "startLine": 1438,
        "startChar": 44,
        "endLine": 1438,
        "endChar": 52
      },
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbe80720_b0fa1ba8",
        "filename": "include/arch/aarch64/arch.h",
        "patchSetId": 2
      },
      "lineNbr": 1438,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-04-03T16:52:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6796845_786c8366",
      "range": {
        "startLine": 1438,
        "startChar": 44,
        "endLine": 1438,
        "endChar": 52
      },
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "012856f2_660b8acf",
        "filename": "include/arch/aarch64/arch.h",
        "patchSetId": 2
      },
      "lineNbr": 1444,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-04-03T13:12:43Z",
      "side": 1,
      "message": "please add ``registers`` at the end here.",
      "range": {
        "startLine": 1444,
        "startChar": 30,
        "endLine": 1444,
        "endChar": 37
      },
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d330ed5_6c091e5a",
        "filename": "include/arch/aarch64/arch.h",
        "patchSetId": 2
      },
      "lineNbr": 1444,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-04-03T16:52:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "012856f2_660b8acf",
      "range": {
        "startLine": 1444,
        "startChar": 30,
        "endLine": 1444,
        "endChar": 37
      },
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb221907_ba9cbc6c",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-04-03T13:12:43Z",
      "side": 1,
      "message": "I guess, you are adding #if check on top of if(feat_supported()) to get through the build failures as macros in context.h are conditionally guarded under the build flags. But the checks are redundant, as the if(___supported()) api does the same check but it covers STATE\u003d2 as well.\n\nFrom the memory perspective, its good that we add context entries under build flags in context.h file.\nBut with this there is an additional overhead to again use the build flags in the .c file as well.\n\nFYI :As part of EL2 refactor, we got rid of #ifs in .c file.\n( https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/26416 )\n\nSince this is not a refactor patch, I am ok with either having just \n```\n#if ENABLE_FEAT_RAS\nwrite_ctx_reg(ctx, CTX_DISR_EL1, read_disr_el1());\n#endif \n```\nand have an explicit refactor patch for all EL1 registers. \nLet me know your thoughts. If you prefer to have both the checks #if and if() as part of this patch.\n\nThe other possible option is to include the context entries unconditionally in the context.h file, which would allow us to get rid of #if checks here.",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a6e87c_bc534ede",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-04-03T16:52:31Z",
      "side": 1,
      "message": "Hi Jayanth,\n\nThanks a lot for the feedback. I myself had the same concern. In fact, I had implemented my initial versions of the patch the way you are suggesting.\n\nHowever, I ran into several issues including build errors. Since ENABLE_FEAT_RAS is a special case (as it does not accept a value of 2), I would like to take ENABLE_FEAT_S1POE as an example for our discussion.\n\nSince memory is one of the most important constraint for TF-A, I would like to keep the context entries under the build flags in context.h file.\n\nIn my analysis, I came to conclusion that both `#if` guard as well as `if(__supported())` condition is necessary. Consider the following styles:\n\nstyle_1:\n`#if ENABLE_FEAT_S1POE`\n\t`write_ctx_reg(ctx, CTX_POR_EL1, read_por_el1());`\n`#endif`\n\nstyle_2:\n`if (is_feat_s1poe_supported()) {`\n\t`write_ctx_reg(ctx, CTX_POR_EL1, read_por_el1());`\n`}`\n\nstyle_3:\n`#if ENABLE_FEAT_S1POE`\n`        if (is_feat_s1poe_supported()) {`\n\t\t`write_ctx_reg(ctx, CTX_POR_EL1, read_por_el1());`\n\t`}`\n`#endif`\n\nAs you already know, Style_1 cannot be used since platforms like FVP need to dynamically detect the presence of a specific feature before writing to them.\n\nStyle_2 is what everyone would like to work with. However, there is a limitation with compiler. Though the api checks for a values 0,1 and 2, the compiler actually does not optimize the instructions underneath it. What I mean is if ENABLE_FEAT_S1POE is 0, we expect the compiler to drop the statement write_ctx_reg(....) from final build. However, this does not happen leading to build errors.\n\nThe way EL2 registers were able to get around is by redefining the macro write_ctx_reg altogether in the patch you mentioned. i.e. #if guard is still used but just in a different file. I am aware you already know this but I just mentioned for the benefit of anyone else who might refer to this conversation.\n\nThat leaves us with style_3 which is functionally identical to the way EL2 registers are managed currently. This is why I felt that the additional overhead of using `#if` guards is justified.\n\nPlease let me know your thoughts. I am more than happy to make any improvements you suggest.",
      "parentUuid": "fb221907_ba9cbc6c",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39b9753b_933be8f3",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-04-03T17:04:36Z",
      "side": 1,
      "message": "Yes, You are right. \n\nStyle 2  is the preferred one as far as concerned with context entries. I faced the same issues with EL2 registers and finally got rid of them by having an #else in .h file. The only reasoning here is to limit the use of #ifs in .c file. Other than this functionality wise patch is good. Also, memory is another crucial factor.\n\nIts better to have a proper c struct for EL1 registers as well, as we have for EL2.\n\nSince the aim of this patch is to add new registers, I am happy with style3, which will assist us in build.\n\nLater on, as a separate patch, we could address this part(converting to c struct).",
      "parentUuid": "88a6e87c_bc534ede",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d4c1734_45dcc653",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-04-03T18:40:11Z",
      "side": 1,
      "message": "Agreed that we can take the improvement task in another iteration. I plan to add more registers to EL1 context.\n\nI will keep the comment open to serve as a reminder for the improvement task.",
      "parentUuid": "39b9753b_933be8f3",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5ce0264_09b6891f",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-04-04T08:03:40Z",
      "side": 1,
      "message": "Sounds good to me.",
      "parentUuid": "4d4c1734_45dcc653",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72808ae7_7e1d8e39",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-04-05T15:49:30Z",
      "side": 1,
      "message": "Closing the comment as there now exists an internal jira task to track it.",
      "parentUuid": "e5ce0264_09b6891f",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12b9fced_9a5d629d",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 1580,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-04-03T13:12:43Z",
      "side": 1,
      "message": "nit: remove this empty line",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20ed9957_7bd10b8a",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 1580,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-04-03T16:52:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12b9fced_9a5d629d",
      "revId": "2b9b75cf5ead999877f571fabc6d9407782c303d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}