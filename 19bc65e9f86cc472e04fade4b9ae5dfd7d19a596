{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1e7dfa99_740653e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-25T11:22:37Z",
      "side": 1,
      "message": "I am still trying to get my head around this and I suspect we might need some more discussion.\n\nAbout this:\n\u003e To address this issue, I created this patch. While I acknowledge that this may not be the ideal solution, it can serve as a temporary measure until we have a more permanent resolution.\n\nI agree that we need a solution quickly, as the CI has been broken for 3 days already because of this issue. But I\u0027d rather revert Lauren\u0027s patch - the one which hardens the TF_MBEDTLS_* macros and caused the build failue NXP platfom - rather than accepting a temporary change I\u0027m not comfortable with.",
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "defde35f_dc360ba0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-26T07:52:05Z",
      "side": 1,
      "message": "I am now happy with the general approach proposed in this patch. I just have one suggestion which would make the fix more logical in my view.",
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b4e9491_525acff8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-27T12:10:22Z",
      "side": 1,
      "message": "Resolved. See discussion in comments.",
      "parentUuid": "1e7dfa99_740653e3",
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc29e1e7_d977a06c",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-24T08:04:23Z",
      "side": 1,
      "message": "Guarding this under `#ifdef MBEDTLS_CONFIG_FILE` does not sound right to me... `cot_def.h` provides definitions for the TBBR chain of trust, which ideally should be independent of which cryptographic library people use. Conceptually, none of `COT_MAX_VERIFIED_PARAMS`, `PK_DER_LEN` or `HASH_DER_LEN` macros have anything to do with Mbed TLS.\n\nBesides, `PK_DER_LEN` is one of the mandatory macros for using the TBBR CoT. If it doesn\u0027t get defined then the code in `drivers/auth/tbbr/` simply won\u0027t build successfully. So I think `cot_def.h` ought to define `PK_DER_LEN` all the time, and not only under some preprocessor condition.\n\nAFAIU, NXP platform uses a hybrid approach which does not quite fit into the mould... It has its own platform-specific CoT defined in `drivers/nxp/auth/`, which is perfectly fine. This CoT looks to be originally derived from the official TBBR CoT but from the moment it\u0027s been copied into the platform folder and forked, it\u0027s no longer *the* TBBR CoT. Thus, NXP CoT should not pull in `include/common/tbbr/cot_def.h`.\n\nI suggest we leave `cot_def.h` unmodified and we rather handle this issue within NXP platform itself by:\n- not including `cot_def.h` from `drivers/nxp/auth/tbbr/tbbr_cot.c`.\n- defining `PK_DER_LEN` and `COT_MAX_VERIFIED_PARAMS` inside `drivers/nxp/auth/tbbr/tbbr_cot.c`. Note that `HASH_DER_LEN` is already defined there.\n\n[1] https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/drivers/nxp/auth/tbbr/tbbr_cot.c#n21",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 26
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f07dafef_5ca155e1",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-25T08:30:04Z",
      "side": 1,
      "message": "\u003e Guarding this under #ifdef MBEDTLS_CONFIG_FILE does not sound right to me... cot_def.h provides definitions for the TBBR chain of trust, which ideally should be independent of which cryptographic library people use.\n\nI considered this, but it appears that cot_def.h has a significant dependancy on the mbedtls_config header.\n\n\u003e  Conceptually, none of COT_MAX_VERIFIED_PARAMS, PK_DER_LEN or HASH_DER_LEN macros have anything to do with Mbed TLS.\n\nYou are correct in noting that these definitions are unrelated to mbedTLS. However, to configure them correctly, certain mbedTLS settings, such as TF_MBEDTLS_USE_RSA or TF_MBEDTLS_USE_ECDSA, are needed, even though this may seem unconventional. It appears that some cleanup of cot_def.h may be necessary, but during the initial resolution of the Coverity failure, I didn\u0027t invest much effort in that aspect.\n\n\u003e Besides, PK_DER_LEN is one of the mandatory macros for using the TBBR CoT. If it doesn\u0027t get defined then the code in drivers/auth/tbbr/ simply won\u0027t build successfully. So I think cot_def.h ought to define PK_DER_LEN all the time, and not only under some preprocessor condition.\n\nIndeed, this is the case. To ensure the correct definition of these parameters, all partners are configuring the TF_MBEDTLS_USE_* options accurately, using either the default mbedTLS configuration or platform-specific mbedTLS configuration [1], [2], and [3].\n\n\u003e AFAIU, NXP platform uses a hybrid approach which does not quite fit into the mould... It has its own platform-specific CoT defined in drivers/nxp/auth/, which is perfectly fine. This CoT looks to be originally derived from the official TBBR CoT but from the moment it\u0027s been copied into the platform folder and forked, it\u0027s no longer the TBBR CoT. Thus, NXP CoT should not pull in include/common/tbbr/cot_def.h.\n\nIf you examine the NXP Trusted Boot case without mbedTLS [4], [5], you\u0027ll notice that the auth_mod.c file is being included without tbbr_cot.c. Unfortunately, auth_mod.c relies on certain definitions from cot_def.h, and this leads to an error that we are encountering due to the inclusion of cot_def.h in the auth_mod.c file. To address this issue, I created this patch. While I acknowledge that this may not be the ideal solution, it can serve as a temporary measure until we have a more permanent resolution.\n\n\u003e I suggest we leave cot_def.h unmodified and we rather handle this issue within NXP platform itself by:\n\n\u003e * not including cot_def.h from drivers/nxp/auth/tbbr/tbbr_cot.c.\n\ntbbr_cot.c not get compiled in case of building Trusted Boot without mbedTLS support for NXP platform so I don\u0027t think this solution will work.\n\n\u003e * defining PK_DER_LEN and COT_MAX_VERIFIED_PARAMS inside drivers/nxp/auth/tbbr/tbbr_cot.c. Note that HASH_DER_LEN is already defined there.\n\ntbbr_cot.c is compiled when Trusted Boot with mbedTLS support is enabled for the NXP platform. Consequently, the definitions PK_DER_LEN, COT_MAX_VERIFIED_PARAMS, and HASH_DER_LEN are appropriately configured via the cot_def.h file. Regarding the HASH_DER_LEN redefinitions in the tbbr_cot.c file, it seems unnecessary. We\u0027re not currently experiencing any build issues since these definitions are set to the same values in tbbr_cot.c.\n\nPlease let me know your thoughts?\n\n[1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/include/drivers/auth/mbedtls/mbedtls_config-2.h#n16\n[2]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/include/drivers/auth/mbedtls/mbedtls_config-3.h#n20\n[3]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/st/common/include/stm32mp_mbedtls_config-3.h#n10\n[4]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/nxp/common/tbbr/tbbr.mk#n64 \n[5]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/nxp/common/tbbr/tbbr.mk#n149",
      "parentUuid": "cc29e1e7_d977a06c",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 26
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e26e47e3_0b36905b",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-25T13:03:57Z",
      "side": 1,
      "message": "Thanks for the detailed explanation, I think I understand better now.\n\nI agree with you, we need to do some cleanup in `cot_def.h` and other header files to disentangle mbedTLS from CoT definitions. Unfortunately the current situation is quite messy... Perhaps `cot_def.h` ultimately should rely on `KEY_SIZE`, `KEY_ALG` and `HASH_ALG` variables, instead of the mbedtls-specific `TF_MBEDTLS_*` macros... Anyway, that\u0027s a discussion for the future.\n\nIn the meantime, I agree we need a temporary workaround. Confining it to NXP platform layer might be preferable to any generic file hack. We could handle that from NXP makefile using the following patch:\n\n```\ndiff --git a/plat/nxp/common/tbbr/tbbr.mk b/plat/nxp/common/tbbr/tbbr.mk\nindex 4aac9d634..e2cd28304 100644\n--- a/plat/nxp/common/tbbr/tbbr.mk\n+++ b/plat/nxp/common/tbbr/tbbr.mk\n@@ -67,6 +67,11 @@ ifeq (${MBEDTLS_DIR},)\n     include $(PLAT_DRIVERS_PATH)/auth/csf_hdr_parser/csf_hdr.mk\n     PLAT_TBBR_SOURCES  +\u003d      $(CSF_HDR_SOURCES)\n \n+    # Hack: cot_def.h has a strong dependency on Mbed TLS library and requires\n+    # TF_MBEDTLS_KEY_SIZE to be defined.\n+    TF_MBEDTLS_KEY_SIZE        :\u003d      256\n+    $(eval $(call add_define,TF_MBEDTLS_KEY_SIZE))\n+\n     SCP_BL2_PRE_TOOL_FILTER    :\u003d CST_SCP_BL2\n     BL31_PRE_TOOL_FILTER       :\u003d CST_BL31\n     BL32_PRE_TOOL_FILTER       :\u003d CST_BL32\n```\n\nWe could achieve something equivalent with CI scripts changes. Adding `CFLAGS\u003d\u0027-DTF_MBEDTLS_KEY_SIZE\u003d256\u0027` would work just as well but NXP would have to edit their own build scripts as well, which might be too much of an ask...\n\nI think I\u0027d prefer one of these 2 temporary solutions. It sounds less invasive to me. Let\u0027s propose such a patch to NXP and see what they say.\n\nIf they don\u0027t accept it, then I would lean towards reverting the \"Invalid value for TF_MBEDTLS_KEY_SIZE\" error message from `cot_def.h` until we\u0027ve done the necessary cleanups in the header files.",
      "parentUuid": "f07dafef_5ca155e1",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 26
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb825bb7_5a5c1a43",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-25T13:34:54Z",
      "side": 1,
      "message": "\u003e In the meantime, I agree we need a temporary workaround. Confining it to NXP \nplatform layer might be preferable to any generic file hack. We could handle that from NXP makefile using the following patch:\n\n``` \ndiff --git a/plat/nxp/common/tbbr/tbbr.mk b/plat/nxp/common/tbbr/tbbr.mk\nindex 4aac9d634..e2cd28304 100644\n--- a/plat/nxp/common/tbbr/tbbr.mk\n+++ b/plat/nxp/common/tbbr/tbbr.mk\n@@ -67,6 +67,11 @@ ifeq (${MBEDTLS_DIR},)\n     include $(PLAT_DRIVERS_PATH)/auth/csf_hdr_parser/csf_hdr.mk\n     PLAT_TBBR_SOURCES  +\u003d      $(CSF_HDR_SOURCES)\n\n+    # Hack: cot_def.h has a strong dependency on Mbed TLS library and requires\n+    # TF_MBEDTLS_KEY_SIZE to be defined.\n+    TF_MBEDTLS_KEY_SIZE        :\u003d      256\n+    $(eval $(call add_define,TF_MBEDTLS_KEY_SIZE))\n+\n     SCP_BL2_PRE_TOOL_FILTER    :\u003d CST_SCP_BL2\n     BL31_PRE_TOOL_FILTER       :\u003d CST_BL31\n     BL32_PRE_TOOL_FILTER       :\u003d CST_BL32\n```\n\n\u003e We could achieve something equivalent with CI scripts changes. Adding CFLAGS\u003d\u0027-DTF_MBEDTLS_KEY_SIZE\u003d256\u0027 would work just as well but NXP would have to edit their own build scripts as well, which might be too much of an ask...\n\nIMO, passing mbedTLS configurations even without mbedTLS support appears less than ideal compared to the current temporary workaround provided by the patch.\n\n\u003e If they don\u0027t accept it, then I would lean towards reverting the \"Invalid value for TF_MBEDTLS_KEY_SIZE\" error message from cot_def.h until we\u0027ve done the necessary cleanups in the header files.\n\nInstead of reverting the correct patch, we should proceed with this temporary workaround. It is non-invasive and aligns with the current cot_def.h implementation.",
      "parentUuid": "e26e47e3_0b36905b",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 26
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1604d01_ea7355c2",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-26T07:52:05Z",
      "side": 1,
      "message": "OK, fair enough.",
      "parentUuid": "bb825bb7_5a5c1a43",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 26
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f91ce33c_58855509",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-24T08:04:23Z",
      "side": 1,
      "message": "This change looks unrelated. Better to pull it into a separate patch, as a general hardening improvement.",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 63,
        "endChar": 31
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bceeb2d3_db595dc5",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-25T08:30:04Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "f91ce33c_58855509",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 63,
        "endChar": 31
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8a0f02b_4d7fdd33",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-26T11:15:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bceeb2d3_db595dc5",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 63,
        "endChar": 31
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "700dd590_f7d81466",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-26T07:52:05Z",
      "side": 1,
      "message": "It would make sense to enclose these lines in the `#ifdef MBEDTLS_CONFIG_FILE` block as well, even though they are not causing any build issues at this time.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 74,
        "endChar": 6
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f24e1fe2_df592862",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-26T08:40:01Z",
      "side": 1,
      "message": "Agree, let me guard these line under `MBEDTLS_CONFIG_FILE`",
      "parentUuid": "700dd590_f7d81466",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 74,
        "endChar": 6
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "315fce37_c45b7e5e",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-26T11:15:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f24e1fe2_df592862",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 74,
        "endChar": 6
      },
      "revId": "19bc65e9f86cc472e04fade4b9ae5dfd7d19a596",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}