{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a25d57b1_89180052",
        "filename": "bl1/bl1_main.c",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-03T11:13:42Z",
      "side": 1,
      "message": "I think it would be better if we unconditionally call auth_mod_init() here, i.e. without any #if. We can have the #if in the body of auth_mod_init() instead - we already have some of it anyway. This would reduce the number of #if overall and improve readability IMHO.",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5652020_86236d74",
        "filename": "bl1/bl1_main.c",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-03T18:28:42Z",
      "side": 1,
      "message": "Ack, currently \u0027TRUSTED_BOARD_BOOT\u0027 guards all defns and declarations inside the auth_mod.h that also need to be removed.",
      "parentUuid": "a25d57b1_89180052",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3cf9f09_3c6c1f43",
        "filename": "bl1/bl1_main.c",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-04T08:14:54Z",
      "side": 1,
      "message": "Instead of doing any changes in auth_mod.c, can we handle it like below in auth_mod.h?\n\n  +#if TRUSTED_BOARD_BOOT\n   void auth_mod_init(void);\n  +#else\n  +static inline void auth_mod_init(void)\n  +{\n  +        return;\n  +}\n  +#endif /* TRUSTED_BOARD_BOOT */",
      "parentUuid": "f5652020_86236d74",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e13bbecb_53cd70a6",
        "filename": "bl2/bl2_main.c",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-03T11:13:42Z",
      "side": 1,
      "message": "Same comment as in bl1_main.c.",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "941fc03f_a942c33a",
        "filename": "bl2/bl2_main.c",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-03T18:28:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e13bbecb_53cd70a6",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de1d50e6_56a34346",
        "filename": "common/bl_common.c",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-03T11:13:42Z",
      "side": 1,
      "message": "I don\u0027t think we need this #if MEASURED_BOOT. plat_mboot_measure_image() is defined for both MEASURED_BOOT and !MEASURED_BOOT configs (platform.h provides an empty implementation of it in the latter case).",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 17
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ec41ba8_c134d5cb",
        "filename": "common/bl_common.c",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-03T18:28:42Z",
      "side": 1,
      "message": "Ah, right!",
      "parentUuid": "de1d50e6_56a34346",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 17
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d4b42db_c6297b60",
        "filename": "common/bl_common.c",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-04T08:14:54Z",
      "side": 1,
      "message": "I don\u0027t think this is needed anyways as we are aiming towards removing #ifdery.",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 173,
        "endChar": 22
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5b90e17_7b211a0a",
        "filename": "common/bl_common.c",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-03T11:13:42Z",
      "side": 1,
      "message": "Same comment as above.",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 215,
        "endChar": 17
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "328dae26_9059e06b",
        "filename": "common/bl_common.c",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-04T08:14:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e5b90e17_7b211a0a",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 215,
        "endChar": 17
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "698a1b54_c88d7a9f",
        "filename": "common/bl_common.c",
        "patchSetId": 1
      },
      "lineNbr": 253,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-03T11:13:42Z",
      "side": 1,
      "message": "Can we measure the image in load_auth_image_internal(), instead of doing it in both load_auth_image_recursive() for trusted boot configs and load_image_flush() for non-trusted boot configs? This would reduce the amount of code that is specific to each build config.\n\nThat being said, I think this suggestion only works if we don\u0027t recursively measure parent images, which is the case today (see line 213). If we want to change this behaviour in the near future then we will need to keep the measurement operation in both functions, like you did.\n\nI don\u0027t remember very well... at the last Tech forum call, did we say we should also measure certificates?",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 253,
        "endChar": 1
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33810f58_5fbd9d68",
        "filename": "common/bl_common.c",
        "patchSetId": 1
      },
      "lineNbr": 253,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-04T08:14:54Z",
      "side": 1,
      "message": "\u003e Can we measure the image in load_auth_image_internal(), instead of doing it in both load_auth_image_recursive() for trusted boot configs and load_image_flush() for non-trusted boot configs? This would reduce the amount of code that is specific to each build config.\n\u003e \n\u003e That being said, I think this suggestion only works if we don\u0027t recursively measure parent images, which is the case today (see line 213). If we want to change this behaviour in the near future then we will need to keep the measurement operation in both functions, like you did.\n\nOkay, let me do the necessary changes to measure the image inside \u0027load_auth_image_internal\u0027 in both trusted and non-trusted boot configs.\n\n\u003e \n\u003e I don\u0027t remember very well... at the last Tech forum call, did we say we should also measure certificates?\n\nYes, we decided not to measure the certificates containing hash information IIRC. \nCurrently, we don\u0027t have certificates that contain specific data to be measured, but I believe the measurement of such certificates can be handled similar to the data images.",
      "parentUuid": "698a1b54_c88d7a9f",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 253,
        "endChar": 1
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df2507cb_55541a3c",
        "filename": "drivers/auth/auth_mod.c",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-03T11:13:42Z",
      "side": 1,
      "message": "Following up on my comment in bl1/bl2_main.c, I am suggesting we modify the code like this:\n\n void auth_mod_init(void)\n {\n #if TRUSTED_BOARD_BOOT\n\t/* Check we have a valid CoT registered */\n\tassert(cot_desc_ptr !\u003d NULL);\n\n\t/* Image parser module */\n\timg_parser_init();\n #endif /* TRUSTED_BOARD_BOOT */\n\n #if TRUSTED_BOARD_BOOT || MEASURED_BOOT\n\t/* Crypto module */\n\tcrypto_mod_init();\n #endif\n }",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 349,
        "endChar": 1
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "883347d4_af835163",
        "filename": "drivers/auth/auth_mod.c",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-03T18:28:42Z",
      "side": 1,
      "message": "As discussed elsewhere, let\u0027s not modify this file, instead invoke \u0027crypto_mod_init\u0027 from BL1 and BL2 main directly.",
      "parentUuid": "df2507cb_55541a3c",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 349,
        "endChar": 1
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc4e0698_e1256450",
        "filename": "drivers/auth/auth_mod.c",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-03T18:45:26Z",
      "side": 1,
      "message": "I mean, we only need to remove \u0027crypto_mod_init\u0027 call from this function and guard img_parser_init as you mentioned. Ideally, this file should not contain any Measured-Boot related changes.",
      "parentUuid": "883347d4_af835163",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 349,
        "endChar": 1
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "167415cf_c270ce18",
        "filename": "include/drivers/auth/auth_mod.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-03T11:13:42Z",
      "side": 1,
      "message": "Could you please elaborate on why we need this change? If you don\u0027t make that change, I am assuming that you get some compilation errors due to the measured boot code needing some definitions in this file... which ones? \n\nI am a bit confused because AFAIK, measured boot does not involve any authentication. It only requires a hash function and auth_mod.h does not seem like the file that provides such a hash function definition. So I am wondering if some other file should be pulled in by the measured boot code.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "387b8604_4bc3f572",
        "filename": "include/drivers/auth/auth_mod.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-03T12:53:06Z",
      "side": 1,
      "message": "Thinking about it further, I suspect we just want to pull in the definition of auth_mod_init(). When measured boot is enabled on its own (i.e. no trusted boot in the picture), we still need to call auth_mod_init() to initialize the crypto module.\n\nThinking about it, auth_mod_init() sounds kind of a bad name to me now... It used to make sense when there was only trusted boot because trusted boot is mostly about authenticating images. Now I think it looks weird to call this function for measured boot, which only cares about calculating hashes and not checking hashes/signatures.\n\nPerhaps we should restructure this code. For example, we could call crypto_mod_init() directly from within bl1/bl2_main() and then have a trusted_boot_init() for the image parser initialization? bl2_main() for example would have the following call sequence:\n\n crypto_mod_init();\n trusted_boot_init();\n bl2_plat_mboot_init();\n\nAny thoughts?",
      "parentUuid": "167415cf_c270ce18",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cb8d0b3_b6852c5f",
        "filename": "include/drivers/auth/auth_mod.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-03T18:28:42Z",
      "side": 1,
      "message": "\u003e Thinking about it further, I suspect we just want to pull in the definition of auth_mod_init(). When measured boot is enabled on its own (i.e. no trusted boot in the picture), we still need to call auth_mod_init() to initialize the crypto module.\n\nYes, this is the only reason I guarded this file under both TRUSTED_BOARD_BOOT and MEASURED_BOOT flag. I think it make sense to remove both guards to call auth_mod_init unconditionally from BL1 and BL2 (bl1/bl2_main.c) common code.\n\n\u003e \n\u003e Thinking about it, auth_mod_init() sounds kind of a bad name to me now... It used to make sense when there was only trusted boot because trusted boot is mostly about authenticating images. Now I think it looks weird to call this function for measured boot, which only cares about calculating hashes and not checking hashes/signatures.\n\u003e \n\u003e Perhaps we should restructure this code. For example, we could call crypto_mod_init() directly from within bl1/bl2_main() and then have a trusted_boot_init() for the image parser initialization? bl2_main() for example would have the following call sequence:\n\u003e \n\u003e  crypto_mod_init();\n\nIt makes sense. Initially tried this way but then observed that Renesas platform support Trusted board boot without Crypto module hence avoided bringing this function call in common layer. If you agree then we can update the declaration of this function in crypto_mod.h as below and then call it in bl1/bl2_main as you suggested.\n\n    #if CRYPTO_SUPPORT /* set only when TRUSTED_BOARD_BOOT or MEASURED_BOOT enabled */\n    void crypto_mod_init(void);\n    #else\n    static inline void crypto_mod_init(void)\n    {\n        return;\n    }\n    #endif /* CRYPTO_SUPPORT */\n\nAlso, crypto_mod.h resides in auth/ folder that looks odd as Measured Boot needs Crypto supports without authentication. Can we take out crypto_mod.h from auth folder?\n\n\u003e  trusted_boot_init();\n\ns/auth_mod_init/trusted_boot_init needs more changes in the code. We need to update the documentation wherever auth_mod_init is referred. Few platforms for e.g Renesas have their own implementation of auth_mod_init [1], that also need to be updated. \nAuthentication is the purpose of trusted board boot anyways, and function name auth_mod_init is aligned to a auth_mod.c file. IMHO better retain the function name as \u0027auth_mod_init\u0027 only. Let me know what do you think?\n\n[1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/drivers/renesas/common/auth/auth_mod.c#n138\n\n\u003e  bl2_plat_mboot_init();\n\u003e \n\u003e Any thoughts?",
      "parentUuid": "387b8604_4bc3f572",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3903393_e225af56",
        "filename": "include/drivers/auth/auth_mod.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-01-04T09:18:18Z",
      "side": 1,
      "message": "\u003e It makes sense. Initially tried this way but then observed that Renesas platform support Trusted board boot without Crypto module hence avoided bringing this function call in common layer.\n\nAh, good catch about the Renesas platform port!\n\n\u003e If you agree then we can update the declaration of this function in crypto_mod.h as below and then call it in bl1/bl2_main as you suggested.\n\u003e \n\u003e     #if CRYPTO_SUPPORT /* set only when TRUSTED_BOARD_BOOT or MEASURED_BOOT enabled */\n\u003e     void crypto_mod_init(void);\n\u003e     #else\n\u003e     static inline void crypto_mod_init(void)\n\u003e     {\n\u003e         return;\n\u003e     }\n\u003e     #endif /* CRYPTO_SUPPORT */\n\nAgree, sounds good to me.\n\n\u003e Also, crypto_mod.h resides in auth/ folder that looks odd as Measured Boot needs Crypto supports without authentication. Can we take out crypto_mod.h from auth folder?\n\nI guess we could, that makes sense to me. Where do you suggest we move it?\n\n\u003e \u003e  trusted_boot_init();\n\u003e \n\u003e s/auth_mod_init/trusted_boot_init needs more changes in the code. We need to update the documentation wherever auth_mod_init is referred. Few platforms for e.g Renesas have their own implementation of auth_mod_init [1], that also need to be updated. \n\u003e Authentication is the purpose of trusted board boot anyways, and function name auth_mod_init is aligned to a auth_mod.c file. IMHO better retain the function name as \u0027auth_mod_init\u0027 only. Let me know what do you think?\n\u003e \n\u003e [1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/drivers/renesas/common/auth/auth_mod.c#n138\n\nYes, I had not thought this through. I agree with you, let\u0027s stick with auth_mod_init().",
      "parentUuid": "1cb8d0b3_b6852c5f",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b826c6e_f1bed17c",
        "filename": "include/drivers/auth/auth_mod.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-04T10:35:59Z",
      "side": 1,
      "message": "\u003e \u003e It makes sense. Initially tried this way but then observed that Renesas platform support Trusted board boot without Crypto module hence avoided bringing this function call in common layer.\n\u003e \n\u003e Ah, good catch about the Renesas platform port!\n\u003e \n\u003e \u003e If you agree then we can update the declaration of this function in crypto_mod.h as below and then call it in bl1/bl2_main as you suggested.\n\u003e \u003e \n\u003e \u003e     #if CRYPTO_SUPPORT /* set only when TRUSTED_BOARD_BOOT or MEASURED_BOOT enabled */\n\u003e \u003e     void crypto_mod_init(void);\n\u003e \u003e     #else\n\u003e \u003e     static inline void crypto_mod_init(void)\n\u003e \u003e     {\n\u003e \u003e         return;\n\u003e \u003e     }\n\u003e \u003e     #endif /* CRYPTO_SUPPORT */\n\u003e \n\u003e Agree, sounds good to me.\n\nFurther thinking, if we decide to have CRYPTO_SUPPORT as global flag then it should be enabled in platform makefile as per their need. (This means, we need to enable this flag in all existing platforms that uses Crypto). \nI think we can\u0027t put a compulsion to enable CRYPTO_SUPPORT if TRUSTED_BOARD_BOOT or MEASURED_BOOT is enabled for all platforms (for e.g. Renesas doesn\u0027t need Crypto). Do you have any suggestion here?\n\n\u003e \n\u003e \u003e Also, crypto_mod.h resides in auth/ folder that looks odd as Measured Boot needs Crypto supports without authentication. Can we take out crypto_mod.h from auth folder?\n\u003e \n\u003e I guess we could, that makes sense to me. Where do you suggest we move it?\n\nAll include files under include/driver/crypto/* and source files under driver/crypto/*.\nThis indeed needs changes in all platform Makefiles. Does it make sense?\n\n\u003e \n\u003e \u003e \u003e  trusted_boot_init();\n\u003e \u003e \n\u003e \u003e s/auth_mod_init/trusted_boot_init needs more changes in the code. We need to update the documentation wherever auth_mod_init is referred. Few platforms for e.g Renesas have their own implementation of auth_mod_init [1], that also need to be updated. \n\u003e \u003e Authentication is the purpose of trusted board boot anyways, and function name auth_mod_init is aligned to a auth_mod.c file. IMHO better retain the function name as \u0027auth_mod_init\u0027 only. Let me know what do you think?\n\u003e \u003e \n\u003e \u003e [1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/drivers/renesas/common/auth/auth_mod.c#n138\n\u003e \n\u003e Yes, I had not thought this through. I agree with you, let\u0027s stick with auth_mod_init().",
      "parentUuid": "e3903393_e225af56",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 39
      },
      "revId": "4d62fcb3eb563d7f593ad921701756f305274f90",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}