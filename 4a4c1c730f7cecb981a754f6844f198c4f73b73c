{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "532ca80d_00de110f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2024-02-13T21:24:41Z",
      "side": 1,
      "message": "Unrelated failure",
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3c96403_d297aacd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2024-02-14T08:15:47Z",
      "side": 1,
      "message": "Hi Lauren, I think it is related ;-)\nSee my comment on previous patch. \nOr maybe I missed something?",
      "parentUuid": "532ca80d_00de110f",
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bc38932_59698f74",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 270,
      "author": {
        "id": 1001205
      },
      "writtenOn": "2024-02-16T08:51:06Z",
      "side": 1,
      "message": "This check is useless as it will be already made in the for statement",
      "range": {
        "startLine": 270,
        "startChar": 1,
        "endLine": 270,
        "endChar": 29
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df04d2ec_82c02bca",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1001205
      },
      "writtenOn": "2024-02-16T08:51:06Z",
      "side": 1,
      "message": "Hello, I think I\u0027ve found an issue with the STM32MP1 board (see Yann comment in the other patch). The calculated CRC doesn\u0027t match the expected one because the entry count value is not equal to PLAT_PARTITION_MAX_ENTRIES in the case of MP1, so the full CRC is not being calculated. A fix for this problem could be to replace the \"list.entry_count-1\" line 271 with the maximum number of partition entries (128)",
      "range": {
        "startLine": 283,
        "startChar": 5,
        "endLine": 283,
        "endChar": 32
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ade2b42_f315971f",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-02-19T11:14:15Z",
      "side": 1,
      "message": "I\u0027m curious about the necessity to set the partition-entries to a fixed value of 128, especially when the UEFI specification [1] on the ``header.part_crc`` says\n\n```\nThe CRC32 of the GUID Partition Entry array. Starts at Par titionEntryLBA\nand is computed over a byte length of NumberOfPartitionEntries * SizeOfP\nartitionEntry.\n```\nwhere list.entry_count \u003d NumberOfPartitionEntries \n\n\nIt may be due to the erroneous filling of the ``header.part_crc`` during the generation of the GPT image. or, it is possible that the specification is inaccurate and should explicitly mention that this CRC must always consider all 128 partition entries.\n\n[1]: https://uefi.org/sites/default/files/resources/UEFI_Spec_2_10_Aug29.pdf",
      "parentUuid": "df04d2ec_82c02bca",
      "range": {
        "startLine": 283,
        "startChar": 5,
        "endLine": 283,
        "endChar": 32
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f8007cf_0cf0e744",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-02-19T11:14:15Z",
      "side": 1,
      "message": "Hi Maxime, \n\nThanks for your analysis. I\u0027m curious about the necessity to set the partition-entries to a fixed value of 128, especially when the UEFI specification [1] says below on the ``header.part_crc``\n\n```\nThe CRC32 of the GUID Partition Entry array. Starts at PartitionEntryLBA\nand is computed over a byte length of NumberOfPartitionEntries * SizeOfP\nartitionEntry\n```\nWhere NumberOfPartitionEntries \u003d list.entry_count. \n\nIt may be due to erroneous filling of the ``header.part_crc`` during the generation of the GPT image. or, it is possible that the specification is inaccurate and should explicitly mention that this CRC must always consider all 128 partition entries.\n\n[1]: https://uefi.org/sites/default/files/resources/UEFI_Spec_2_10_Aug29.pdf",
      "parentUuid": "df04d2ec_82c02bca",
      "range": {
        "startLine": 283,
        "startChar": 5,
        "endLine": 283,
        "endChar": 32
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39f46fe3_d70a9bb0",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 285,
      "author": {
        "id": 1001205
      },
      "writtenOn": "2024-02-16T08:51:06Z",
      "side": 1,
      "message": "Missing space here",
      "range": {
        "startLine": 285,
        "startChar": 5,
        "endLine": 285,
        "endChar": 6
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cf65782_d582b9d9",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 285,
      "author": {
        "id": 1001205
      },
      "writtenOn": "2024-02-19T12:48:59Z",
      "side": 1,
      "message": "Hi Manish,\n\nYou\u0027re absolutely right. After some reflection, this value is not fixed. However, in the case of stm32mp1, \"list.entry_count\" is redefined and does not correspond to \"NumberOfPartitionEntries\". Therefore, to properly work, the value should be directly picked from the GPT Header (\"header.list_num\").\n\nTo summarize, this implies replacing the line 271 \"list.entry_count-1\" with \"header.listnum\".",
      "parentUuid": "39f46fe3_d70a9bb0",
      "range": {
        "startLine": 285,
        "startChar": 5,
        "endLine": 285,
        "endChar": 6
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddbf462f_1a3d3a41",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 285,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-02-19T13:40:23Z",
      "side": 1,
      "message": "\u003e However, in the case of stm32mp1, \"list.entry_count\" is redefined and does not correspond to \"NumberOfPartitionEntries\".\n\nAh okay, this condition [1] gets executed for ST platform I think. \n\n\u003e Therefore, to properly work, the value should be directly picked from the GPT Header (\"header.list_num\").\n\nAgree, it is better to use the value from the header only in that case.\n\n\u003e To summarize, this implies replacing the line 271 \"list.entry_count-1\" with \"header.listnum\".\n\nIf I understand correctly, the CRC of the first invalid entry is calculated at line 258. Consequently, the check at line 271 done i.e.``list.entry_count-1``. However, based on our discussion, it seems more appropriate for this to be replaced with ``header.list_num - 1`` instead. I will leave it to Lauren to provide an explanation for this specific check.\n\n[1]: https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/26488/3/drivers/partition/partition.c#143",
      "parentUuid": "8cf65782_d582b9d9",
      "range": {
        "startLine": 285,
        "startChar": 5,
        "endLine": 285,
        "endChar": 6
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2431c397_2e59f192",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 285,
      "author": {
        "id": 1001205
      },
      "writtenOn": "2024-02-19T17:28:25Z",
      "side": 1,
      "message": "\"Ah okay, this condition 1 gets executed for ST platform I think.\"\n- In ST platform the entry count is set to 6: fsbl1, fsbl2, metadata1, metadata2, fip-a and fip-b (See plat/st/common/common.mk wich redefines PLAT_PARTITION_MAX_ENTRIES).\n\n\"If I understand correctly, the CRC of the first invalid entry is calculated at line 258.\"\n- There could be invalid entries, as well as unparsed entries. In the case of mp1, we don\u0027t want to parse certain partitions, such as userfs.\n\n\"However, based on our discussion, it seems more appropriate for this to be replaced with header.list_num - 1 instead.\"\n- In my opinion, the minus one should not be added, otherwise the last partition will be skipped.",
      "parentUuid": "ddbf462f_1a3d3a41",
      "range": {
        "startLine": 285,
        "startChar": 5,
        "endLine": 285,
        "endChar": 6
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac8b6238_6d755746",
        "filename": "drivers/partition/partition.c",
        "patchSetId": 3
      },
      "lineNbr": 285,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-02-20T09:34:37Z",
      "side": 1,
      "message": "\u003e In my opinion, the minus one should not be added, otherwise the last partition will be skipped.\n\n\nYes, indeed, this is the situation. The CRC of the **first** invalid partition entry is currently being calculated twice, which appears to be an error. To elaborate:\n\nAt line 262, we terminate the loop upon encountering the first invalid entry; however, the CRC for that invalid entry is computed beforehand at line 258.\nSubsequently, at line 279, the CRC of the first invalid entry is calculated once again, alongside the CRC calculations for the remaining invalid entries.\n\nTo illustrate with ``list.entry_count \u003d 128``, if an invalid entry is detected at partition entry 2, its CRC is first computed in the initial step, and then redundantly recalculated in the subsequent step, alongside the CRCs for the remaining entries (entries 3, 4..126 etc.) skipping entry 127. The cumulative CRC calculation encompasses all partition entries, as demonstrated below:\n\n```\nCRC \u003d CRC of partition entries (0, 1, 2, 2, 3, 4...126)\n```\n\nTo rectify this issue and to consider all partition entries, I propose relocating the CRC calculation from line 258 to 264, positioned after parsing the entries. Additionally, I recommend adjusting the loop condition at line 271 as you suggested:\n```\nfor (; i \u003c header.list_num; i++) {\n```\n\nI believe we are aligned now 😊.",
      "parentUuid": "2431c397_2e59f192",
      "range": {
        "startLine": 285,
        "startChar": 5,
        "endLine": 285,
        "endChar": 6
      },
      "revId": "4a4c1c730f7cecb981a754f6844f198c4f73b73c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}