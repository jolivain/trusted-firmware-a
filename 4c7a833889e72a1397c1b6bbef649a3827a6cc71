{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5a98ac19_287dba01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2023-08-09T11:28:29Z",
      "side": 1,
      "message": "https://ci.trustedfirmware.org/job/tf-a-ci-gateway/45532/\n\nOne failure, related to BL31 progbits issue, which is unrelated with this patch.\nA patch to address this issue [ https://review.trustedfirmware.org/c/ci/tf-a-ci-scripts/+/22545 ]\n\nManually providing verified +1. ",
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e7acb95_e8f29d26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2023-08-13T21:08:12Z",
      "side": 1,
      "message": "Patch LGTM.\nI believe FEAT_MTPMU is explicitly not converted here as it does not fit into this pattern of wrapper macros, hence it\u0027s retained without any changes.\n\nFurther, I see some MISRA warnings, please take a look at them.\nAs we had encountered, it might sometimes be a false warning ( https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/19019). So kindly analyse it.\n\n\n",
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f8aadfc_39e1f8f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-08-14T14:33:39Z",
      "side": 1,
      "message": "Yes, MTPMU requires the open coded version.\nRegarding the MISRA warnings: we see them on every patch that touches this file, I think this is there the automated MISRA tests misses the point: we have those \"invariant\" expressions deliberately, to be spotted as such and optimised away by the compiler. Though the MISRA checker fails to see that this is not really invariant per se, but determined by compile-time set variables.\nSo yes, in the past we always just ignored them.",
      "parentUuid": "6e7acb95_e8f29d26",
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1e5fd48_6ddf3ac5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-08-15T09:16:37Z",
      "side": 1,
      "message": "This is nice clean-up! Posted few minor comments inline in the patch.",
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8203d5a0_8211750a",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-08-15T09:16:37Z",
      "side": 1,
      "message": "The grouping of functions of similar types makes this patch easier to read. In this file, I can see the following variant functions - \n\n1. is_*_supported (functions that does not use this introduced macros, exceptional cases).\n2. is_*_present\n3. read_feat_*_field\n\nThis is not really related to this patch. It is not blocking comment and can be handled in the same/subsequent patch.",
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30bf9524_6efc53b7",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-08-15T14:43:57Z",
      "side": 1,
      "message": "Yes, this might deserve some reordering, but this patch is not easy to verify already, so I\u0027d rather keep the order for now, so one can match the functions next to each other.",
      "parentUuid": "8203d5a0_8211750a",
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bd7e432_9eee0233",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-08-16T09:01:50Z",
      "side": 1,
      "message": "That\u0027s fine! Maybe it\u0027s just me who feels it should be more readable.",
      "parentUuid": "30bf9524_6efc53b7",
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a607d26_f59c35e2",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-08-15T09:16:37Z",
      "side": 1,
      "message": "Can this use the macro: CREATE_FEATURE_FUNCS introduced in this patch?",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 172,
        "endChar": 1
      },
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "398024a9_622be8c6",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-08-15T14:43:57Z",
      "side": 1,
      "message": "CREATE_FEATURE_FUNCS itself wouldn\u0027t work, because that also instantiates the read_feat_xxx_id_field() function, which is different here, both the name and implementation.\nBut it looks like we can use the CREATE_FEATURE_FUNCS_VER macro here.\nJust not sure it\u0027s worth it now since it would remove all votes again.",
      "parentUuid": "6a607d26_f59c35e2",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 172,
        "endChar": 1
      },
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8ccf77d_f2e48b5e",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-08-16T09:01:50Z",
      "side": 1,
      "message": "\u003e CREATE_FEATURE_FUNCS itself wouldn\u0027t work, because that also instantiates the read_feat_xxx_id_field() function, which is different here, both the name and implementation.\n\nah yes!\n\n\u003e But it looks like we can use the CREATE_FEATURE_FUNCS_VER macro here.\nJust not sure it\u0027s worth it now since it would remove all votes again.\n\nVotes can be restored quickly ðŸ˜Š. While I don\u0027t mind if other reviewers opt to proceed without converting this, I find it odd to leave this unconverted piece behind.",
      "parentUuid": "398024a9_622be8c6",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 172,
        "endChar": 1
      },
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80b02160_d80daeb9",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-08-16T10:17:32Z",
      "side": 1,
      "message": "Sure, I will fix this and update. But just for the records:\n\n\"Votes can be restored quickly.\" Well, that depends on your definition of quickly, especially during the holiday season ;-) And this patch is lingering around for quite a while already. My last update was a week ago, and only now this is merge ready - only that it\u0027s now not anymore.\n\nComing from a Linux background, I find it odd that even small changes (commit message rewording, spelling in comments, variable renames) drop the more precious maintainer and CoR votes. I would expect them to be more high level, so not affected by those smaller changes. I guess this is hard to fix in gerrit, but in the kernel you would just say: \"With that fixed: Reviewed-by: ...\", or the patch author would carry over a review tag at their own discretion.",
      "parentUuid": "d8ccf77d_f2e48b5e",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 172,
        "endChar": 1
      },
      "revId": "4c7a833889e72a1397c1b6bbef649a3827a6cc71",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}