{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1dde19bf_64e15a6e",
        "filename": "lib/cpus/aarch64/cortex_a715.S",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-03-20T20:48:54Z",
      "side": 1,
      "message": "Isn\u0027t \n```\n#if ENABLE_SPE_FOR_NS \n```\nmean the same? any non-zero value would evaluate it to true zero means false ?\n\nIs comparison !\u003d0 needed?\n\nShould we compile out entire errata and make it available only if ENABLE_SPE_FOR_NS is available? why not take that decision inside the implementation of errata like:\n\n[...]\nworkaround_reset_start cortex_a715, ERRATUM(2413290), ERRATA_A715_2413290\n#if ENABLE_SPE_FOR_NS\n\tmrs x1, id_aa64dfr0_el1\n\tubfx x0, x1, ID_AA64DFR0_PMS_SHIFT, #4\n\tcbz x0, 1f\n\tsysreg_bit_set CORTEX_A715_CPUACTLR_EL1, BIT(57)\n\tsysreg_bit_set CORTEX_A715_CPUACTLR_EL1, BIT(58)\n1:\n#endif\nworkaround_reset_end cortex_a715, ERRATUM(2413290)\n\ncheck_erratum_range cortex_a715, ERRATUM(2413290), CPU_REV(1,0), CPU_REV(1, 0)\n\n[...]\n\nThis means would still probe for list of errata\u0027s being available? but compiled out application of errata?",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "7bfd338717842bb693fb0589585da4097f95ce1d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d43a55b6_256d0d05",
        "filename": "lib/cpus/aarch64/cortex_a715.S",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2024-03-20T21:02:03Z",
      "side": 1,
      "message": "Hi Govind, \nIf the feature is not enabled, then we don\u0027t have to add the erratum to the cpu reset list right?",
      "parentUuid": "1dde19bf_64e15a6e",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "7bfd338717842bb693fb0589585da4097f95ce1d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "700841c5_cb6fc7dd",
        "filename": "lib/cpus/aarch64/cortex_a715.S",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-03-20T21:12:31Z",
      "side": 1,
      "message": "IIUC, we need to ensure we have correct errata list available but applied only when we have `ENABLE_SPE_FOR_NS` enabled?\n\nthere are 2 parts to problem for example somebody enables `ERRATA_A715_2413290` and probes if this errata is there in errata_list, I would expect it be present.\n\nnext what the errata does the errata can be made available from available errata list, but errata itself will only apply on ENABLE_SPE_FOR_NS is enabled?\n\nI would treat this inline with something like errata for a feature, for example one needs to apply errata when feat_x is present, so errata will be available but only applied when feat_x is present/enabled.",
      "parentUuid": "d43a55b6_256d0d05",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "7bfd338717842bb693fb0589585da4097f95ce1d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16d9c089_508683fb",
        "filename": "lib/cpus/aarch64/cortex_a715.S",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2024-03-20T23:07:27Z",
      "side": 1,
      "message": "Acknowledged, makes sense now. Thanks Govind!",
      "parentUuid": "700841c5_cb6fc7dd",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "7bfd338717842bb693fb0589585da4097f95ce1d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceb72737_1c1bf8b4",
        "filename": "lib/cpus/aarch64/cortex_a715.S",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2024-03-22T00:27:37Z",
      "side": 1,
      "message": "Last piece of the comment should be when \"feat_x is present and enabled.\" \n\nPresent indicating hardware is implemented for the feature(feat_x) and is detectable through feature detection. Further this feat_x needs to be enabled for the mitigation to apply. I agree the presence of the mitigation should be available in the errata list, whether it\u0027s applied based on the other conditions can be conditional to the flags or checking the register. We should make sure to avoid additional memory foot print(additional register check instructions) OR performance impact(additional execution time) of potentially unapplied code based on the conditions.",
      "parentUuid": "700841c5_cb6fc7dd",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "7bfd338717842bb693fb0589585da4097f95ce1d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}