{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "296452d6_e6de075e",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-10-27T14:25:33Z",
      "side": 1,
      "message": "MbedTLS documentation is explicit about mbedtls_oid_get_numeric_string() error codes - it can only return MBEDTLS_ERR_OID_BUF_TOO_SMALL on error. So the existing check should cover all error cases.\n\nhttps://github.com/Mbed-TLS/mbedtls/blob/v2.28.0/include/mbedtls/oid.h#L458\n\nWhy this extra check? Are you worried about future versions of mbedTLS evolving this API contract? Or is it meant to give static analyzers (and the like) insight into the API contract in use here - which they can\u0027t be aware of - such that they do not complain about us casting oid_len into an unsigned integer type below at line 120?\n\nI am not saying this is not reasonable, just trying to understand the motivation for this change (e.g. did you hit an issue with this code in practice?).",
      "range": {
        "startLine": 117,
        "startChar": 49,
        "endLine": 117,
        "endChar": 65
      },
      "revId": "637d0b8d669c663c6b196fe5a834bc2ab443bf23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f054c87_f59e0c8c",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2022-10-27T15:17:06Z",
      "side": 1,
      "message": "Hi Sandrine,\n\nOn STM32MP1 platforms, we\u0027ve enabled the compilation flag: -Wsign-compare\n\nAnd it triggers at line 120 the following warning:\n drivers/auth/mbedtls/mbedtls_x509_parser.c: In function \u0027get_ext\u0027:\n drivers/auth/mbedtls/mbedtls_x509_parser.c:120:30: error: comparison of integer expressions of \n different signedness: \u0027int\u0027 and \u0027size_t\u0027 {aka \u0027unsigned int\u0027} [-Werror\u003dsign-compare]\n   120 |                 if ((oid_len \u003d\u003d strlen(oid_str)) \u0026\u0026 !strcmp(oid, oid_str)) {\n       |                              ^~\n \nIt then seemed better to ensure oid_len was positive before casting it to an unsigned value.\nBut maybe the extra check is superfluous.",
      "parentUuid": "296452d6_e6de075e",
      "range": {
        "startLine": 117,
        "startChar": 49,
        "endLine": 117,
        "endChar": 65
      },
      "revId": "637d0b8d669c663c6b196fe5a834bc2ab443bf23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef780dc2_d0bd2083",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-10-27T15:51:29Z",
      "side": 1,
      "message": "I see, thanks for explaining.\n\nTBH, I think it would be good to enable -Wsign-compare across TF-A codebase, because it is inline with MISRA essential type model. But just in generic code - platform maintainers are free to opt into MISRA compliance. Unfortunately I don\u0027t think TF-A build system currently supports per file/directory CFLAGS so it can only be an all/nothing policy...\n\nSo from a MISRA compliance point of view (and just for good, robust code) I think it\u0027s really good you\u0027re fixing line 120.\n\nNow for the extra check at line 117, I think we can keep it. It\u0027s cheap and as you say, it makes sense before casting oid_len into an unsigned integer. \n\nAlternatively, or on top of that, we could add the following debug assertion:\n\n ASSERT((oid_len \u003d\u003d MBEDTLS_ERR_OID_BUF_TOO_SMALL) || (oid_len \u003e\u003d 0);\n\nI think the main motivation would be to help us with future MbedTLS API changes (if any), such that if new error codes are added, it gets flagged to us more explicitly. Else, it\u0027ll just be silently swallowed by the new (oid_len \u003c 0) check and be reported as a parser error - which might be the right answer, or not!\n\nWhat do you think? Is it an overkill?",
      "parentUuid": "3f054c87_f59e0c8c",
      "range": {
        "startLine": 117,
        "startChar": 49,
        "endLine": 117,
        "endChar": 65
      },
      "revId": "637d0b8d669c663c6b196fe5a834bc2ab443bf23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}