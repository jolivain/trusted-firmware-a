{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9eb01b3c_08c4a1c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-11-10T15:59:05Z",
      "side": 1,
      "message": "Since CONDITIONAL_CMO by default is 0, it would be good if you could add build configuration with CONDITIONAL_CMO set to 1 in TF-A CI repo.",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f892812_b8dc5de7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-11-10T17:07:32Z",
      "side": 1,
      "message": "To do this, one must have some platform that uses \u0027plat_can_cmo\u0027 implementation. Are there any upstream platforms that require this?",
      "parentUuid": "9eb01b3c_08c4a1c9",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84476f18_9dfb9810",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-10T17:42:09Z",
      "side": 1,
      "message": "I assume there is no platform implementation at the moment but was added as some platforms requested it (https://lists.trustedfirmware.org/archives/list/tf-a@lists.trustedfirmware.org/thread/IYEWINLGKY5XCH7PR6QYMDSSIYM3X4GV/). There was a default implementation that existed earlier in this patch(version 1 of the patch) which was removed after adding the CONDITIONAL_CMO compile flag so the default functionality isn\u0027t impacted. But agree to add this build suggestion if/once some platforms implement plat_can_cmo .",
      "parentUuid": "1f892812_b8dc5de7",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "681e5894_fe5b2dab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000792
      },
      "writtenOn": "2022-11-10T18:26:37Z",
      "side": 1,
      "message": "+1 to enabling this in CI. not sure about how to implement plat_can_cmo. perhaps we can write an implementation for fvp platform?",
      "parentUuid": "84476f18_9dfb9810",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3178056_dc5b7bc1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-11-10T18:37:59Z",
      "side": 1,
      "message": "Default(no-ops) implementation of plat_can_cmo for FVP makes sense, but if there is any real platform that properly implements plat_can_cmo, then that would be great.",
      "parentUuid": "681e5894_fe5b2dab",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12804a2f_3aac14e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-10T19:18:45Z",
      "side": 1,
      "message": "no-ops implementation may not work as we want to check the path of disabling the default CMOs. But then if we disable CMOs, depending on what tests we apply this could result in unexpected behavior. I assume we limit it to a default test for this purpose(debug recovery) till we have platform specific configs/tests. \n\nSo, we need the plat_can_cmo default implementation to \n1. set the plat_can_cmo \n2. have atleast a default implementation which if NOT using the feature like debug recovery should do the CMOs within the default platform function(used for test purposes only) Or only apply to a default test that can handle the effects of missing CMOs or terminate early once it enter the debug recovery mode.",
      "parentUuid": "b3178056_dc5b7bc1",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc9ee645_62795fc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-10T20:20:44Z",
      "side": 1,
      "message": "\u003e Patch Set 10: Verified-1\n\u003e \n\u003e Build Failed \n\u003e \n\u003e https://jenkins.oss.arm.com/job/tf-gerrit-tforg-l1/5100/ : This Jenkins server is not publicly accessible. A core maintainer will let you know if this CI failure is blocking the merge of this patch.\n\nUnrelated fails.",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc62d952_74eacab7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-11T15:58:21Z",
      "side": 1,
      "message": "@Okash Has this been tested atleast in downstream with a plat_can_cmo implementation?",
      "parentUuid": "12804a2f_3aac14e7",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba433f9e_376efca1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000792
      },
      "writtenOn": "2022-11-11T16:23:40Z",
      "side": 1,
      "message": "Yes tested on downstream platform with plat_can_cmo implementation that we need.",
      "parentUuid": "fc62d952_74eacab7",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2aec34f2_4252d3a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000792
      },
      "writtenOn": "2022-11-11T16:41:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba433f9e_376efca1",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac06d6dc_10052544",
        "filename": "lib/aarch64/cache_helpers.S",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-14T11:08:27Z",
      "side": 1,
      "message": "Seems x1 will be clobbered and is not mentioned as clobbered in the documentation.",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6cc799c_2631461e",
        "filename": "lib/aarch64/cache_helpers.S",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-14T11:21:07Z",
      "side": 1,
      "message": "\u003e Seems x1 will be clobbered and is not mentioned as clobbered in the documentation.\n\nx1 needs to be preserved and needs to be added as to be preserved in documentation for correct operation. More details can be given on the usecase of this build flag as a guide for platform integrators. Also dcsw_op_louis is missed in the patch. \n\nI am also not sure about doing the change to AArch32",
      "parentUuid": "ac06d6dc_10052544",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b92c24de_0c679161",
        "filename": "lib/aarch64/cache_helpers.S",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2022-11-14T11:27:02Z",
      "side": 1,
      "message": "Good point, Soby. Actually I wonder what the point is of saving/restoring x0 into x2? Perhaps it\u0027s simpler to remove this, save x30 in x2, then change the contract to preserve x0-x2?\nI also agree there is probably no use-case for doing this in AArch32.",
      "parentUuid": "c6cc799c_2631461e",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49436355_cb7c3a6d",
        "filename": "lib/aarch64/cache_helpers.S",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1000792
      },
      "writtenOn": "2022-11-14T11:46:40Z",
      "side": 1,
      "message": "\u003e Seems x1 will be clobbered and is not mentioned as clobbered in the documentation.\n\nmay be i missed something. x1 should not be clobbered. a simple implementation of plat_can_cmo will read a register value in x0, and it with a mask and return the result in x0. why do you think x1 will be clobbered?",
      "parentUuid": "b92c24de_0c679161",
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df7aa2ea_6d52ebb7",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 10
      },
      "lineNbr": 486,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-11-10T13:28:34Z",
      "side": 1,
      "message": "nit: should we also ensure that this macro can be only enabled in DEBUG build?",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 486,
        "endChar": 15
      },
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68b44856_9c1b1a5d",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 10
      },
      "lineNbr": 486,
      "author": {
        "id": 1000792
      },
      "writtenOn": "2022-11-10T14:18:38Z",
      "side": 1,
      "message": "cpu and dsu debug recovery should be seen orthogonal to TF-A\u0027s debug build. an example would be to collect crash information in field or in dog food devices.",
      "parentUuid": "df7aa2ea_6d52ebb7",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 486,
        "endChar": 15
      },
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b54d68ef_4e57249c",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 10
      },
      "lineNbr": 486,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-11-10T14:46:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "68b44856_9c1b1a5d",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 486,
        "endChar": 15
      },
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc27c488_b2613f8c",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 10
      },
      "lineNbr": 486,
      "author": {
        "id": 1000792
      },
      "writtenOn": "2022-11-11T16:41:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b54d68ef_4e57249c",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 486,
        "endChar": 15
      },
      "revId": "04c7303b9c3d2215eebc3d59431519990abe03d0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}