{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b3f6429a_a4ae16de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-02-20T15:25:32Z",
      "side": 1,
      "message": "Just as a sanity check, have you checked the memory footprint with and without CTX_INCLUDE_EL2?",
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b396fd2_b54744da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-20T18:18:56Z",
      "side": 1,
      "message": "Haven\u0027t tested yet.\nWill have extreme checks\n\u003e One with all feat enabled and the other with bare minimal to have something for comparison and update here.",
      "parentUuid": "b3f6429a_a4ae16de",
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa9dcca7_7edd9469",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-21T20:26:53Z",
      "side": 1,
      "message": "The memory footprint with various scenarios:\n\nFor an 8 core system.\n\n---------------------------------------------------------------------\n\n\u003eWithout CTX_INCLUDE_EL2\n\nMemory usage for Secure:\nPer-world context: 24B\nTOTAL: 4632B\nMemory usage for Non-Secure:\nPer-world context: 24B\nTOTAL: 4632B\n\nTotal context memory allocated: 9264B\n\n---------------------------------------------------------------------\n\n\u003eWith CTX_INCLUDE_EL2 (All features enabled)\n\nMemory usage for Secure:\nEl2 reg (440B) per core\nPer-world context: 24B\nTOTAL: 9112B\n\nMemory usage for Non-Secure:\nEl2 reg (440B) per core\nPer-world context: 24B\nTOTAL: 9112B\n\nTotal context memory allocated: 18224B\n\n---------------------------------------------------------------------\n\n\n\n\n\u003eWith CTX_INCLUDE_EL2 (optional/feature-specific flags disabled)\n\nMemory usage for Secure:\nEl2 reg (280B) per core\nPer-world context: 24B\nTOTAL: 7832B\n\nMemory usage for Non-Secure:\nEl2 reg (280B) per core\nPer-world context: 24B\nTOTAL: 7832B\n\nTotal context memory allocated: 15664B\n\n---------------------------------------------------------------------\n\nA good amount of memory being saved, with this refactor. Wherein we moved from (440B) of EL2 memory per core to 280B per core, which when scaled up with number of cores showing good reduction in memory consumption.",
      "parentUuid": "0b396fd2_b54744da",
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e2e155b_b99ffa82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-02-22T15:27:06Z",
      "side": 1,
      "message": "perfect, thanks",
      "parentUuid": "fa9dcca7_7edd9469",
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b754209d_09e1dcf9",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-02-20T15:25:32Z",
      "side": 1,
      "message": "It would be nice if there was no `ctx_` prefix as it\u0027s a member of a ctx struct and requires accessors anyway. \n\nThis way\nread_el2_ctx_common(get_el2_sysregs_ctx(ctx), cm, ctx_mdcr_el2);\ncan become\nread_el2_ctx_common(get_el2_sysregs_ctx(ctx), cm, mdcr_el2);\nwhich makes a lot more sense (and grep might be friendlier)",
      "range": {
        "startLine": 305,
        "startChar": 10,
        "endLine": 305,
        "endChar": 14
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a55bbfb8_fb71c714",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-20T18:16:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b754209d_09e1dcf9",
      "range": {
        "startLine": 305,
        "startChar": 10,
        "endLine": 305,
        "endChar": 14
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b91b66_fd217db6",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 477,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-02-20T15:25:32Z",
      "side": 1,
      "message": "feat is coded into the name of the function, can you drop it?",
      "range": {
        "startLine": 477,
        "startChar": 31,
        "endLine": 477,
        "endChar": 35
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9959438f_a44b50ae",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 477,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-20T18:16:37Z",
      "side": 1,
      "message": "Are you suggesting this ?: \n#define read_el2_ctx_mte(ctx, reg)\t\t(((ctx)-\u003emte).reg)\n#define write_el2_ctx_mte(ctx, reg, val)\t((((ctx)-\u003emte).reg)\u003d (uint64_t) (val)))",
      "parentUuid": "06b91b66_fd217db6",
      "range": {
        "startLine": 477,
        "startChar": 31,
        "endLine": 477,
        "endChar": 35
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ac92c59_f42f6d91",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 477,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-02-21T08:58:01Z",
      "side": 1,
      "message": "yep pretty much",
      "parentUuid": "9959438f_a44b50ae",
      "range": {
        "startLine": 477,
        "startChar": 31,
        "endLine": 477,
        "endChar": 35
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff869f84_ec058f4a",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 477,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-21T11:00:30Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5ac92c59_f42f6d91",
      "range": {
        "startLine": 477,
        "startChar": 31,
        "endLine": 477,
        "endChar": 35
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e4ef6e8_883c75b6",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 481,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-02-20T15:25:32Z",
      "side": 1,
      "message": "read expands to 0, why not write? If you have it disabled it will expand to an empty string and cause a warning",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 481,
        "endChar": 46
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cd9247b_7a1feac8",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 481,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-20T18:16:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0e4ef6e8_883c75b6",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 481,
        "endChar": 46
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f00c4b4_436a2906",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 481,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-21T12:43:31Z",
      "side": 1,
      "message": "write_macro could either be replaced with an empty string or an empty do{}while(false) loop.\nUltimately it will result in an empty line in code when the corresponding build flag is disabled.\nI dont see any major issues here with either.\nHave seen few instances, wherein macro expands to empty string in our codebase.\nI have introduced a no_ctx macro has an alternative. Please take a look and share your thoughts.",
      "parentUuid": "9cd9247b_7a1feac8",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 481,
        "endChar": 46
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fd35eb6_ce7e4f4c",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 2
      },
      "lineNbr": 481,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-02-21T13:13:03Z",
      "side": 1,
      "message": "I have no preference to either. I just remember (but not where) an in stance where a function macro like\n```\n#define something(a)\n\nsomething(b);\n```\nexpanding to an empty string would produce a line like\n```\n;\n```\nwhich triggers warnings",
      "parentUuid": "5f00c4b4_436a2906",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 481,
        "endChar": 46
      },
      "revId": "e1ce248b00a121e8248e4cc44abb1276ba8db0de",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}