{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6d9b5cc_a181e09d",
        "filename": "include/plat/arm/common/arm_fwu_metadata.h",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "I guess this is the same discussion as we had in the first patch but I don\u0027t think these should be branded as *Arm* helper functions. These seem to be generic helper functions to access the FWU metadata so I suggest 1. we move this header file outside of include/plat/arm (exact location TBD, as discussed) and 2. we don\u0027t prefix these function names by \"arm_\".",
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c5e6c6b_01ca09a7",
        "filename": "include/plat/arm/common/arm_fwu_metadata.h",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "This file can\u0027t be make generic for all platforms, as the definitions of the functions (mentioned in this header file) are very much tight to Arm platforms only. (please refer arm_fwu_metdata.c file)\n\nAlso, functions arguments are decided by considering Arm platform only, which other platforms may not like to go ahead with that.",
      "parentUuid": "c6d9b5cc_a181e09d",
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38376abb_4d930325",
        "filename": "include/plat/arm/common/arm_fwu_metadata.h",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-14T06:54:34Z",
      "side": 1,
      "message": "Arm platforms load FWU metadata assuming this metadata is placed in the GPT image partition (this is recommended in the FWU specification), but some platforms can have their own implementation to load FWU metadata, and that platform may not necessarily support GPT.\n\nDo you think we should make the FWU metadata load function generic irrespective of whether the platform support GPT or not?",
      "parentUuid": "8c5e6c6b_01ca09a7",
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b167e16_e3db0abe",
        "filename": "include/plat/arm/common/arm_fwu_metadata.h",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-14T10:09:51Z",
      "side": 1,
      "message": "\u003e Do you think we should make the FWU metadata load function generic irrespective of whether the platform support GPT or not?\n\nYes, I think so.\n\nI need to do some more reading of the FWU spec before I can provide a good answer to this but my initial impression was that there was nothing Arm specific in there, neither in arm_fwu_metadata.h nor in arm_fwu_metadata.c. This looked like generic data structures to me, as defined by the spec, and the associated code to manipulate them. If we\u0027ve got some dependency on the storage medium used by the platform for the metadata and firmware images, then I would think the I/O abstraction layer should handle this and it would be transparent from the point of view of this code.\n\nBut maybe I am missing something, I\u0027ll hold off commenting further until I have a better understanding of the whole patch series and spec.",
      "parentUuid": "38376abb_4d930325",
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f82c922e_36fb5ee2",
        "filename": "include/plat/arm/common/arm_fwu_metadata.h",
        "patchSetId": 5
      },
      "lineNbr": 2,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "Should be: Arm Limited.",
      "range": {
        "startLine": 2,
        "startChar": 23,
        "endLine": 2,
        "endChar": 51
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59830125_f71771dc",
        "filename": "include/plat/arm/common/arm_fwu_metadata.h",
        "patchSetId": 5
      },
      "lineNbr": 2,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f82c922e_36fb5ee2",
      "range": {
        "startLine": 2,
        "startChar": 23,
        "endLine": 2,
        "endChar": 51
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ca81eff_d0d6de20",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-14T15:22:18Z",
      "side": 1,
      "message": "So I\u0027ve been going through the code in more details and I still think most of the code in this file should be moved to the generic layer. At least it\u0027s clear to me that arm_get_fw_bank_active_idx(), arm_is_trial_run_state(), arm_fwu_metadata_crc_check() and arm_fwu_metadata_sanity_check() are generic.\n\nThings are a bit more hairy for arm_load_fwu_metadata() and I think we might have to redesign it a bit. Loading the metadata from the right storage medium into the g_fwu_metadata variable probably has to stay in some form in the platform layer. However, once the data is in g_fwu_metadata, the CRC check and the sanity checks are generic. So perhaps  arm_load_fwu_metadata() as it is right now needs some further splitting?",
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50549721_7df60632",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "What does this \"g_\" prefix mean? Does it stand for \"global\"? If yes then I don\u0027t find this quite appropriate because it\u0027s not a global variable (its scope is limited to this compilation unit) and although this naming convention is used in other projects, it would be quite unusual for TF-A.",
      "range": {
        "startLine": 16,
        "startChar": 27,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "071d8f00_1bf29a61",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Fine, this is a global variable, but with static scope.\nCan I change this name to \u0027metadata\u0027 (considering this file anyways dedicated to fwu)?",
      "parentUuid": "50549721_7df60632",
      "range": {
        "startLine": 16,
        "startChar": 27,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381b41e3_14fafb19",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-14T08:07:40Z",
      "side": 1,
      "message": "\u0027metadata\u0027 sounds good to me.",
      "parentUuid": "071d8f00_1bf29a61",
      "range": {
        "startLine": 16,
        "startChar": 27,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "430ceb1e_13551632",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "(minor) IMO a better comment would explain how we get the trial run status. Something along these lines:\n\n The system runs in trial run status if any of the active images\n in any of the firmware banks has not been accepted yet.\n\nGenerally speaking, I believe a comment should provide information beyond what the function name already says. If there is nothing more to say then that\u0027s fine and we provide no comment at all.",
      "range": {
        "startLine": 29,
        "startChar": 3,
        "endLine": 29,
        "endChar": 48
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5521d463_e53afa8c",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Ok, let me do necessary changes in comment.",
      "parentUuid": "430ceb1e_13551632",
      "range": {
        "startLine": 29,
        "startChar": 3,
        "endLine": 29,
        "endChar": 48
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7aa4cedf_a007ad5a",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "(minor) This is kind of obvious when the return type is bool ;) Suggest removing this sentence.",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 34
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15cd2013_7a31a639",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Ok😊",
      "parentUuid": "7aa4cedf_a007ad5a",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 34
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "376da2dc_f2b7fd4b",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "Could this result in a copy of the structure (which we don\u0027t really need in this case AFAICS)? I suspect the compiler will be clever enough to figure out that we don\u0027t really use this structure as such, instead we just dereference it further so it should be able to optimize the copy away. But still, it would seem more idiomatic to me to get the address of the structure instead:\n\n struct image_entry *entry \u003d \u0026g_fwu_metadata.img_entry[i];",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 57
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5420b88c_7e4acaca",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Ah ok, thanks for spotting this! Agree we should not rely on compiler, let me take the address of structure.",
      "parentUuid": "376da2dc_f2b7fd4b",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 57
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9568ffb1_aaef7cef",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "Same comment for this one, I would prefer:\n\n struct image_bank_info *img_info \u003d \u0026entry.img_bank_info[g_fwu_metadata.active_index];\n\nUltimately we just want to access the \"accepted\" field...",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 39,
        "endChar": 33
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8c7e8d4_cacc5ce0",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Ditto here",
      "parentUuid": "9568ffb1_aaef7cef",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 39,
        "endChar": 33
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffd11eaf_2e2587ae",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "We should check the value of active_index to avoid any out-of-bounds access. If there is no way the active_index can be beyond the bounds of the img_bank_info[] under normal circumstances, i.e. if this can only happen as a result of a programming error/bug, then we should use an assert to check this. Otherwise a proper \u0027if\u0027 statement would be more appropriate.\n\nEDIT: I now see that arm_fwu_metadata_sanity_check() checks this kind of things. Is the caller of arm_is_trial_run_state() expected to call arm_fwu_metadata_sanity_check() beforehand? In this case, this expectation should be spelled out in the function documentation and we can use an assertion to double-check it.",
      "range": {
        "startLine": 40,
        "startChar": 23,
        "endLine": 40,
        "endChar": 50
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34ff5519_3b7d33c4",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Sure, let me add assert as double-check to avoid out of bound access.",
      "parentUuid": "ffd11eaf_2e2587ae",
      "range": {
        "startLine": 40,
        "startChar": 23,
        "endLine": 40,
        "endChar": 50
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dd8e5a3_9898be08",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "(minor) Perhaps it\u0027s just down to personal preference but I would find it more straight forward to pass 0 as the first argument. This would say more clearly to me that we\u0027re not doing accumulative CRC computations.",
      "range": {
        "startLine": 60,
        "startChar": 21,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b3d49a6_6be38ef8",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "I thought it is better make use of variable which is initialised to \u00270\u0027, but agree passing \u00270\u0027 as first argument give code reader a clear impression that it is not accumulated CRC.",
      "parentUuid": "8dd8e5a3_9898be08",
      "range": {
        "startLine": 60,
        "startChar": 21,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7050ddc_5f9e8974",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "This code assumes that crc_32 is the first field of the structure, right? If in the future other fields were to be added before crc_32 (which I guess is pretty unlikely) then they would not be covered by the CRC. Worse than that, the way the size argument is computed right now would make hw_crc32 read beyond the limits of the structure. With this in mind, would it be overkill to add a compile-time assertion on the offset of the crc32 fields (checking that offsetof(struct fwu_metadata, crc_32) \u003d\u003d 0)?",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 40
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ff3aef1_cdf2881c",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Pretty unlikely \u0027crc_32\u0027 field get moved to lose its first place in metadata. As double check let me add compile time assertion as you mentioned.",
      "parentUuid": "b7050ddc_5f9e8974",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 40
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dec7d40_b6aef4ed",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "I suspect MISRA checkers will request extra parentheses around the individual conditions...",
      "range": {
        "startLine": 79,
        "startChar": 1,
        "endLine": 80,
        "endChar": 62
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c91abdd1_3a8f1e24",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9dec7d40_b6aef4ed",
      "range": {
        "startLine": 79,
        "startChar": 1,
        "endLine": 80,
        "endChar": 62
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f24fae93_abb94c0f",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "(minor) Missing final \\n",
      "range": {
        "startLine": 129,
        "startChar": 56,
        "endLine": 129,
        "endChar": 58
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a91d8e51_ad288ce5",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-11T15:07:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f24fae93_abb94c0f",
      "range": {
        "startLine": 129,
        "startChar": 56,
        "endLine": 129,
        "endChar": 58
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}