{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6d9b5cc_a181e09d",
        "filename": "include/plat/arm/common/arm_fwu_metadata.h",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "I guess this is the same discussion as we had in the first patch but I don\u0027t think these should be branded as *Arm* helper functions. These seem to be generic helper functions to access the FWU metadata so I suggest 1. we move this header file outside of include/plat/arm (exact location TBD, as discussed) and 2. we don\u0027t prefix these function names by \"arm_\".",
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f82c922e_36fb5ee2",
        "filename": "include/plat/arm/common/arm_fwu_metadata.h",
        "patchSetId": 5
      },
      "lineNbr": 2,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "Should be: Arm Limited.",
      "range": {
        "startLine": 2,
        "startChar": 23,
        "endLine": 2,
        "endChar": 51
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50549721_7df60632",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "What does this \"g_\" prefix mean? Does it stand for \"global\"? If yes then I don\u0027t find this quite appropriate because it\u0027s not a global variable (its scope is limited to this compilation unit) and although this naming convention is used in other projects, it would be quite unusual for TF-A.",
      "range": {
        "startLine": 16,
        "startChar": 27,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "430ceb1e_13551632",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "(minor) IMO a better comment would explain how we get the trial run status. Something along these lines:\n\n The system runs in trial run status if any of the active images\n in any of the firmware banks has not been accepted yet.\n\nGenerally speaking, I believe a comment should provide information beyond what the function name already says. If there is nothing more to say then that\u0027s fine and we provide no comment at all.",
      "range": {
        "startLine": 29,
        "startChar": 3,
        "endLine": 29,
        "endChar": 48
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7aa4cedf_a007ad5a",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "(minor) This is kind of obvious when the return type is bool ;) Suggest removing this sentence.",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 34
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "376da2dc_f2b7fd4b",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "Could this result in a copy of the structure (which we don\u0027t really need in this case AFAICS)? I suspect the compiler will be clever enough to figure out that we don\u0027t really use this structure as such, instead we just dereference it further so it should be able to optimize the copy away. But still, it would seem more idiomatic to me to get the address of the structure instead:\n\n struct image_entry *entry \u003d \u0026g_fwu_metadata.img_entry[i];",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 57
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9568ffb1_aaef7cef",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "Same comment for this one, I would prefer:\n\n struct image_bank_info *img_info \u003d \u0026entry.img_bank_info[g_fwu_metadata.active_index];\n\nUltimately we just want to access the \"accepted\" field...",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 39,
        "endChar": 33
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffd11eaf_2e2587ae",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "We should check the value of active_index to avoid any out-of-bounds access. If there is no way the active_index can be beyond the bounds of the img_bank_info[] under normal circumstances, i.e. if this can only happen as a result of a programming error/bug, then we should use an assert to check this. Otherwise a proper \u0027if\u0027 statement would be more appropriate.\n\nEDIT: I now see that arm_fwu_metadata_sanity_check() checks this kind of things. Is the caller of arm_is_trial_run_state() expected to call arm_fwu_metadata_sanity_check() beforehand? In this case, this expectation should be spelled out in the function documentation and we can use an assertion to double-check it.",
      "range": {
        "startLine": 40,
        "startChar": 23,
        "endLine": 40,
        "endChar": 50
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dd8e5a3_9898be08",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "(minor) Perhaps it\u0027s just down to personal preference but I would find it more straight forward to pass 0 as the first argument. This would say more clearly to me that we\u0027re not doing accumulative CRC computations.",
      "range": {
        "startLine": 60,
        "startChar": 21,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7050ddc_5f9e8974",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "This code assumes that crc_32 is the first field of the structure, right? If in the future other fields were to be added before crc_32 (which I guess is pretty unlikely) then they would not be covered by the CRC. Worse than that, the way the size argument is computed right now would make hw_crc32 read beyond the limits of the structure. With this in mind, would it be overkill to add a compile-time assertion on the offset of the crc32 fields (checking that offsetof(struct fwu_metadata, crc_32) \u003d\u003d 0)?",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 40
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dec7d40_b6aef4ed",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "I suspect MISRA checkers will request extra parentheses around the individual conditions...",
      "range": {
        "startLine": 79,
        "startChar": 1,
        "endLine": 80,
        "endChar": 62
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f24fae93_abb94c0f",
        "filename": "plat/arm/common/arm_fwu_metadata.c",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-11T12:27:46Z",
      "side": 1,
      "message": "(minor) Missing final \\n",
      "range": {
        "startLine": 129,
        "startChar": 56,
        "endLine": 129,
        "endChar": 58
      },
      "revId": "fc93e0d1682a72bb60f56f60fe9a954bb454a4c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}