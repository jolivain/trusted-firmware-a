{
  "comments": [
    {
      "key": {
        "uuid": "53090984_b147f4d8",
        "filename": "include/plat/arm/common/arm_reclaim_init.ld.S",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-10-19T11:20:40Z",
      "side": 1,
      "message": "This reduces existing functionality, reclaim should work for single CPU as in the current implementation.",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16ec583e_5bfdd226",
        "filename": "include/plat/arm/common/arm_reclaim_init.ld.S",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2020-10-20T13:28:45Z",
      "side": 1,
      "message": "I disagree. We can\u0027t reclaim any of the init section when there is only one stack, since the stack is used while the init section is being executed, so it must not overlap with the init section. RECLAIM_INIT_CODE as a feature makes no sense when there is only 1 core.\nWe do gain the security benefits of the init section being marked XN, but these are secondary.",
      "parentUuid": "53090984_b147f4d8",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f865a81_3bf25d22",
        "filename": "include/plat/arm/common/arm_reclaim_init.ld.S",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-10-20T13:58:48Z",
      "side": 1,
      "message": "If .init section is placed at lower address, followed by initial stack of a single CPU, after reclaiming the whole .init memory can be used for stack.",
      "parentUuid": "16ec583e_5bfdd226",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32f00249_9fe75d7d",
        "filename": "include/plat/arm/common/arm_reclaim_init.ld.S",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2020-10-29T09:54:57Z",
      "side": 1,
      "message": "This now works on a single CPU",
      "parentUuid": "9f865a81_3bf25d22",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3eec298_08332e36",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-10-19T11:20:40Z",
      "side": 1,
      "message": "This implementation just uses magic numbers, based on number of CPUs. This won\u0027t work if the size of .init section increases, i.e. by using build options like PAUTH/BTI.\nThe stack calculation should use size of .init section.",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2766b3f4_5cc0c3db",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2020-10-20T13:28:45Z",
      "side": 1,
      "message": "I agree - this is not ideal. The difficulty is that we can\u0027t calculate the required stack size in a macro (as far as I\u0027m aware) because we can\u0027t know the size of the init section.\n\nWe could make the value of PLATFORM_STACK_SIZE be a linker symbol when RECLAIM_INIT_CODE is enabled, but we\u0027d have to change some of the PSCI code, as it currently uses an immediate value. We also may or may not have enough registers free in that part of the code - I will have to investigate.\n\nWe could instead allow the total stack size to be less than the init section size. This is probably still the neatest solution, but may require a little working-out.",
      "parentUuid": "c3eec298_08332e36",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "303da5c5_38f14070",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-10-20T13:58:48Z",
      "side": 1,
      "message": "\"we can\u0027t know the size of the init section.\" \n- What is the problem here? Look at current arm_reclaim_init.ld.S: SIZEOF(.init)\n\"we\u0027d have to change some of the PSCI code, as it currently uses an immediate value\"\n- What is the problem of using values from arm_reclaim_init.ld.S, like __STACK_SIZE__ and __STACKS_END__ which are used now?\n\"We also may or may not have enough registers free in that part of the code\" \n- Which function do you mean? psci_do_pwrdown_cache_maintenance() uses stack to save X19, x20, x29 and X30 on stack, for plat_get_my_stack() no extra registers will be used.",
      "parentUuid": "2766b3f4_5cc0c3db",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5a75557_b54c0dc1",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2020-10-20T17:19:13Z",
      "side": 1,
      "message": "Perhaps I could have explained that better.\nThe value PLATFORM_STACK_SIZE is used in the PSCI code as an assembler immediate value, in a sub instruction in psci_do_pwrdown_cache_maintenance():\n\nsub x0, x19, #PLATFORM_STACK_SIZE\n\n__STACK_SIZE__ and the other symbols from the linker script can\u0027t be used as assembler immediate values - build gives the error \"undefined symbol \u003cX\u003e used as immediate value\". I think this is because the value of the symbol is not know at compile time (i.e. it is not known until link time).\npsci_do_pwrdown_cache_maintenance would need to be modified to use an adrp instruction or similar, and would require an extra register for the destination of the adrp.",
      "parentUuid": "303da5c5_38f14070",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cd83116_13be5b7b",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-10-26T14:27:54Z",
      "side": 1,
      "message": "Then don\u0027t use immediate values.\nLook at plat\\common\\aarch64\\platform_mp_stack.S and its use of __PRIMARY_STACK__, __STACKS_END__ and __STACK_SIZE__ from linker script.",
      "parentUuid": "c5a75557_b54c0dc1",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47e9dbc1_91d12655",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-10-28T11:33:40Z",
      "side": 1,
      "message": "This code is removed now, not sure why this is being blocked. The init section can now be larger that stack size and hence the build issue with lower core count is resolved.\n\nWe dont need to optimize stack sizes for lower core count and the unused init section remain as RO. Also this avoids a lot of previous complexity and makes the feature easy to understand and maintain.\n\nIf I missed some other issue, please let me know and we can discuss them.",
      "parentUuid": "0cd83116_13be5b7b",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab532a88_101782b6",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2020-10-29T09:54:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47e9dbc1_91d12655",
      "revId": "53ed3435d3cb18b09bd0c44625ccc0eb8365be70",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}