{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "874f5e0c_a2d2e930",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-26T12:14:15Z",
      "side": 0,
      "message": "aren\u0027t there more references to this flag? Aren\u0027t they redundant too? They didn\u0027t seem to do anything when I looked",
      "range": {
        "startLine": 1032,
        "startChar": 0,
        "endLine": 1033,
        "endChar": 63
      },
      "revId": "6ba7e21529d8cea6ffa5515dd6a4246bfa835050",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55eb87c6_6756b6d9",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-26T16:22:56Z",
      "side": 0,
      "message": "Yes, there could some feats which may have just added build def options and is_feat_* options without actual any use of the feat in TF-A, we are trying to review and remove them if they are not used anywhere.\n\nBut in this case FEAT_RNG seems to be used one of the platform code, \n\nhttps://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/qemu/common/qemu_stack_protector.c?h\u003dintegration#n18\n\n[...]\nu_register_t plat_get_stack_protector_canary(void)\n{\n\t/* Use the RNDR instruction if the CPU supports it */\n\tif (is_feat_rng_supported()) {\n\t\treturn read_rndr();\n\t}\n[...]",
      "parentUuid": "874f5e0c_a2d2e930",
      "range": {
        "startLine": 1032,
        "startChar": 0,
        "endLine": 1033,
        "endChar": 63
      },
      "revId": "6ba7e21529d8cea6ffa5515dd6a4246bfa835050",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9f84751_3fc76370",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-29T09:36:25Z",
      "side": 0,
      "message": "hmm, in that case, would it not make sense to either update the documentation to say that it\u0027s not an enable, since it\u0027s just an override to the accessor function OR get rid of the flag and make the accessor unconditional?",
      "parentUuid": "55eb87c6_6756b6d9",
      "range": {
        "startLine": 1032,
        "startChar": 0,
        "endLine": 1033,
        "endChar": 63
      },
      "revId": "6ba7e21529d8cea6ffa5515dd6a4246bfa835050",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15c4b035_42146a75",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-30T00:20:04Z",
      "side": 0,
      "message": "hmm, strangely the feat check function created is controlled from feat flag is set or not,\n\n[..]\n\tif ((guard) \u003d\u003d FEAT_STATE_DISABLED) {\t\t\t\t\\\n\t\treturn false;\t\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n\tif ((guard) \u003d\u003d FEAT_STATE_ALWAYS) {\t\t\t\t\\\n\t\treturn true;\t\t\t\t\t\t\\\n\t}\t\n[..]\n\nmaking this decouple with FEAT_* flag means the check id register check happens always, but the id register check should also be controlled from FEAT_* flag?\n\nSo they are related and need them together? Or I am missing something?",
      "parentUuid": "f9f84751_3fc76370",
      "range": {
        "startLine": 1032,
        "startChar": 0,
        "endLine": 1033,
        "endChar": 63
      },
      "revId": "6ba7e21529d8cea6ffa5515dd6a4246bfa835050",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d89a7c6d_effe4c09",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-30T13:33:10Z",
      "side": 0,
      "message": "yes that\u0027s right, I was thinking just to short circuit this algorithm - pass a 1 as the flag (or FEAT_STATE_ALWAYS for readability). It preserves the function of the accessors, allows the flag to be brought back later if required and \"documents\" what actually happens",
      "parentUuid": "15c4b035_42146a75",
      "range": {
        "startLine": 1032,
        "startChar": 0,
        "endLine": 1033,
        "endChar": 63
      },
      "revId": "6ba7e21529d8cea6ffa5515dd6a4246bfa835050",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7ebecb2_88095c49",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-30T14:19:56Z",
      "side": 0,
      "message": "ok, But that that short circuiting might go against certain aspects like,\nFEAT flag should dictate whether one should be reading the feature id register or certain bits allocated, this gives control to platforms to tell whether they want to read certain registers or bits overall, which I feel is a reasonable control flow without impacting the checks which are not intended to be done if FEAT is not present? IIUC, they go together?",
      "parentUuid": "d89a7c6d_effe4c09",
      "range": {
        "startLine": 1032,
        "startChar": 0,
        "endLine": 1033,
        "endChar": 63
      },
      "revId": "6ba7e21529d8cea6ffa5515dd6a4246bfa835050",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50abe80c_e3ed943d",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 1033,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-30T14:51:47Z",
      "side": 0,
      "message": "sorry, I meant FEAT_STATE_CHECK. I think both make sense to be honest, my only consideration is that it\u0027s only used in QEMU it will always be set to 2 but I guess we can leave the flexibility. I\u0027ll leave that up to you.",
      "parentUuid": "a7ebecb2_88095c49",
      "range": {
        "startLine": 1032,
        "startChar": 0,
        "endLine": 1033,
        "endChar": 63
      },
      "revId": "6ba7e21529d8cea6ffa5515dd6a4246bfa835050",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}