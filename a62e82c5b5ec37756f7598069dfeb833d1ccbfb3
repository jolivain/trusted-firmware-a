{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "03e0811b_b0245bf0",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-09T15:53:38Z",
      "side": 1,
      "message": "I was wondering, if the UUID has a predefined format as per read_uuid() function (\"aabbccdd-eeff-4099-8877-665544332211\") why do we need the length argument?\n\nThis function cannot check the size of the input/output buffers so it should be the caller responsibility to ensure that those buffers have enough space.",
      "range": {
        "startLine": 160,
        "startChar": 5,
        "endLine": 160,
        "endChar": 24
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fcf2ac4_6ff9f43d",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-04-09T17:36:25Z",
      "side": 1,
      "message": "Hmm\nThis is a good point. It\u0027s mainly to protect against use by people who don\u0027t know very much about UUIDs. Assuming they\u0027re honest about the length of their buffer, the function will fail rather than buffer-overflow.\n\nHowever, I can see that it\u0027s maybe a bit superfluous. Should I remove this?",
      "parentUuid": "03e0811b_b0245bf0",
      "range": {
        "startLine": 160,
        "startChar": 5,
        "endLine": 160,
        "endChar": 24
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58cb93a9_82b1ebc7",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-12T09:59:27Z",
      "side": 1,
      "message": "Yes, I get your point, but I am still not sure whether it\u0027d be better to check the length value here or lay that responsibility to the caller function (which is who allocates the buffer). For all we know, we could receive a valid length value and a shorter buffer here and the checks would pass.\n\nLet\u0027s see if we have any more feedback on this.",
      "parentUuid": "3fcf2ac4_6ff9f43d",
      "range": {
        "startLine": 160,
        "startChar": 5,
        "endLine": 160,
        "endChar": 24
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85bffae3_4a411eb7",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-09T15:44:12Z",
      "side": 1,
      "message": "The compiler would probably optimize this, but wouldn\u0027t it be better (slightly efficient) assert((hex_src_len \u0026 0x01) \u003d\u003d 0U) instead?",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0476c5a8_52539264",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-04-09T17:36:25Z",
      "side": 1,
      "message": "Hmm\nI disagree - this will probably be optimized to \u0027\u0026\u0027 by the compiler as you say. Even further - because this is a static function the entire assert statement is probably optimized out after constant propagation.\nIt\u0027s only there to communicate the intent that the argument should be a multiple of 2, and I think modulo communicates this most clearly.",
      "parentUuid": "85bffae3_4a411eb7",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aa3f9a3_f7b75027",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-12T09:59:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0476c5a8_52539264",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 34
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76834de3_436b0034",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-09T15:44:12Z",
      "side": 1,
      "message": "Use return values from libfdt.h",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "451c6093_be1ba844",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-04-09T17:50:57Z",
      "side": 1,
      "message": "Since this is separate from libfdt, it doesn\u0027t have libfdt.h and associated return values. I have fixed this in fdt_wrappers.c though.",
      "parentUuid": "76834de3_436b0034",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79429908_f42cb39a",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-12T09:59:27Z",
      "side": 1,
      "message": "Ohh true, I didn\u0027t realize of file path :) Thanks!!",
      "parentUuid": "451c6093_be1ba844",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "269b911a_532f409b",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-09T15:44:12Z",
      "side": 1,
      "message": "Is it mandatory to have a \u0027-\u0027 character as tuples separator? If so, it would be better to check that this character is the right one instead of just skipping it.",
      "range": {
        "startLine": 85,
        "startChar": 1,
        "endLine": 85,
        "endChar": 19
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a83aee4_e23e2bc5",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-04-09T17:36:25Z",
      "side": 1,
      "message": "Similarly to below, I think the extra validation code would clutter the function unnecessarily, for little benefit. The worst case here is that someone parses a different string of the right length with hex characters in all the right places, and it is parsed as a UUID. The extra validation is only slightly helpful.\n\nThere seems to be no great danger in ignoring the \u0027-\u0027es, as there are no memory safety issues. I agree it would be neater to validate them, but I feel that the readability penalty is quite high.\n\nWhat do you think?",
      "parentUuid": "269b911a_532f409b",
      "range": {
        "startLine": 85,
        "startChar": 1,
        "endLine": 85,
        "endChar": 19
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80322db4_d0f798d9",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-12T09:59:27Z",
      "side": 1,
      "message": "I think that depends of whether we are \"flexible\" with the UUID format or not. If it is not mandatory to have a \"-\" character there then I agree with you but otherwise we would need to do the check. Maybe one of the code owners could tell you if we can skip this check or not.",
      "parentUuid": "1a83aee4_e23e2bc5",
      "range": {
        "startLine": 85,
        "startChar": 1,
        "endLine": 85,
        "endChar": 19
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57f3a140_37429fe3",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-04-12T16:57:06Z",
      "side": 1,
      "message": "Hmm\nOn reflection I agree with you - it seems that we should parse only valid UUIDs, and throw error on invalid ones, even if this is not bad from a security point of view. I\u0027ve also realised that I can use ternary operators to keep it compact and readable.\n\nI\u0027ll put this in the next PS.",
      "parentUuid": "80322db4_d0f798d9",
      "range": {
        "startLine": 85,
        "startChar": 1,
        "endLine": 85,
        "endChar": 19
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aea0584_eb433d70",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-09T15:44:12Z",
      "side": 1,
      "message": "If the previous call to read_hex() returned error you could just return with your error code instead of keep on going. You couldn\u0027t use the value anyway and in general that would be safer than keep on going with a malformed argument.",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 32
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54534126_0223cbed",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-04-09T17:36:25Z",
      "side": 1,
      "message": "I thought long and hard about this issue when I first wrote this function.\nIn theory I agree, but the many if statements that would be required would decrease readability and distract from the main point of what the function is doing I think.\n\nAt this point, we\u0027ve already checked the length of the string so we have already traversed the full length of the input buffer if we\u0027re here, so we know it\u0027s safe to visit all parts of the string. Likewise, the read_hex() function is robust enough to any input that it should fail gracefully, and the we guarantee that the dest buffer is long enough. The worst we can do by continuing to parse is write some weird values to the dest buffer.\n\nThis seems like a fair price to pay for the neatness and readability gain.\n\nI can add this validation, though, if it seems best to you.",
      "parentUuid": "1aea0584_eb433d70",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 32
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0e26a4d_52c7d06d",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2021-04-12T09:59:27Z",
      "side": 1,
      "message": "\u003e\u003e The worst we can do by continuing to parse is write some weird values to the dest buffer.\n\nAnd what is the destination of that buffer? Are we sure that these rubbish values couldn\u0027t be used later to exploit a vulnerability?\n\nI think you have a good point but I don\u0027t feel very confident about leaving \"uncontrolled rubbish\" in a buffer. Maybe you could scrub the buffer\u0027s content at exit on an error to make it bit more robust?\n\nAlso, a small comment justifying why are you carrying on after an error might be good as well.",
      "parentUuid": "54534126_0223cbed",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 32
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54f7e875_b2c189de",
        "filename": "common/uuid.c",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-04-12T16:57:06Z",
      "side": 1,
      "message": "Well the dest buffer represents a UUID, which is in essence a random number anyway. Perhaps this function could be exploited under very specific circumstances to allow an attacker to inject an incorrect or partial UUID, but these circumstances would likely need several other things to be compromised.\n\nHowever I take your point that flushing the buffer is a good idea - I\u0027ll add this in the next PS.",
      "parentUuid": "f0e26a4d_52c7d06d",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 32
      },
      "revId": "a62e82c5b5ec37756f7598069dfeb833d1ccbfb3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}