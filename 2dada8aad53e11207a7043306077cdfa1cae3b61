{
  "comments": [
    {
      "key": {
        "uuid": "eb1c48c3_1f3e23a2",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 358,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-05-14T09:06:54Z",
      "side": 1,
      "message": "On a closer look, this function does not seem very useful, or is at least misnamed, as it does not find anything, but merely checks exactly one entry. I would fold it into search_all_xlat_entries().",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdb057a5_7dd4e3d3",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 358,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-05-14T22:28:02Z",
      "side": 1,
      "message": "I renamed the function. I felt the need to keep it as it does the following tasks:\nCompute local address, parent address, address translation range, perform bound check of the current address being translated and few debug messages.\nI felt folding this into search_all_xlat_entries might make the code less readable. Let me know if you disagree.",
      "parentUuid": "eb1c48c3_1f3e23a2",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55c007e3_1d39a836",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 370,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-05-14T09:06:54Z",
      "side": 1,
      "message": "So, as hinted before, this is not right. You need to check against a range. It just happens to work because of the particular layout of this DT.\nI detailed the algorithm in the comment in fconf_hw_config_getter.c.",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e07fa9cc_27d385e0",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 370,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-05-14T22:28:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55c007e3_1d39a836",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "624d0dbd_6782912b",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 384,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-05-14T09:06:54Z",
      "side": 1,
      "message": "That\u0027s a lot of parameters to pass on, looks like something is off here. You seem to generate those arguments below just for this function, and never use them again down there. So I would actually move that part after the longer comment into that function here, so that the prototype looks like:\nuint64_t search_all_xlat_entries(const void *dtb, const property *ranges, int local_bus_node, uint64_t address);",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8270517_051eac47",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 384,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-05-14T22:28:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "624d0dbd_6782912b",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b772558_aa073830",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 500,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-05-14T09:06:54Z",
      "side": 1,
      "message": "I would move the code below, till the call to fdtw_search_all_xlat_entries(), into that function. That would save you from passing all those variables. You should use fdt_get_property() above, then.",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "753f51a0_04c5356a",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 500,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-05-14T22:28:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b772558_aa073830",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc2b4f74_04631c40",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 500,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-05-14T22:52:56Z",
      "side": 1,
      "message": "I am not very familiar with various native libfdt APIs. Can you advise why fdt_get_property() should be used rather than fdt_getprop? I tried it locally but my runs crashed, probably due to arithmetic on the ptr(next_entry for iterating through entries in \"ranges\").",
      "parentUuid": "753f51a0_04c5356a",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9840bad8_1d590710",
        "filename": "common/fdt_wrappers.c",
        "patchSetId": 9
      },
      "lineNbr": 500,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-05-15T00:36:45Z",
      "side": 1,
      "message": "fdt_get_property() returns a pointer to a struct fdt_property, which also contains the length. So you can pass this one pointer, and get the data and the length, so can calculate the number of entries without passing this explicitly. For getting to the actual values, you would need to use prop-\u003edata then.",
      "parentUuid": "fc2b4f74_04631c40",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ad4aca4_7e84f574",
        "filename": "plat/arm/board/fvp/fconf/fconf_hw_config_getter.c",
        "patchSetId": 9
      },
      "lineNbr": 215,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-05-14T09:06:54Z",
      "side": 1,
      "message": "I think there is some misconception here of how this translation works. It should go like this:\n- You read \u003cn\u003e cells from the reg property, with \u003cn\u003e being the #address-cells of the parent. This is what fdt_get_reg_props_by_index() does for you, so that\u0027s fine.\n- *This* is start address for the translation process. There is nothing like a base address or an offset at this point, there is only one number.\n- You walk up the tree, as you do, and iterate over \"ranges\" entries, if you find them. That part seems correct so far.\n- Now, for each entry, you check whether your address falls into [child_base, child_base + size]. This is missing currently.\n- If you hit something, you subtract your address from child_base, and add this offset to the parent\u0027s base address. Also missing.\n- This becomes the next address to translate, up the tree. That part seems fine again.\n\nSo you would need to drop this base_addr/offset_addr concept from here, instead just go with one address, that you pass to the translate function. Then do a range check instead of a simple comparison when checking a \"ranges\" entry.",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8bbe1b6_9f7b3448",
        "filename": "plat/arm/board/fvp/fconf/fconf_hw_config_getter.c",
        "patchSetId": 9
      },
      "lineNbr": 215,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-05-14T22:28:02Z",
      "side": 1,
      "message": "Thanks a lot for the detailed algorithm steps. I have made the necessary changes.",
      "parentUuid": "8ad4aca4_7e84f574",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41b7ea85_ab4de940",
        "filename": "plat/arm/board/fvp/fconf/fconf_hw_config_getter.c",
        "patchSetId": 9
      },
      "lineNbr": 231,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-05-14T09:06:54Z",
      "side": 1,
      "message": "The should be fdt_read_uint32() again.",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "547800a8_671773d5",
        "filename": "plat/arm/board/fvp/fconf/fconf_hw_config_getter.c",
        "patchSetId": 9
      },
      "lineNbr": 231,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-05-14T22:28:02Z",
      "side": 1,
      "message": "For some reason, that leads to compilation error:\nplat/arm/board/fvp/fconf/fconf_hw_config_getter.c:231:8: error: \u0027phandle\u0027 may be used uninitialized in this function [-Werror\u003dmaybe-uninitialized]\n  231 |  err \u003d fdt_read_uint32(hw_config_dtb, uart_node, \"clocks\", phandle);\n      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ncc1: all warnings being treated as errors",
      "parentUuid": "41b7ea85_ab4de940",
      "revId": "2dada8aad53e11207a7043306077cdfa1cae3b61",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}