{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fccfcf2a_6030c141",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T11:57:26Z",
      "side": 1,
      "message": "Consider adding a debug assertion here:\n\n assert(metadata_ptr-\u003ekey_oid !\u003d NULL);",
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4ff5925_c528e1b0",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T12:41:10Z",
      "side": 1,
      "message": "This is fair point! \n\nBut considering why we need this function(rss_measured_boot_init) in the first place. Metadata like this is very much platform-specific. The RSS driver should not worry about the filling this metadata (It can only check wherever it gets consumed). so I feel this assert may be suitable in rss_mboot_set_signer_id function instead.\n\nI feel like we should remove \u0027rss_measured_boot_init\u0027 function and let\u0027s give the full liberty to platform to fill the metadata in its own way right before calling RSS functions. This function is seems like doing a job for the platform without doing any specific RSS activities today (like initialisation of RSS backend etc)\n\nWe may consider of renaming this metadata to rss_plat_mboot_metadata or something similar to show it is from the platform. Please let me know what do you think?",
      "parentUuid": "fccfcf2a_6030c141",
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2c7d85f_03d78a4f",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-17T09:57:56Z",
      "side": 1,
      "message": "I have covered signer-ID and key_oid assertions in this function for now. This function will be removed as a separate patch.",
      "parentUuid": "a4ff5925_c528e1b0",
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "951f4690_472907b2",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-17T12:52:28Z",
      "side": 1,
      "message": "\u003e But considering why we need this function(rss_measured_boot_init) in the first place. Metadata like this is very much platform-specific. The RSS driver should not worry about the filling this metadata (It can only check wherever it gets consumed).\n\nYes, the contents of the metadata is entirely platform-specific but the RSS measured boot backend consumes it and if it makes some assumptions like, \"the platform will never put a null pointer in this field so I can blindly dereference it\", then it is appropriate to add debug checks to make sure the platform code obeys this contract. And doing these checks upfront in the driver\u0027s init code avoids to repeat them throughout the rest of the driver\u0027s code.\n\nHowever, after double-checking, I agree that in the case of the \u0027pk_oid\u0027 field of the metadata, no such assumption is made. The only use of this field is in function rss_mboot_set_signer_id(), which simply compares it with the key oid passed in argument. So even if platform code provided a null pointer for an image\u0027s key oid, and even if rss_mboot_set_signer_id() was called with a null key oid pointer, the code would still work as expected.\n\nThus, I would like to withdraw my comment about adding any kind of debug assertions on the \u0027pk_oid\u0027 metadata field. \n\nOn the other hand, I believe we truly need the debug assertion that checks that the platform code initialized the signer_id array to all zeroes. Or do you disagree about that?\n\n\u003e so I feel this assert may be suitable in rss_mboot_set_signer_id function instead.\n\nAs said above, even there, I now think it is unneeded.\n\n\u003e I feel like we should remove \u0027rss_measured_boot_init\u0027 function and let\u0027s give the full liberty to platform to fill the metadata in its own way right before calling RSS functions. This function is seems like doing a job for the platform without doing any specific RSS activities today (like initialisation of RSS backend etc)\n\nIn the first instance, the primary purpose of rss_measured_boot_init() was to initialize the \"sw_type_size\" field of the metadata. The TC platform currently relies on macros for its \"sw_type\" strings, e.g.:\n\n struct rss_mboot_metadata tc_rss_mboot_metadata[] \u003d {\n        {\n                .id \u003d BL31_IMAGE_ID,\n                /* ... */\n\t\t.sw_type \u003d RSS_MBOOT_BL31_STRING,\n\t\t/*... */ },\n\nAt the time, we discussed [1] some options to set the corresponding \"sw_type_size\" fields. Please have a look at this past discussion. We decided to go for a dynamic computation of the sw_type_size. I am fine to challenge this today. In fact, reading the discussion again, it seems I suggested to add the runtime strlen() computation into bl1_plat_mboot_init(), which makes a major difference, since it would be platform code. Perhaps we should move it there, after all.\n\nAnd I agree then that would make the existence of rss_measured_boot_init() *almost* unjustified. Except for checking that the signer_id() is originally all zeroes. Where would you move this check, if we got rid of rss_measured_boot_init() altogether?\n\n[1] https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/16979/comment/07eafeda_47313e7a/",
      "parentUuid": "b2c7d85f_03d78a4f",
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d7e0da1_910e91a5",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T06:27:26Z",
      "side": 1,
      "message": "const uint8_t *",
      "range": {
        "startLine": 95,
        "startChar": 20,
        "endLine": 95,
        "endChar": 30
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "512f3e54_2ba1d7bd",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T08:25:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1d7e0da1_910e91a5",
      "range": {
        "startLine": 95,
        "startChar": 20,
        "endLine": 95,
        "endChar": 30
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9789914_bbf4729f",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T10:05:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "512f3e54_2ba1d7bd",
      "range": {
        "startLine": 95,
        "startChar": 20,
        "endLine": 95,
        "endChar": 30
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baf752b0_06672813",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T06:27:26Z",
      "side": 1,
      "message": "const void *pk_oid",
      "range": {
        "startLine": 107,
        "startChar": 7,
        "endLine": 107,
        "endChar": 19
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "737f4fe2_206a7824",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T08:25:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "baf752b0_06672813",
      "range": {
        "startLine": 107,
        "startChar": 7,
        "endLine": 107,
        "endChar": 19
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "434eebd5_77cf1d8c",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T10:05:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "737f4fe2_206a7824",
      "range": {
        "startLine": 107,
        "startChar": 7,
        "endLine": 107,
        "endChar": 19
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c76f8076_350259af",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T06:27:26Z",
      "side": 1,
      "message": "Why changing the type here? I think size_t was more appropriate.",
      "range": {
        "startLine": 109,
        "startChar": 7,
        "endLine": 109,
        "endChar": 19
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9763e7b2_e17f8c80",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T08:25:20Z",
      "side": 1,
      "message": "Here I was matching the callee type, but leaving this as size_t seems more logical as it is always bigger than unsigned int, so I\u0027ll leave it as that.",
      "parentUuid": "c76f8076_350259af",
      "range": {
        "startLine": 109,
        "startChar": 7,
        "endLine": 109,
        "endChar": 19
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28a897cd_d2a95d96",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T10:05:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9763e7b2_e17f8c80",
      "range": {
        "startLine": 109,
        "startChar": 7,
        "endLine": 109,
        "endChar": 19
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96f23586_3f2ff512",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T11:57:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9763e7b2_e17f8c80",
      "range": {
        "startLine": 109,
        "startChar": 7,
        "endLine": 109,
        "endChar": 19
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08e0f334_1ed79daa",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T06:27:26Z",
      "side": 1,
      "message": "I think lines 132-137 deserve a comment.",
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6de85dda_77388bc7",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T08:25:20Z",
      "side": 1,
      "message": "Ok, will add the ccomment.",
      "parentUuid": "08e0f334_1ed79daa",
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "889a699d_95bf9901",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T10:05:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6de85dda_77388bc7",
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27025e83_403bef27",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T11:57:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6de85dda_77388bc7",
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32c85dd7_12b3be6a",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T06:27:26Z",
      "side": 1,
      "message": "Should this rather be metadata_ptr-\u003epk_oid?",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d84fe92f_659aaf4f",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T06:32:56Z",
      "side": 1,
      "message": "No, sorry scratch that. I got things mixed up with the NULL OID. This check is meant to check whether we\u0027ve already set the signer id field.\n\nBut didn\u0027t we say this should be a debug assertion rather? AFAIU it should never happen, right?",
      "parentUuid": "32c85dd7_12b3be6a",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f309b02_0572373d",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T08:25:20Z",
      "side": 1,
      "message": "As I recall, we discussed this internally, initially with the idea of putting assert, but then encountered a case where this should have been done in all cases. See your below comment-\n \"as plat_publish_key() / rss_mboot_set_signer_id() might fail (if the hash computation makes \n sense), in which case the signer_id field will be left unchanged. So I think it would be good \n for those cases if the signer id had a sane default, which the measured boot / attestation \n code can clearly identify.\"",
      "parentUuid": "d84fe92f_659aaf4f",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "300fbc3c_b55ebc21",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T08:35:56Z",
      "side": 1,
      "message": "Sorry, that\u0027s not what I meant, I\u0027ll try to explain again.\n\nI still think we need a debug assertion to check whether metadata_ptr-\u003esigner_id \u003d\u003d 0 before we call memcpy() on it.\n\nI also think we should make sure that metadata_ptr-\u003esigner_id is originally initialized to 0 before we even call rss_mboot_set_signer_id() for the first time. And this should already be the case, since fvp_rss_mboot_metadata is statically declared and initialized. So there\u0027s no code to add for that.\n\nIs that clearer?",
      "parentUuid": "2f309b02_0572373d",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd2401db_9ffc3479",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T08:59:46Z",
      "side": 1,
      "message": "\u003e Sorry, that\u0027s not what I meant, I\u0027ll try to explain again.\nAh, I think misunderstood that comment. It was for initialising the signer_id and that is not needed.\n\u003e I still think we need a debug assertion to check whether metadata_ptr-\u003esigner_id \u003d\u003d 0 before we call memcpy() on it.\nThis hardening check will be helpful in detecting invalid cases where rss_mboot_set_signer_id() gets called twice with the same key OID to avoid possible overwriting (with bad data or same data) in release build case also right? or you still think that we treat this as a programming error and go ahead with assertion.\n\u003e I also think we should make sure that metadata_ptr-\u003esigner_id is originally initialized to 0 before we even call rss_mboot_set_signer_id() for the first time\nYes, I think we should rely compile time initialization.",
      "parentUuid": "300fbc3c_b55ebc21",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a93c51c_cdf44e34",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T11:57:26Z",
      "side": 1,
      "message": "\u003e \u003e I still think we need a debug assertion to check whether metadata_ptr-\u003esigner_id \u003d\u003d 0 before we call memcpy() on it.\n\u003e This hardening check will be helpful in detecting invalid cases where rss_mboot_set_signer_id() gets called twice with the same key OID to avoid possible overwriting (with bad data or same data) in release build case also right? or you still think that we treat this as a programming error and go ahead with assertion.\n\nLet\u0027s try to list all possible reasons why this check might fail.\n\n1. The signer_id field was not properly initialized to 0 prior to the first call to rss_mboot_set_signer_id(). That\u0027s a bug in the platform layer. BTW we should list this assumption explicitly in the porting guide. We could also add a debug assertion in rss_measured_boot_init() to check that each entry\u0027s signer id field is all zeroes.\n\n2. rss_mboot_set_signer_id() is called a second time with the same OID but a different key. We cannot have 2 distinct keys with the same OID, this is a bug.\n\nI can\u0027t think of any other use cases. Both of them cannot happen under normal circumstances so we should use debug assertions for them.",
      "parentUuid": "cd2401db_9ffc3479",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03f51302_c3309343",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-14T09:13:26Z",
      "side": 1,
      "message": "Okay, thanks! let\u0027s go ahead with assertion then. I will update the porting guide.\nRegarding adding assertion in rss_measured_boot_init(), please look at my above comment.",
      "parentUuid": "4a93c51c_cdf44e34",
      "range": {
        "startLine": 132,
        "startChar": 16,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66c87e0f_cfe445c1",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T06:27:26Z",
      "side": 1,
      "message": "I would keep the original comment:\n\n /* If image is not present in metadata array then skip */",
      "range": {
        "startLine": 144,
        "startChar": 1,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03c25002_fc5163dc",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-13T08:59:46Z",
      "side": 1,
      "message": "This is not only case where this function returns 0. There are 2 cases -\n\n1. If image is not present in metadata array then skip and return success\n2. Compute hash and fill the signer_id details and return success.\n\nAs the flow is fairly clear, adding a comment here is not required IMHO",
      "parentUuid": "66c87e0f_cfe445c1",
      "range": {
        "startLine": 144,
        "startChar": 1,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b362b17_5e0f3f40",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-07-13T11:57:26Z",
      "side": 1,
      "message": "Good point, thanks. I had missed the second case.\n\nI still think we should add a comment to clarify that this is the intended behaviour and not something we overlooked, though. Perhaps we should add one above the loop, like:\n\n /*\n  * Do an exhaustive search over the platform metadata to find all images whose\n  * key OID matches the one passed in argument.\n  *\n  * Note that it is not an error if do not get any matches.\n  * The platform may decide not to measure all of the images in the system.\n  */",
      "parentUuid": "03c25002_fc5163dc",
      "range": {
        "startLine": 144,
        "startChar": 1,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b86fdce_7474bbc0",
        "filename": "drivers/measured_boot/rss/rss_measured_boot.c",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-07-14T09:13:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4b362b17_5e0f3f40",
      "range": {
        "startLine": 144,
        "startChar": 1,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "ebd32edbd2d92a9952b974200534fb1a6c862719",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}