{
  "comments": [
    {
      "key": {
        "uuid": "a6474131_cea82495",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-02-11T14:28:07Z",
      "side": 1,
      "message": "I still don\u0027t understand the issue to the bottom...\n\nIIUC, the issue arises if I want to use an ECDSA ROTPK. So I am compiling with ARM_ROTPK_LOCATION\u003ddevel_ecdsa and ROT_KEY\u003dplat/arm/board/common/rotpk/arm_rotprivk_ecdsa.pem. What happens next is, the hash file is generated from this ECDSA key, except that openssl is told that it is an RSA key. IOW, we execute the following command at line 53:\n\n openssl rsa -in plat/arm/board/common/rotpk/arm_rotprivk_ecdsa.pem -pubout -outform DER | \\\n   openssl dgst -sha256 -binary \u003e plat/arm/board/common/rotpk/arm_rotpk_ecdsa_sha256.bin\n\nIf I type this command, openssl throws an error at me, as it correctly detects that it didn\u0027t get the private key in the expected format:\n\n 140238993356440:error:0607907F:digital envelope routines:EVP_PKEY_get1_RSA:expecting an rsa key:p_lib.c:279:\n\nSo if my understanding is correct so far, I don\u0027t understand why this didn\u0027t fail to build... Can you please help me understand?",
      "revId": "698e231d928752e7877bfd5482c0fca6509108cc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99299df1_013cffd7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2020-02-11T15:07:01Z",
      "side": 1,
      "message": "Since we are not parsing output of openssl - it is actually indeed failing silently. If you try generating the ECDSA hash in original patch - there is an error at the start of the output: \n\nerror:0607907F:digital envelope routines:EVP_PKEY_get0_RSA:expecting an rsa key\n\nThe bad thing about this - it still writes something weird to the file.\nI tried to address that by getting execution result from OpenSSL. Unfortunately, OpenSSL still returns 0 in this case - the only way to catch this error is to parse stderr.\n\nI am sure we should do something about this, but I would prefer doing it in a separate patch.",
      "parentUuid": "a6474131_cea82495",
      "revId": "698e231d928752e7877bfd5482c0fca6509108cc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "934c658d_b2a25fed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-02-11T15:26:05Z",
      "side": 1,
      "message": "\u003e Since we are not parsing output of openssl - it is actually indeed failing silently. If you try generating the ECDSA hash in original patch - there is an error at the start of the output: \n\u003e \n\u003e error:0607907F:digital envelope routines:EVP_PKEY_get0_RSA:expecting an rsa key\n\u003e \n\u003e The bad thing about this - it still writes something weird to the file.\n\u003e I tried to address that by getting execution result from OpenSSL. Unfortunately, OpenSSL still returns 0 in this case - the only way to catch this error is to parse stderr.\n\nAh OK, that makes sense, I didn\u0027t notice the openssl tool still returned 0 in this case. It\u0027s unfortunate but makes it more difficult to work around it in a Makefile, as you said...\n\n\u003e I am sure we should do something about this, but I would prefer doing it in a separate patch.\n\nSure, no problem! I would prefer it as well, I was just trying to understand. Thanks for the explanations!",
      "parentUuid": "99299df1_013cffd7",
      "revId": "698e231d928752e7877bfd5482c0fca6509108cc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afa8d713_122902fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-02-11T14:36:50Z",
      "side": 1,
      "message": "I also don\u0027t understand that. I thought that KEY_ALG indicated the encryption algorithm to use for generating keys. Now, most of the time, we provide an existing ROTPK (via ROT_KEY\u003dpath/to/key.pem) so cert_create does not need to generate it and KEY_ALG only applies to all other subsidiary keys that cert_create has to generate. But in the event where the ROTPK also has to be generated (which I think is a valid use case in a development environment) then I thought that KEY_ALG would also dictate which algo to use for the ROTPK.\n\nIs my understanding correct? Do we not support generating a development ROTPK?",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 27
      },
      "revId": "698e231d928752e7877bfd5482c0fca6509108cc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2282f9e5_40bc3bf1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2020-02-11T15:07:01Z",
      "side": 1,
      "message": "This was my understanding originally. But KEY_ALG is used only by cert_create as you rightfully mentioned. And we are not using that to generate ROTPK.\nEssentially - only ARM_ROTPK_LOCATION and ROT_KEY have to use the same encryption. We can generate subsequent certificates using another encryption algorithm. This situation is covered in \n\ntf_config/fvp-tbb-mbedtls-rsa-ecdsa-with-rsa-rotpk-ecdsa-cert\ntf_config/fvp-tbb-mbedtls-rsa-ecdsa-with-ecdsa-rotpk-rsa-cert\n\nIf you look at the configuration - we are mixing encryption methods for ROTPK and subsequent keys.\n\nI agree this is not clear at all from documentation and has to be properly documented.",
      "parentUuid": "afa8d713_122902fe",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 27
      },
      "revId": "698e231d928752e7877bfd5482c0fca6509108cc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60c36f66_d9df1ab8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-02-11T15:26:05Z",
      "side": 1,
      "message": "OK, thanks. Indeed we should revisit the documentation. Or revisit the build options. For example, we could consider not specifying the key algo through ARM_ROTPK_LOCATION, only use it for specifying the key location (devel or registers or else) and let us deduce the key algo from the ROT_KEY file (assuming that\u0027s possible). That way, there could not be any mismatch because the info would be specified in one place only.\n\nAnyway, something to look into the future.",
      "parentUuid": "2282f9e5_40bc3bf1",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 27
      },
      "revId": "698e231d928752e7877bfd5482c0fca6509108cc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}