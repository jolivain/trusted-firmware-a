{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "294ed3f8_b0ec1838",
        "filename": "docs/design/cpu-specific-build-macros.rst",
        "patchSetId": 1
      },
      "lineNbr": 779,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-12-13T21:24:25Z",
      "side": 1,
      "message": "I would remove this and keep it consistent with the rest. For ones NOT affecting all configurations, we could take care in the documentation or around the mitigation as it will only be applied conditionally.",
      "range": {
        "startLine": 779,
        "startChar": 2,
        "endLine": 779,
        "endChar": 30
      },
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acead21e_5a0ef636",
        "filename": "docs/design/cpu-specific-build-macros.rst",
        "patchSetId": 1
      },
      "lineNbr": 779,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-14T17:06:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "294ed3f8_b0ec1838",
      "range": {
        "startLine": 779,
        "startChar": 2,
        "endLine": 779,
        "endChar": 30
      },
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b009c14_a644c801",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2023-12-12T19:58:08Z",
      "side": 1,
      "message": "@Harrison I have a small doubt, should we be passing the GET_CPU_REV parameter as well here since we have it as a condition to check the get_cpu_rev_var function?. If x0 still holds the cpu_rev_var value, then we might not need to pass the GET_CPU_REV.",
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52487203_de8834de",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-13T12:26:00Z",
      "side": 1,
      "message": "I thought so as well initially but when testing I found that this might not work if the previous errata isn\u0027t enabled since the call to get_rev_var is conditionally compiled. Can we guarantee that the two errata will always be enabled together?",
      "parentUuid": "1b009c14_a644c801",
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9bc598c_45b6b9ef",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2023-12-13T15:27:03Z",
      "side": 1,
      "message": "As far as I know, it can depend on platforms. If the platform decides that the errata may affect performance or they don\u0027t want it enabled, then they can proceed to leave the errata disabled. @Bipin can confirm.",
      "parentUuid": "52487203_de8834de",
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c46b8477_8618857a",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-12-13T18:18:37Z",
      "side": 1,
      "message": "Good point, but we don\u0027t know the combination of errata enabled in each platform, so I would keep each errata implementation independently working on it\u0027s own. What if, there is a new errata ID that comes before(in terms of the number) and someone unaware of this optimization might insert the new errata mitigation between the two.",
      "parentUuid": "c9bc598c_45b6b9ef",
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e616b0b8_79bf4879",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-14T17:06:31Z",
      "side": 1,
      "message": "Yes that\u0027s a valid point. I added this optimization originally but did not really consider this scenario. I think the original approach where we called get_cpu_rev_var outside the errata was probably optimal. Outside of making optimizations to the compiler i\u0027m not sure what the best way to avoid the call when we already have the result.",
      "parentUuid": "c46b8477_8618857a",
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64d5f20a_9ef7a6bd",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2023-12-15T20:46:04Z",
      "side": 1,
      "message": "@Harrison, when you tested x10 retains the value of cpu_rev_var and so we don\u0027t have to add the GET_CPU_REV macro correct to apply_erratum right?",
      "parentUuid": "e616b0b8_79bf4879",
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e24da198_6a94ef19",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-12-18T12:35:19Z",
      "side": 1,
      "message": "Ah - sorry, forgot to revert the change. The macro applies the call to get_cpu_rev_var by default, otherwise we are gambling that another errata has stashed the revision in x10. Here is the disassembly of the power down function for you reference.\n\n```\n00000000040051fc \u003ccortex_x3_core_pwr_dwn\u003e:\n 40051fc:\td538f2e1 \tmrs\tx1, s3_0_c15_c2_7\n 4005200:\tb2400021 \torr\tx1, x1, #0x1\n 4005204:\td518f2e1 \tmsr\ts3_0_c15_c2_7, x1\n 4005208:\taa1e03e9 \tmov\tx9, x30\n 400520c:\t94000022 \tbl\t4005294 \u003ccpu_get_rev_var\u003e\n 4005210:\taa0003ea \tmov\tx10, x0\n 4005214:\t9400017d \tbl\t4005808 \u003cerratum_cortex_x3_2743088_wa\u003e\n 4005218:\taa0903fe \tmov\tx30, x9\n 400521c:\td5033fdf \tisb\n 4005220:\td65f03c0 \tret\n```\n\nI hope this answers your question. ðŸ˜Š",
      "parentUuid": "64d5f20a_9ef7a6bd",
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b352c8e_53181394",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2023-12-18T17:21:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e24da198_6a94ef19",
      "revId": "4f1967d99715a3f15b142320bb008e2a421c5a33",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}