{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7c1e4f9a_47abc9eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-03-25T16:23:21Z",
      "side": 1,
      "message": "The issue with this optimization is that if a platform can cause spurious wake-ups for CPUs (pwr controller returns error but the CPU starts running anyway), then this optimization will lead to spurious ON CPU not being caught in firmware and will end up progressing further onto NS boot with possible partially corrupted context.\n\nI am curious in know about the optimization achieved here. The caller CPU is doing a context init which is supposed to be quick. The lock will not be held for any significant time. Do we have some numbers on the performance gain ?",
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64a10469_bcedb924",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2022-03-30T10:06:40Z",
      "side": 1,
      "message": "I dont think that spurious wakeup is a concern. psci_warmboot_entrypoint already catches (and panics) such wakeups even before this function is called. On Tegra platforms, the check from psci_warmboot_entrypoint has caught some real issues. But we have seen no issues after removing the lock in the CPU ON path.\n\nOn Tegra Si platforms we have seen gains of uS and on slower pre-si platforms we have seen gains of minutes.",
      "parentUuid": "7c1e4f9a_47abc9eb",
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be0cc35a_1faee3cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-04-01T12:49:02Z",
      "side": 1,
      "message": "Hmm, the power controller not behaving well may not be a concern at the moment but given that it shows measureable performance improvement merits the change.\n\nAs Raghu points out, we would need to ensure ordering of the update to context. I have given a comment to this regard.",
      "parentUuid": "64a10469_bcedb924",
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f4365b6_bf7d2833",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-04-01T12:56:59Z",
      "side": 1,
      "message": "Also would be worth to measure the performance with additional barrier vs the spin_lock in the ON path. ",
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11b2fa56_22ba707d",
        "filename": "lib/psci/psci_on.c",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-04-01T12:49:02Z",
      "side": 1,
      "message": "Need a dsbsy() here to ensure ordering.",
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83776477_446afe4f",
        "filename": "lib/psci/psci_on.c",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2022-04-04T12:19:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "11b2fa56_22ba707d",
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dc8e90d_79b0e116",
        "filename": "lib/psci/psci_on.c",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-03-25T06:50:10Z",
      "side": 1,
      "message": "isnt the problem also that any subscriber to this event can modify the ns context at the same time?\nalso it is possible that you are missing a barrier after cm_init_context_by_index. In theory, a core could reorder it past psci_plat_pm_ops-\u003epwr_domain_on(target_cpu), at which point the cpu being turned on can still race .",
      "range": {
        "startLine": 219,
        "startChar": 15,
        "endLine": 219,
        "endChar": 33
      },
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd872523_00ebd13e",
        "filename": "lib/psci/psci_on.c",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2022-03-30T09:53:24Z",
      "side": 1,
      "message": "In the previous code this was a problem. But with the proposed change here, the NS context is created before the CPU power on and the PUBLISH_EVENT. I believe this approach removes dependency on the locks.\n\nThe argument for a barrier seems hypothetical, and I dont know if that is a real world scenario. But if there is consensus that a barrier is required, I will add one.",
      "parentUuid": "7dc8e90d_79b0e116",
      "range": {
        "startLine": 219,
        "startChar": 15,
        "endLine": 219,
        "endChar": 33
      },
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23d45ee0_9f7d56ff",
        "filename": "lib/psci/psci_on.c",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-03-30T20:40:48Z",
      "side": 1,
      "message": "Hi Varun, this was not a problem in previous code because the update to NS context was inside the crictical section and the spin_unlock ensures ordering of the writes w.r.t to the other core.\nThis is not a hypothetical situation and it can/will happen on real platforms, specially given that this is common code. Moreover, code should be architecturally correct. We can wait for Soby to agree/disagree on the need for barrier, assuming the change itself is okay due to the concerns with spurious wakeup.",
      "parentUuid": "dd872523_00ebd13e",
      "range": {
        "startLine": 219,
        "startChar": 15,
        "endLine": 219,
        "endChar": 33
      },
      "revId": "be0dde7f3d125b801da508d79509bdfa3e5b89db",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}