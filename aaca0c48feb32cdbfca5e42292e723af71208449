{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a637c18a_3781e3d1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-03-30T06:48:35Z",
      "side": 1,
      "message": "I would do something like \"one or more bits to specific values at reset.\"\nJust to clarify, the emphasis is most of the mitigations happen on boot after reset. Actual operation could be \"set OR clear OR a write of 2\u0027b01/2\u0027b00/2\u0027b11/2\u0027b10 etc. (as an e.g.)\" to some CPU register after reset. The framework should support one or more bits.",
      "range": {
        "startLine": 15,
        "startChar": 16,
        "endLine": 15,
        "endChar": 21
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a560750c_947e242b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-30T16:16:51Z",
      "side": 1,
      "message": "I understand that, but that\u0027s not the purpose of this line. All it means to do is assert that they are similar and writing a bit at reset covers a majority of cases without being too specific. The framework supports any arbitrary combination, but that\u0027s not important here.",
      "parentUuid": "a637c18a_3781e3d1",
      "range": {
        "startLine": 15,
        "startChar": 16,
        "endLine": 15,
        "endChar": 21
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aac2da01_b79602af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-04-04T06:59:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a560750c_947e242b",
      "range": {
        "startLine": 15,
        "startChar": 16,
        "endLine": 15,
        "endChar": 21
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec62fb44_98361163",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 25,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-03-30T06:48:35Z",
      "side": 1,
      "message": "nit: This looks a bit busy. If the erratum number is simplified and  give a generic CPU register name, probably could be concise.  If you rather prefer a real erratum number, feel free to ignore the above comment but rather remove/adjust the tabs and/or use spaces.\n\nworkaround_reset_start cortex_a77, ERRATUM(X), ERRATA_A77_X\n       sysreg_bit_set CORTEX_A77_CPUREG, CORTEX_A77_CPUREG_BIT_8\nworkaround_reset_end cortex_a77, ERRATUM(X)\ncheck_erratum_ls cortex_a77, ERRATUM(X), CPU_REV(1, 1)",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 25,
        "endChar": 61
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b648d506_ea8d4118",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 25,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-30T16:16:51Z",
      "side": 1,
      "message": "I\u0027ve reduced the indentation to 2 spaces. The real erratum is intentional as I want the example to be concrete and traceable.",
      "parentUuid": "ec62fb44_98361163",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 25,
        "endChar": 61
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ef13636_66deaa3e",
        "filename": "include/lib/cpus/aarch64/cpu_macros.S",
        "patchSetId": 19
      },
      "lineNbr": 418,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-03-30T08:19:40Z",
      "side": 1,
      "message": "Might want to document this. \n\n1. There is an ISB probably at the end of the reset function, which makes sure all bits written by the MSR instruction reflects in the concerned register, before the instruction after the ISB. With the macro, ISB still exists but isn\u0027t clear where it is for a new erratum implementer.\n\n2. if ENABLE_ASSERTIONS is enabled, MRS happens without an ISB after MSR. For this testing of bits purpose, this might be ok as the register written to and read from are same and hence might cause a dependency. For our purpose even if this results aren\u0027t written to final register(or sits in some intermediate shadow regs), we are still good as long as we get the right value written, as we are not worried about seeing/testing the functional effect of the bit after the write. \n\nDespite this argument, should we still add the ISB within the ENABLE_ASSERTIONS before MRS?\n\n\n3. For \"2 or more bits cases\", do we have to do this multiple times?",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 418,
        "endChar": 15
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc1a5c79_2b6355e8",
        "filename": "include/lib/cpus/aarch64/cpu_macros.S",
        "patchSetId": 19
      },
      "lineNbr": 418,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-04-03T15:04:33Z",
      "side": 1,
      "message": "1. the macro is only concerned with the setting of the bit. The isb has nothing to do with it, and an intended use-case is using this several times one after the other. The runtime errata macro has an isb embedded and the reset function also has one, so the implementer doesn\u0027t even have to think about isbs here. Maybe I can add a mention on the reset macro that an isb will be included?\n\n2. The way I understand it is that the mrs has a dependency on the register so the value from the msr is guaranteed and the isb is only for side-effects. Since the assert is not concerned with side effects, it doesn\u0027t need it. So I don\u0027t see a reason to add an isb here.\n\n3. There\u0027s nothing stopping anyone from using it this way I don\u0027t think. But I haven\u0027t encountered that use case, so I haven\u0027t considered it.",
      "parentUuid": "7ef13636_66deaa3e",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 418,
        "endChar": 15
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5856ff75_50a82023",
        "filename": "include/lib/cpus/aarch64/cpu_macros.S",
        "patchSetId": 19
      },
      "lineNbr": 418,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-04-04T06:59:55Z",
      "side": 1,
      "message": "I agree for the specific case of the assert there is no issue because of the register hazard at hardware level but would add the comment for clarity as the ISB sits somewhere else, it maynot be that obvious.",
      "parentUuid": "dc1a5c79_2b6355e8",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 418,
        "endChar": 15
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1de84b62_4b393cb2",
        "filename": "include/lib/cpus/aarch64/cpu_macros.S",
        "patchSetId": 19
      },
      "lineNbr": 418,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-04-04T10:42:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5856ff75_50a82023",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 418,
        "endChar": 15
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4511300_7e6af3b7",
        "filename": "include/lib/cpus/cpu_ops.h",
        "patchSetId": 19
      },
      "lineNbr": 61,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-03-30T06:48:35Z",
      "side": 1,
      "message": "CPU_CPU is it intentional?",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 15
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07a0a5be_1dc8e972",
        "filename": "include/lib/cpus/cpu_ops.h",
        "patchSetId": 19
      },
      "lineNbr": 61,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-30T16:16:51Z",
      "side": 1,
      "message": "Yes, but I wasn\u0027t sure if I should keep it. It\u0027s because all of these defines are prefixed with CPU but then this particular value is called CPU_STR_SIZE. Not sure.",
      "parentUuid": "a4511300_7e6af3b7",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 15
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68def2ac_7123ffc8",
        "filename": "include/lib/cpus/cpu_ops.h",
        "patchSetId": 19
      },
      "lineNbr": 61,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-04-04T06:59:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "07a0a5be_1dc8e972",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 15
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6632b34_d4073565",
        "filename": "include/lib/cpus/errata.h",
        "patchSetId": 19
      },
      "lineNbr": 2,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2023-03-30T06:48:35Z",
      "side": 1,
      "message": "nit: Since we changed the header for the date, can we do Arm for all instances where it was changed?",
      "range": {
        "startLine": 2,
        "startChar": 28,
        "endLine": 2,
        "endChar": 31
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66ef05e3_075dd2f3",
        "filename": "include/lib/cpus/errata.h",
        "patchSetId": 19
      },
      "lineNbr": 2,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-30T16:16:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e6632b34_d4073565",
      "range": {
        "startLine": 2,
        "startChar": 28,
        "endLine": 2,
        "endChar": 31
      },
      "revId": "aaca0c48feb32cdbfca5e42292e723af71208449",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}