{
  "comments": [
    {
      "key": {
        "uuid": "7cea73fe_7a0da1de",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-08-12T15:46:21Z",
      "side": 1,
      "message": "I was wondering why this up-converting is needed. Why does MISRA complain about it?",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42a30aa9_68759503",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000272
      },
      "writtenOn": "2020-08-12T16:07:02Z",
      "side": 1,
      "message": "Looking at is_valid_fast_smc (coppied below)\n/* The macro below is used to identify a valid Fast SMC call */\n#define is_valid_fast_smc(_fid)\t\t((!(((_fid) \u003e\u003e 16) \u0026 U(0xff))) \u0026\u0026 \\\n\t\t\t\t\t   (GET_SMC_TYPE(_fid) \u003d\u003d SMC_TYPE_FAST))\n\nIt looks like SMC_TYPE_FAST is a ULL or uint64_t, requiring the upcast for the comparison. From my look through the log, SMC_TYPE_FAST has been uint64_t for a while.",
      "parentUuid": "7cea73fe_7a0da1de",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82e7fcde_fb35e1b1",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-08-12T18:00:22Z",
      "side": 1,
      "message": "The function identifier is always 32 bit irrespective of SMC32/SMC64 call either from aarch32 or aarch64 state. May be we need to make the macro SMC_TYPE_FAST to be of constant size (32). Do you think declaring it UL(1) will help?",
      "parentUuid": "42a30aa9_68759503",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5723bfc1_4d6410d3",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000272
      },
      "writtenOn": "2020-08-13T19:59:02Z",
      "side": 1,
      "message": "So I have been trying this for a bit, and I have found that I would need to define SMC_TYPE_FAST as U(1) (which I think is totally nonsense, as it would make it 8 bits wide [1]). I\u0027m going to use a compromise, which defines SMC_TYPE_FAST as UL(1) (which it\u0027s my understanding that this would be a 32 bit type, but in my testing it seems to think that this is 64 bit), and also casts it to a uint32_t before using it in the comparison in the is_valid_fast_smc macro.\n\n[1] I have evidence that coverity treats U(1) as 8 bits elsewhere in this patch. Also, the following defect, not fixed by this patch, indicates that U(1) is treated as 8 bits.\n    plat/arm/common/arm_tzc400.c:28:[MISRA C-2012 Rule 12.2 (required)] In \n    expression \"1U \u003c\u003c 16\", shifting more than 7 bits, the number of bits \n    in the essential type of the left expression, \"1U\", is not allowed.\n    The shift amount is 16.",
      "parentUuid": "82e7fcde_fb35e1b1",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb80eb02_fd016afa",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-08-13T20:32:01Z",
      "side": 1,
      "message": "Sounds good to me. I am surprised that coverity is treating U(1) as 8 bits. Doesnt U refer to \"unsigned int\" which has to be at least 32 bits wide. Is coverity treating U as \"unsigned char\"?",
      "parentUuid": "5723bfc1_4d6410d3",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a542fdf4_423922a9",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2020-08-14T03:15:55Z",
      "side": 1,
      "message": "As per MISRA standard, I got below information:\n\"Misra defines it\u0027s own concept of \"underlying type\" which, for constants, is the smallest type they can fit into. This mean that U(1) has the MISRA underlying type unsigned char\"",
      "parentUuid": "cb80eb02_fd016afa",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}