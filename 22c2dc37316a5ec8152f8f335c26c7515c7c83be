{
  "comments": [
    {
      "key": {
        "uuid": "7cea73fe_7a0da1de",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-08-12T15:46:21Z",
      "side": 1,
      "message": "I was wondering why this up-converting is needed. Why does MISRA complain about it?",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42a30aa9_68759503",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000272
      },
      "writtenOn": "2020-08-12T16:07:02Z",
      "side": 1,
      "message": "Looking at is_valid_fast_smc (coppied below)\n/* The macro below is used to identify a valid Fast SMC call */\n#define is_valid_fast_smc(_fid)\t\t((!(((_fid) \u003e\u003e 16) \u0026 U(0xff))) \u0026\u0026 \\\n\t\t\t\t\t   (GET_SMC_TYPE(_fid) \u003d\u003d SMC_TYPE_FAST))\n\nIt looks like SMC_TYPE_FAST is a ULL or uint64_t, requiring the upcast for the comparison. From my look through the log, SMC_TYPE_FAST has been uint64_t for a while.",
      "parentUuid": "7cea73fe_7a0da1de",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82e7fcde_fb35e1b1",
        "filename": "lib/psci/psci_main.c",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-08-12T18:00:22Z",
      "side": 1,
      "message": "The function identifier is always 32 bit irrespective of SMC32/SMC64 call either from aarch32 or aarch64 state. May be we need to make the macro SMC_TYPE_FAST to be of constant size (32). Do you think declaring it UL(1) will help?",
      "parentUuid": "42a30aa9_68759503",
      "revId": "22c2dc37316a5ec8152f8f335c26c7515c7c83be",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}