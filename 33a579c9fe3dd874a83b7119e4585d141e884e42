{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "746a292f_20c00499",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-10-17T23:01:51Z",
      "side": 1,
      "message": "AFAICS, This function is meant to be called from SError vector in which case this check is probably redundant ? If EC is not corresponding to SError, then there is a programming error in which case an assert would be useful.\n\nThe DFSC check will also probably be true and would be redundant I think (but would be good to confirm)",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 202,
        "endChar": 8
      },
      "revId": "33a579c9fe3dd874a83b7119e4585d141e884e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b0075ea_3a2f94de",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-10-19T12:25:04Z",
      "side": 1,
      "message": "I agree with first point, however, DFSC check before AET is indeed required.",
      "parentUuid": "746a292f_20c00499",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 202,
        "endChar": 8
      },
      "revId": "33a579c9fe3dd874a83b7119e4585d141e884e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c7f6dba_9e0d313a",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-11-03T17:33:47Z",
      "side": 1,
      "message": "Sorry to come back on this.\nx1 contains ESR_EL3 as freshly retrieved at line 150:\nhttps://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/17130/2..7/bl31/aarch64/ea_delegate.S#150\n\nThe checks following below are only meaningful when ESR_EL3.EC\u003d0x2f (SError interrupt).\nI don\u0027t see why it would relate to a programming error if the HW reported another EC value for some reason when read from the system register.\nAssuming the EC value reported by the HW is correct because it has hit the SError vector looks a short cut to me.",
      "parentUuid": "4b0075ea_3a2f94de",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 202,
        "endChar": 8
      },
      "revId": "33a579c9fe3dd874a83b7119e4585d141e884e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dafdd6bf_b52c05bc",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-04T09:46:11Z",
      "side": 1,
      "message": "This function is only meant to be invoked for SError. The enter_lower_el_async_ea() and handle_lower_el_async_ea() are invoked when SError is encoutered. The other callers of this function also do the same thing (AFAICS).\n\nSo, in case ESR does not correspond to SError, then it can only mean one of the 2 things: the hardware is broken (in which case we should probably panic) or the developer has made a mistake  in calling this function for some other exception (in which case we should assert). Returning silently from here if Syndrome is not SError will  only hide a bigger problem IMO.\n\nHaving an assert here would be good to establish function expectation that this is only to be invoked for SError.",
      "parentUuid": "1c7f6dba_9e0d313a",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 202,
        "endChar": 8
      },
      "revId": "33a579c9fe3dd874a83b7119e4585d141e884e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4d2f538_d94ea878",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-11-04T09:54:58Z",
      "side": 1,
      "message": "\u003e in case ESR does not correspond to SError, then it can only mean one of the 2 things: the hardware is broken (in which case we should probably panic)\nYes this was my main argument. Are we trusting 100% the HW will behave correctly in all ways? As we are assuming hitting SError exception vector forcibly reports the correct ESR_EL3.EC. As I see there is a lot of impdef possibility in th RAS space (not this specifically). I\u0027m just worried we\u0027re making an assumption which *may* be wrong under certain circumstances if the HW (impdef side) has some flaw. I agree that panicing (or asserting) is probably a right choice.",
      "parentUuid": "dafdd6bf_b52c05bc",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 202,
        "endChar": 8
      },
      "revId": "33a579c9fe3dd874a83b7119e4585d141e884e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5225a1e4_9b48af81",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-04T10:03:09Z",
      "side": 1,
      "message": "Ok, let\u0027s panic in that case. It is stronger guarantee of the 2 and this is not a performance critical code path so an additional cmp will not be an issue.",
      "parentUuid": "b4d2f538_d94ea878",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 202,
        "endChar": 8
      },
      "revId": "33a579c9fe3dd874a83b7119e4585d141e884e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83915d9c_187376f0",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-11-04T12:55:32Z",
      "side": 1,
      "message": "I have added the panic, if it is not an SError",
      "parentUuid": "5225a1e4_9b48af81",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 202,
        "endChar": 8
      },
      "revId": "33a579c9fe3dd874a83b7119e4585d141e884e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}