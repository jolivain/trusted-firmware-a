{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1a2a0ec6_c5344452",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 10
      },
      "lineNbr": 288,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-01-25T17:15:28Z",
      "side": 1,
      "message": "this has to be chnaged to ENABLE_FEAT mechanism.",
      "range": {
        "startLine": 288,
        "startChar": 56,
        "endLine": 288,
        "endChar": 73
      },
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3948ef5_ee4f55f5",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 10
      },
      "lineNbr": 288,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-01-25T17:18:21Z",
      "side": 1,
      "message": "As per this change, we now name it as ENABLE_FEAT mechanism.\n\"https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/25653|",
      "parentUuid": "1a2a0ec6_c5344452",
      "range": {
        "startLine": 288,
        "startChar": 56,
        "endLine": 288,
        "endChar": 73
      },
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "745ebf8c_fdceea64",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 10
      },
      "lineNbr": 288,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-26T12:09:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3948ef5_ee4f55f5",
      "range": {
        "startLine": 288,
        "startChar": 56,
        "endLine": 288,
        "endChar": 73
      },
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8979c086_7828cf61",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 10
      },
      "lineNbr": 331,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-19T17:22:52Z",
      "side": 1,
      "message": "Can we create an API here like get_csv2_version() which can be like below \n\nunsinged int get_csv2_version()\n{\n\n  if (is_feat_csv2_3_supported())\n     return CSV2_VERSION_3;\n  if (is_feat_csv2_2_supported()\n     return CSV2_VERSION_2;\n  return read_feat_csv2();\n  }\n  \n  For this you may need to introduce following macros \n  CSV2_NOT_SUPPORTED 0x0\n  CSV2_VERSION_1     0x1\n  CSV2_VERSION_2     0x2\n  CSV2_VERSION_3     0x3",
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee69dbea_a44e5ea3",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 10
      },
      "lineNbr": 331,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-26T12:09:42Z",
      "side": 1,
      "message": "Ignore for time being.",
      "parentUuid": "8979c086_7828cf61",
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "073d95d5_35526b8c",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 10
      },
      "lineNbr": 183,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2023-12-21T17:37:49Z",
      "side": 1,
      "message": "In my understanding CSV2_2 and CSV2_3 are both allowing us to access the same registers:\nSCXTNUM_ELx resgisters.\n\nI don\u0027t see anything additional being introduced newly under CSV2_3 feature. It confirms CSV2_2 is present.\nIn that scenario, when does this condition holds true. \nThe second part of the logic, is_feat_scv2_3_supported(), will never be executed, because the first part of the logic already reads true, when CSV2_3 is present.\n\nIn that case, do we need this additonal condition (is_feat_csv2_3_supported())) here? \nIsn\u0027t if ((is_feat_csv2_2_supported())\n{\n\t\t/* Enable access to the SCXTNUM_ELx registers. */\n\t\tscr_el3 |\u003d SCR_EnSCXT_BIT;\n}\nsufficient to cover both the cases, as the logic checks for \u003e\u003d 2 in arch_features.h\n\n\nPlease do let me know your thoughts here.\n\nThanks!",
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c16f89fb_740cf389",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 10
      },
      "lineNbr": 183,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-19T11:37:45Z",
      "side": 1,
      "message": "Hi Jayanth, Could you please take care of comments",
      "parentUuid": "073d95d5_35526b8c",
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cdcdd3c_8341bf21",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 10
      },
      "lineNbr": 183,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-01-19T11:47:48Z",
      "side": 1,
      "message": "Hi Manish, \nThe second part of this if condition, will never be executed and hence raised this thought.\n\n@Bipin, kindly let me know if this is needed in all cases and please explain if I am missing anything here.",
      "parentUuid": "c16f89fb_740cf389",
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd77d0fa_48b14b5b",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 10
      },
      "lineNbr": 183,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-19T17:22:52Z",
      "side": 1,
      "message": "You can replace here with\nget_csv2_version() \u003e\u003d CSV2_VERSION_2",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 66
      },
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe180c22_da81c13e",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 10
      },
      "lineNbr": 183,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2024-01-19T22:21:36Z",
      "side": 1,
      "message": "@jayanth \nThe code evolved for existing CSV2(technically CSV2_1), CSV2_2 and new CSV2_3.\n\nWe cannot combine all 3 possible enable values(1,2,3) because CSV2(a.ka. CSV2_1) doesn\u0027t include the SCXTNUM_ELx register whereas CSV2_2 and CSV2_3 enables it.\n\nIt\u0027s more for the clarity and readability of the code, we can as well combine the CSV2_2 and CSV2_3 as Sona did originally in an internal version, with an API function name that is clear enough. That might be confusing for someone new who might have to update further extensions in this feature if it comes in the future, the fact that CSV2_3 enables CSV2_2 is not captured in the architecture document. \n\nEven if we change the code and unify CSV2_2 and CSV2_3, make sure to have the readability w.r.t the function name, would have been easier if all 3 values had similar implications and applicable to the same aarch states. CSV2(a.k.a CSV2_1) made it tough to unify, else we could have a simple name with CSV2 as \"is_feat_csv2_supported())\" and based on the different values, enable applicable feature detect. \nWe can discuss this further if needed.",
      "parentUuid": "8cdcdd3c_8341bf21",
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "450ac8e6_35d9667d",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 10
      },
      "lineNbr": 183,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2024-01-19T22:21:36Z",
      "side": 1,
      "message": "This makes sense.",
      "parentUuid": "fd77d0fa_48b14b5b",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 66
      },
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2c54366_190aa76e",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 10
      },
      "lineNbr": 183,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-01-23T18:49:54Z",
      "side": 1,
      "message": "Thanks for the details, Bipin.\nMakes more sense, that from the readability aspect we need the implementation this way.",
      "parentUuid": "fe180c22_da81c13e",
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6660baa_9e31d2f4",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 10
      },
      "lineNbr": 183,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-26T12:09:42Z",
      "side": 1,
      "message": "Ignore this for time being",
      "parentUuid": "450ac8e6_35d9667d",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 183,
        "endChar": 66
      },
      "revId": "30d6645167b21900205b5d5080ea32e113e50f17",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}