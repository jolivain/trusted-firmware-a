/*
 * Copyright (c) 2022 Arm Limited and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier:    BSD-3-Clause
 *
 * DRTM service
 *
 * Authors:
 *	Lucian Paul-Trifu <lucian.paul-trifu@arm.com>
 *	Brian Nezvadovitz <brinez@microsoft.com> 2021-02-01
 *
 */

#ifndef ARM_DRTM_SVC_H
#define ARM_DRTM_SVC_H

/*
 * SMC function IDs for DRTM Service
 * Upper word bits set: Fast call, SMC64, Standard Secure Svc. Call (OEN = 4)
 */

#define ARM_DRTM_SVC_VERSION		0xC4000110u
#define ARM_DRTM_SVC_FEATURES		0xC4000111u
#define ARM_DRTM_SVC_UNPROTECT_MEM	0xC4000113u
#define ARM_DRTM_SVC_DYNAMIC_LAUNCH	0xC4000114u
#define ARM_DRTM_SVC_CLOSE_LOCALITY	0xC4000115u
#define ARM_DRTM_SVC_GET_ERROR		0xC4000116u
#define ARM_DRTM_SVC_SET_ERROR		0xC4000117u
#define ARM_DRTM_SVC_TCB_HASH		0xC4000118u
#define ARM_DRTM_SVC_LOCK_TCB_HASH	0xC4000119u

#define ARM_DRTM_FEATURES_TPM		0x1U
#define ARM_DRTM_FEATURES_MEM_REQ	0x2U
#define ARM_DRTM_FEATURES_DMA_PROT	0x3U
#define ARM_DRTM_FEATURES_BOOT_PE_ID	0x4U
#define ARM_DRTM_FEATURES_TCB_HASHES	0x5U

#define is_drtm_fid(_fid) \
	(((_fid) >= ARM_DRTM_SVC_VERSION) && ((_fid) <= ARM_DRTM_SVC_SET_ERROR))

/* ARM DRTM Service Calls version numbers */
#define ARM_DRTM_VERSION_MAJOR	0x0000u
#define ARM_DRTM_VERSION_MINOR	0x0001u
#define ARM_DRTM_VERSION \
	((ARM_DRTM_VERSION_MAJOR << 16) | ARM_DRTM_VERSION_MINOR)

/* Definitions for DRTM features */
#define ARM_DRTM_TPM_FEATURES_PCR_SCHEMA_SHIFT		U(33)
#define ARM_DRTM_TPM_FEATURES_PCR_SCHEMA_MASK		ULL(0xF)
#define ARM_DRTM_TPM_FEATURES_PCR_SCHEMA_DEFAULT	ULL(0x1)

#define ARM_DRTM_TPM_FEATURES_TPM_HASH_SHIFT		U(32)
#define ARM_DRTM_TPM_FEATURES_TPM_HASH_MASK		ULL(0x1)
#define ARM_DRTM_TPM_FEATURES_TPM_HASH_NOT_SUPPORTED	ULL(0x0)
#define ARM_DRTM_TPM_FEATURES_TPM_HASH_SUPPORTED	ULL(0x1)

#define ARM_DRTM_TPM_FEATURES_FW_HASH_SHIFT		U(0)
#define ARM_DRTM_TPM_FEATURES_FW_HASH_MASK		ULL(0xFFFFFFFF)
#define ARM_DRTM_TPM_FEATURES_FW_HASH_SHA256		ULL(0xB)
#define ARM_DRTM_TPM_FEATURES_FW_HASH_SHA384		ULL(0xC)
#define ARM_DRTM_TPM_FEATURES_FW_HASH_SHA512		ULL(0xD)

#define ARM_DRTM_MIN_MEM_REQ_DCE_SIZE_SHIFT		U(32)
#define ARM_DRTM_MIN_MEM_REQ_DCE_SIZE_MASK		ULL(0xFFFFFFFF)

#define ARM_DRTM_MIN_MEM_REQ_MIN_DLME_DATA_SIZE_SHIFT	U(0)
#define ARM_DRTM_MIN_MEM_REQ_MIN_DLME_DATA_SIZE_MASK	ULL(0xFFFFFFFF)

#define ARM_DRTM_DMA_PROT_FEATURES_MAX_REGIONS_SHIFT	U(8)
#define ARM_DRTM_DMA_PROT_FEATURES_MAX_REGIONS_MASK	ULL(0xF)

#define ARM_DRTM_DMA_PROT_FEATURES_DMA_SUPPORT_SHIFT	U(0)
#define ARM_DRTM_DMA_PROT_FEATURES_DMA_SUPPORT_MASK	ULL(0xFF)
#define ARM_DRTM_DMA_PROT_FEATURES_DMA_SUPPORT_COMPLETE	ULL(0x1)
#define ARM_DRTM_DMA_PROT_FEATURES_DMA_SUPPORT_REGION	ULL(0x2)

#define ARM_DRTM_TCB_HASH_FEATURES_MAX_NUM_HASHES_SHIFT	U(0)
#define ARM_DRTM_TCB_HASH_FEATURES_MAX_NUM_HASHES_MASK	ULL(0xFF)

#define ARM_DRTM_TPM_FEATURES_SET_PCR_SCHEMA(reg, val)	\
	reg = (((reg) & ~(ARM_DRTM_TPM_FEATURES_PCR_SCHEMA_MASK << \
	ARM_DRTM_TPM_FEATURES_PCR_SCHEMA_SHIFT)) | (((val) & \
	ARM_DRTM_TPM_FEATURES_PCR_SCHEMA_MASK) << \
	ARM_DRTM_TPM_FEATURES_PCR_SCHEMA_SHIFT))

#define ARM_DRTM_TPM_FEATURES_SET_TPM_HASH(reg, val)	\
	reg = (((reg) & ~(ARM_DRTM_TPM_FEATURES_TPM_HASH_MASK << \
	ARM_DRTM_TPM_FEATURES_TPM_HASH_SHIFT)) | (((val) & \
	ARM_DRTM_TPM_FEATURES_TPM_HASH_MASK) << \
	ARM_DRTM_TPM_FEATURES_TPM_HASH_SHIFT))

#define ARM_DRTM_TPM_FEATURES_SET_FW_HASH(reg, val)	\
	reg = (((reg) & ~(ARM_DRTM_TPM_FEATURES_FW_HASH_MASK << \
	ARM_DRTM_TPM_FEATURES_FW_HASH_SHIFT)) | (((val) & \
	ARM_DRTM_TPM_FEATURES_FW_HASH_MASK) << \
	ARM_DRTM_TPM_FEATURES_FW_HASH_SHIFT))

#define ARM_DRTM_MIN_MEM_REQ_SET_DCE_SIZE(reg, val)	\
	reg = (((reg) & ~(ARM_DRTM_MIN_MEM_REQ_DCE_SIZE_MASK << \
	ARM_DRTM_MIN_MEM_REQ_DCE_SIZE_SHIFT)) | (((val) & \
	ARM_DRTM_MIN_MEM_REQ_DCE_SIZE_MASK) << \
	ARM_DRTM_MIN_MEM_REQ_DCE_SIZE_SHIFT))

#define ARM_DRTM_MIN_MEM_REQ_SET_MIN_DLME_DATA_SIZE(reg, val)	\
	reg = (((reg) & ~(ARM_DRTM_MIN_MEM_REQ_MIN_DLME_DATA_SIZE_MASK << \
	ARM_DRTM_MIN_MEM_REQ_MIN_DLME_DATA_SIZE_SHIFT)) | (((val) & \
	ARM_DRTM_MIN_MEM_REQ_MIN_DLME_DATA_SIZE_MASK) << \
	ARM_DRTM_MIN_MEM_REQ_MIN_DLME_DATA_SIZE_SHIFT))

#define ARM_DRTM_DMA_PROT_FEATURES_SET_MAX_REGIONS(reg, val) \
	reg = (((reg) & ~(ARM_DRTM_DMA_PROT_FEATURES_MAX_REGIONS_MASK << \
	ARM_DRTM_DMA_PROT_FEATURES_MAX_REGIONS_SHIFT)) | (((val) & \
	ARM_DRTM_DMA_PROT_FEATURES_MAX_REGIONS_MASK) << \
	ARM_DRTM_DMA_PROT_FEATURES_MAX_REGIONS_SHIFT))

#define ARM_DRTM_DMA_PROT_FEATURES_SET_DMA_SUPPORT(reg, val) \
	reg = (((reg) & ~(ARM_DRTM_DMA_PROT_FEATURES_DMA_SUPPORT_MASK << \
	ARM_DRTM_DMA_PROT_FEATURES_DMA_SUPPORT_SHIFT)) | (((val) & \
	ARM_DRTM_DMA_PROT_FEATURES_DMA_SUPPORT_MASK) << \
	ARM_DRTM_DMA_PROT_FEATURES_DMA_SUPPORT_SHIFT))

#define ARM_DRTM_TCB_HASH_FEATURES_SET_MAX_NUM_HASHES(reg, val) \
	reg = (((reg) & ~(ARM_DRTM_TCB_HASH_FEATURES_MAX_NUM_HASHES_MASK << \
	ARM_DRTM_TCB_HASH_FEATURES_MAX_NUM_HASHES_SHIFT)) | (((val) & \
	ARM_DRTM_TCB_HASH_FEATURES_MAX_NUM_HASHES_MASK) << \
	ARM_DRTM_TCB_HASH_FEATURES_MAX_NUM_HASHES_SHIFT))

/* Definitions for DRTM address map */
#define ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_SHIFT	U(55)
#define ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_MASK	ULL(0x3)
#define ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_NC	ULL(0)
#define ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_WC	ULL(1)
#define ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_WT	ULL(2)
#define ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_WB	ULL(3)

#define ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_SHIFT	U(52)
#define ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_MASK	ULL(0x7)
#define ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_NORMAL	ULL(0)
#define ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_NCAR	ULL(1)
#define ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_DEVICE	ULL(2)
#define ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_NV	ULL(3)
#define ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_RSVD	ULL(4)

#define ARM_DRTM_REGION_SIZE_TYPE_4K_PAGE_NUM_SHIFT	U(0)
#define ARM_DRTM_REGION_SIZE_TYPE_4K_PAGE_NUM_MASK	ULL(0xFFFFFFFFFFFFF)

#define ARM_DRTM_REGION_SIZE_TYPE_SET_CACHEABILITY(reg, val) \
	reg = (((reg) & ~(ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_MASK << \
	ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_SHIFT)) | (((val) & \
	ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_MASK) << \
	ARM_DRTM_REGION_SIZE_TYPE_CACHEABILITY_SHIFT))

#define ARM_DRTM_REGION_SIZE_TYPE_SET_REGION_TYPE(reg, val) \
	reg = (((reg) & ~(ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_MASK << \
	ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_SHIFT)) | (((val) & \
	ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_MASK) << \
	ARM_DRTM_REGION_SIZE_TYPE_REGION_TYPE_SHIFT))

#define ARM_DRTM_REGION_SIZE_TYPE_SET_4K_PAGE_NUM(reg, val) \
	reg = (((reg) & ~(ARM_DRTM_REGION_SIZE_TYPE_4K_PAGE_NUM_MASK << \
	ARM_DRTM_REGION_SIZE_TYPE_4K_PAGE_NUM_SHIFT)) | (((val) & \
	ARM_DRTM_REGION_SIZE_TYPE_4K_PAGE_NUM_MASK) << \
	ARM_DRTM_REGION_SIZE_TYPE_4K_PAGE_NUM_SHIFT))

/* Initialization routine for the DRTM service */
int drtm_setup(void);

/* Handler to be called to handle DRTM SMC calls */
uint64_t drtm_smc_handler(uint32_t smc_fid,
			  uint64_t x1,
			  uint64_t x2,
			  uint64_t x3,
			  uint64_t x4,
			  void *cookie,
			  void *handle,
			  uint64_t flags);

#endif /* ARM_DRTM_SVC_H */
