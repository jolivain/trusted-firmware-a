{
  "comments": [
    {
      "key": {
        "uuid": "fd58c2a8_932d0d53",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-01-13T17:13:48Z",
      "side": 1,
      "message": "I would have thought that if the symbol is already defined in bl_common.h, it should not be redefined in another file. Could we simply remove the redefinition in bl31_plat_setup.c instead? Are the 2 definitions not equivalent?",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 18,
        "endChar": 52
      },
      "revId": "f8f654e9acee0912293fa50fb4b5e7a0967e1d10",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83dec4c3_0d06b8ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-01-13T18:37:21Z",
      "side": 1,
      "message": "I am not sure I understood your comment. the symbol __RO_START__ is redefined in the bl31_plat_setup.c due to the way the IMPORT_SYM macro is defined. If you are asking if the definitions BL_CODE_BASE and BL2_RO_BASE are not equivalent, I believe the BL2_RO_BASE was probably intended to be more representative of what it means( i.e. start of code/ro region in BL2 image). I think the patch itself is trying to solve the issue you mentioned.",
      "parentUuid": "fd58c2a8_932d0d53",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 18,
        "endChar": 52
      },
      "revId": "f8f654e9acee0912293fa50fb4b5e7a0967e1d10",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "401a2342_0e95e1a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-01-22T14:06:08Z",
      "side": 1,
      "message": "Sorry, my question was, why do we need this line in bl31_plat_setup.c:\n\n IMPORT_SYM(unsigned long, __RO_START__, BL2_RO_BASE)\n\nwhen we already have this line in bl_common.h:\n\n IMPORT_SYM(uintptr_t, __RO_START__, BL_CODE_BASE);\n\nBut you\u0027ve answered it, i.e. it is probably because platform maintainers wanted a more explicit name.",
      "parentUuid": "83dec4c3_0d06b8ce",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 18,
        "endChar": 52
      },
      "revId": "f8f654e9acee0912293fa50fb4b5e7a0967e1d10",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3add71bc_e13abd67",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-01-13T17:13:48Z",
      "side": 1,
      "message": "There\u0027s a slight issue there that this is not strictly equivalent to the IMPORT_SYM() version, which used to mark the BL2_RO_BASE variable as static, const and let the compiler know the variable might be unused.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "f8f654e9acee0912293fa50fb4b5e7a0967e1d10",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89622f2a_b2b27a4f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-01-13T18:37:21Z",
      "side": 1,
      "message": "You are right. My bad. I overlooked the important attributes. I now have a simple idea of covert the 2nd IMPORT_SYM to a new macro called ALIAS_SYM defined as follows:\n\n#define ALIAS_SYM(type, sym, name) \\\n        static const __attribute__((unused)) type name \u003d (type) sym;\n\nThis way there is no need to import the linker symbol (ex: __RO_START_). Let me know your thoughts on this.",
      "parentUuid": "3add71bc_e13abd67",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "f8f654e9acee0912293fa50fb4b5e7a0967e1d10",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e2720ad_74e2276f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-01-22T14:06:08Z",
      "side": 1,
      "message": "Yes, I also thought about this ALIAS_SYM() method but on further thoughts, I am not sure it\u0027s convenient. One would need to know that a previous IMPORT_SYM() macro has been called, possibly through the inclusion of some deep header files chain, to make a call and use the right variant IMPORT_SYM/ALIAS_SYM accordingly. Also, if we ever remove some IMPORT_SYM() calls from bl_common.h, this will suddenly break the users of ALIAS_SYM()...\n\nI can\u0027t think of a satisfying solution to this problem... other than re-considering whether we really want to enable -Wredundant-decls? It seems counter-intuitive to me to have to work around false issues like that. As you\u0027ve mentioned in the commit message, in this specific case there is nothing wrong with importing the linker symbol twice.",
      "parentUuid": "89622f2a_b2b27a4f",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "f8f654e9acee0912293fa50fb4b5e7a0967e1d10",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}