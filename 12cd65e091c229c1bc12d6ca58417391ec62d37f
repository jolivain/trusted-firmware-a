{
  "comments": [
    {
      "key": {
        "uuid": "74947abf_b7af6d8e",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-18T12:29:12Z",
      "side": 1,
      "message": "For SUPPORT_STACK_MEMTAG build flag, this looks to be the other way around: defining it implies compiling with the +memtag compiler modifier (see lines 212 and 218). Perhaps you should do it the same way for ENABLE_FEAT_RNG option? As in, something like:\n\nifeq (${ENABLE_FEAT_RNG},yes)\n  arch-features       \t:\u003d       $(arch-features)+rng\nendif\n\nDoes this make sense?",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19c8f953_3d32c564",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000428
      },
      "writtenOn": "2021-01-18T14:44:52Z",
      "side": 1,
      "message": "Sure, we can do it that way.",
      "parentUuid": "74947abf_b7af6d8e",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b99691f2_cf936cba",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000428
      },
      "writtenOn": "2021-01-18T15:01:33Z",
      "side": 1,
      "message": "Okay, so this is probably not the way I would prefer this done. Because ARM_ARCH_MAJOR/MINOR are evaluated before the platform.mk is included and because the switching is done by makefile conditionals, variables such as ARM_ARCH_MAJOR/MINOR or ARM_ARCH_FEATURES or now ENABLE_FEAT_RNG cannot be specified in the platform.mk. They have to be specified on the command line by the user when compiling TF-A and the platform.mk can at best abort the process if sufficient runes are not specified. In short time as v8 extensions are implemented, we would have a paragraph of ENABLE_FOO_FEAT that the user has to specify to get the result they want.\n\nMy preferred solution would be to change the way the march64_directive is determined to use $() evaluations, since the evaluation would collapse to the final result only when the variable is dereferenced in the recipes. Then various platforms could not only define the minor version of the b8 architecture but also various specific features. This obviously requires refactoring quite a bit bigger than this.\n\nSigh. I guess in absence of the above, I would prefer the compilation to switch to different code when the user compiles with v8.5+rng, rather than make adding +rng if I specify ENABLE_FEAT_RNG\u003dyes on the command line.\n\nThat said, if you feel strongly about the change, I will change it in line with what you asked for.",
      "parentUuid": "19c8f953_3d32c564",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab03cbd2_6abaa015",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-20T11:10:08Z",
      "side": 1,
      "message": "\u003e Okay, so this is probably not the way I would prefer this done. Because ARM_ARCH_MAJOR/MINOR are evaluated before the platform.mk is included and because the switching is done by makefile conditionals, variables such as ARM_ARCH_MAJOR/MINOR or ARM_ARCH_FEATURES or now ENABLE_FEAT_RNG cannot be specified in the platform.mk. They have to be specified on the command line by the user when compiling TF-A and the platform.mk can at best abort the process if sufficient runes are not specified. In short time as v8 extensions are implemented, we would have a paragraph of ENABLE_FOO_FEAT that the user has to specify to get the result they want.\n\nRight, I understand the problem now. I agree with you that the platform makefile would be the right place for describing what the hardware supports, such as the RND* instructions.\n\nI see that some other AArch64 platforms have a similar problem. Rpi3, rpi4, Amlogic SoCs (and qemu) already tune the compiler flags for their specific CPUs (-mcpu/-mtune option) ; imx7.mk enables compiler support for Neon ; stm32mp1 enables compiler support for software-emulated FPU.\n\nThings look cleaner for AArch32 targets, where a separate armv7-a-cpus.mk makefile was introduced to handle compiler options based on the platform options. See this commit: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/commit/?id\u003d26e63c4450b1e4dcef3f9256663f36253e6b62d2 This armv7-a-cpus.mk makefile had to be included after the platform makefile to address the issue you mentioned.\n\nI guess we could do something similar for AArch64 targets in the future, but as you rightly say this is a bigger change outside of the scope of this patch.\n\n\u003e My preferred solution would be to change the way the march64_directive is determined to use $() evaluations, since the evaluation would collapse to the final result only when the variable is dereferenced in the recipes. Then various platforms could not only define the minor version of the b8 architecture but also various specific features. This obviously requires refactoring quite a bit bigger than this.\n\nThat works as well.\n\nWhatever solution we choose when we get to this refactoring, I think we should avoid the platform makefiles having to manage the compiler options directly, i.e. no -mcpu\u003dcortex-a53 option in platform.mk for example. I think it\u0027s better to keep a layer of abstraction, such as ARM_CORTEX_A53\u003dyes, that is then derived to the right compiler option by the top Makefile (or its affiliates in make_helpers/). This makes sure we keep compiler discrepancies (across gcc/clang/armclang) in the generic part of the build system (rather than each platform having to deal with this).\n\nDoes this make sense?\n\n\u003e Sigh. I guess in absence of the above, I would prefer the compilation to switch to different code when the user compiles with v8.5+rng, rather than make adding +rng if I specify ENABLE_FEAT_RNG\u003dyes on the command line.\n\nEither way, you\u0027d have to specify something on the command line, right? Be it ENABLE_FEAT_RNG\u003dyes or CFLAGS\u003d-march\u003darmv8-a+rng. And I guess the latter solution has the disadvantage of being compiler specific (although I see in this specific example that all 3 compilers we support - clang, armclang, gcc - use the same +rng flag).\n\nWhy do you prefer inferring ENABLE_FEAT_RNG from compiling with v8.5+rng? Are there any benefit of doing it this way that I can\u0027t think of right now?",
      "parentUuid": "b99691f2_cf936cba",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bb5356a_ad462a05",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000428
      },
      "writtenOn": "2021-01-22T14:23:16Z",
      "side": 1,
      "message": "\u003e \u003e My preferred solution would be to change the way the march64_directive is determined to use $() evaluations, since the evaluation would collapse to the final result only when the variable is dereferenced in the recipes. Then various platforms could not only define the minor version of the b8 architecture but also various specific features. This obviously requires refactoring quite a bit bigger than this.\n\u003e \n\u003e That works as well.\n\u003e \n\u003e Whatever solution we choose when we get to this refactoring, I think we should avoid the platform makefiles having to manage the compiler options directly, i.e. no -mcpu\u003dcortex-a53 option in platform.mk for example. I think it\u0027s better to keep a layer of abstraction, such as ARM_CORTEX_A53\u003dyes, that is then derived to the right compiler option by the top Makefile (or its affiliates in make_helpers/). This makes sure we keep compiler discrepancies (across gcc/clang/armclang) in the generic part of the build system (rather than each platform having to deal with this).\n\u003e \n\u003e Does this make sense?\n\nI definitely agree. This feels like the right way to resolve this longterm.\n\n\u003e \n\u003e \u003e Sigh. I guess in absence of the above, I would prefer the compilation to switch to different code when the user compiles with v8.5+rng, rather than make adding +rng if I specify ENABLE_FEAT_RNG\u003dyes on the command line.\n\u003e \n\u003e Either way, you\u0027d have to specify something on the command line, right? Be it ENABLE_FEAT_RNG\u003dyes or CFLAGS\u003d-march\u003darmv8-a+rng. And I guess the latter solution has the disadvantage of being compiler specific (although I see in this specific example that all 3 compilers we support - clang, armclang, gcc - use the same +rng flag).\n\u003e \n\u003e Why do you prefer inferring ENABLE_FEAT_RNG from compiling with v8.5+rng? Are there any benefit of doing it this way that I can\u0027t think of right now?\n\nMy preference follows from a combination of several things. We already have to specify ARM_ARCH_MAJOR and ARM_ARCH_MINOR on the command line. Given that we have to modify our command line with this (this cannot be specified in platform.mk), the user is better aware of what compiler they are using and which form of ARM_ARCH_FEATURES they need to use with their compiler. Furthermore, when another feature is added in the future, adding +foo to the user\u0027s existing command line override is less of a hassle than adding another ENABLE_FEAT_FOO variable. Also, mixing the requirement of ARM_ARCH_MAJOR/MINOR specified on command line and ENABLE_FEAT_FOO means the user can specify older minor version but also want features that require newer minor version - we would have to have logic in makefile to resolve this with user-friendly errors. In comparison, if the user specifies both MAJOR/MINOR and ARCH_FEATURES, they are much more aware of the interplay between them. If we ever hope to solve this properly, using one of the above ideas, we should aim to make minimal changes to provide support at this moment.",
      "parentUuid": "ab03cbd2_6abaa015",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c530c5a_f74128dc",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000428
      },
      "writtenOn": "2021-01-22T14:25:02Z",
      "side": 1,
      "message": "\u003e \u003e \n\u003e \u003e Either way, you\u0027d have to specify something on the command line, right? Be it ENABLE_FEAT_RNG\u003dyes or CFLAGS\u003d-march\u003darmv8-a+rng. And I guess the latter solution has the disadvantage of being compiler specific (although I see in this specific example that all 3 compilers we support - clang, armclang, gcc - use the same +rng flag).\n\nOh just to clarify, we already have ARM_ARCH_FEATURES\u003drng variable that can be specified on command line, no need to go directly to CFLAGS\u003dmarch...",
      "parentUuid": "5bb5356a_ad462a05",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45187169_5ddce13f",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-01-25T10:59:25Z",
      "side": 1,
      "message": "\u003e My preference follows from a combination of several things. We already have to specify ARM_ARCH_MAJOR and ARM_ARCH_MINOR on the command line. Given that we have to modify our command line with this (this cannot be specified in platform.mk), the user is better aware of what compiler they are using and which form of ARM_ARCH_FEATURES they need to use with their compiler.\n\nThat makes sense to me.\n\n\u003e Furthermore, when another feature is added in the future, adding +foo to the user\u0027s existing command line override is less of a hassle than adding another ENABLE_FEAT_FOO variable.\n\nSounds like another good argument to me.\n\n\u003e Also, mixing the requirement of ARM_ARCH_MAJOR/MINOR specified on command line and ENABLE_FEAT_FOO means the user can specify older minor version but also want features that require newer minor version - we would have to have logic in makefile to resolve this with user-friendly errors.\n\nNot necessarily. Older versions of the Arm architecture do not forbid the implementation of newer features. For example, you can have an Armv8.2 platform that implements some of the features provided by Armv8.5, such as the RND* instruction. The version of the architecture only dictates the minimum set of features that must be implemented but a given platform is free to implement any extra on top of this.\n\n\u003e If we ever hope to solve this properly, using one of the above ideas, we should aim to make minimal changes to provide support at this moment.\n\nYes, I agree. Now that I understand where you\u0027re coming from, I am fine with your patch. My only concern is still that the RND* extensions will be handled differently than the memtag ones but if we revisit that soon it might be OK. I\u0027ll ask Alexei and ManishB (who were both involved in the memtag thing according to the git history) whether they have any concerns with your approach but as far as I am concerned, this patch is good to go.",
      "parentUuid": "0c530c5a_f74128dc",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f54eb8_ce8e2367",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000428
      },
      "writtenOn": "2021-01-25T11:19:57Z",
      "side": 1,
      "message": "\u003e \u003e Also, mixing the requirement of ARM_ARCH_MAJOR/MINOR specified on command line and ENABLE_FEAT_FOO means the user can specify older minor version but also want features that require newer minor version - we would have to have logic in makefile to resolve this with user-friendly errors.\n\u003e \n\u003e Not necessarily. Older versions of the Arm architecture do not forbid the implementation of newer features. For example, you can have an Armv8.2 platform that implements some of the features provided by Armv8.5, such as the RND* instruction. The version of the architecture only dictates the minimum set of features that must be implemented but a given platform is free to implement any extra on top of this.\n\nOh, I was under the mistaken impression that feature extensions were not permitted on minor revisions older than the ones that introduced them. This is good to know!\n\n\u003e \u003e If we ever hope to solve this properly, using one of the above ideas, we should aim to make minimal changes to provide support at this moment.\n\u003e \n\u003e Yes, I agree. Now that I understand where you\u0027re coming from, I am fine with your patch. My only concern is still that the RND* extensions will be handled differently than the memtag ones but if we revisit that soon it might be OK. I\u0027ll ask Alexei and ManishB (who were both involved in the memtag thing according to the git history) whether they have any concerns with your approach but as far as I am concerned, this patch is good to go.\n\nThank you! I really appreciate your help with this.",
      "parentUuid": "45187169_5ddce13f",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3442ab3_5d55b85a",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-25T11:32:43Z",
      "side": 1,
      "message": "I\u0027m fine with the suggested solution, because it follows the definitions in ARM_ARCH_FEATURES build flag and just sets another ENABLE_FEAT_RNG option which will be used in conditional compilation.\nARM_ARCH_FEATURES is a compiler option to generate instructions specific to the extension and it cannot be used for conditional compilation as far as I\u0027m aware.",
      "parentUuid": "45187169_5ddce13f",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "867b7f80_74209192",
        "filename": "Makefile",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-01-25T11:43:25Z",
      "side": 1,
      "message": "I agree with long term solution discussed in this thread but as of now we can go with the current the solution in this patch though it is not aligned with \u0027SUPPORT_STACK_MEMTAG\u0027 build flag.",
      "parentUuid": "e3442ab3_5d55b85a",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 246,
        "endChar": 63
      },
      "revId": "12cd65e091c229c1bc12d6ca58417391ec62d37f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}