{
  "comments": [
    {
      "key": {
        "uuid": "64e31809_52d6501b",
        "filename": "docs/components/arm-sip-service.rst",
        "patchSetId": 24
      },
      "lineNbr": 158,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-17T16:37:46Z",
      "side": 1,
      "message": "If we return SMC_UNK, it is not clear to the caller whether the error is due to SMC being unimplemented or some other parameter error.\n\nSo if we decide to stick with one error code in the beginning for all the API errors , we could use -2 and define it to be (E_INVALID_PARAMS).",
      "range": {
        "startLine": 158,
        "startChar": 22,
        "endLine": 158,
        "endChar": 29
      },
      "revId": "19734554e6193010c77b3194cb750b8593a08fdc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc350a3f_25b585ee",
        "filename": "docs/components/arm-sip-service.rst",
        "patchSetId": 24
      },
      "lineNbr": 158,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2019-12-17T16:45:50Z",
      "side": 1,
      "message": "Yes, agree. It seems there is no choice other than SMC_OK/SMC_UNK from smccc.h. So we can define a specific return code, or define a generic one, (or re-use ones from errno.h?) ...",
      "parentUuid": "64e31809_52d6501b",
      "range": {
        "startLine": 158,
        "startChar": 22,
        "endLine": 158,
        "endChar": 29
      },
      "revId": "19734554e6193010c77b3194cb750b8593a08fdc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1172f758_79564f0e",
        "filename": "docs/components/arm-sip-service.rst",
        "patchSetId": 24
      },
      "lineNbr": 158,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-17T16:49:44Z",
      "side": 1,
      "message": "We need to define something specific. You can use PSCI error codes in psci.h header as a guide.",
      "parentUuid": "bc350a3f_25b585ee",
      "range": {
        "startLine": 158,
        "startChar": 22,
        "endLine": 158,
        "endChar": 29
      },
      "revId": "19734554e6193010c77b3194cb750b8593a08fdc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ddd30e6_a9c0696a",
        "filename": "lib/debugfs/debugfs_smc.c",
        "patchSetId": 24
      },
      "lineNbr": 145,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2019-12-17T19:54:31Z",
      "side": 1,
      "message": "Did you mean ret instead of read ?",
      "revId": "19734554e6193010c77b3194cb750b8593a08fdc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ee506eb_5c8fd980",
        "filename": "plat/arm/common/arm_sip_svc.c",
        "patchSetId": 24
      },
      "lineNbr": 65,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2019-12-17T19:54:31Z",
      "side": 1,
      "message": "Was \u0027cookie\u0027 argument intentionally dropped from this API? I guess it is not used by other frameworks either, but kept for future enhancements.",
      "revId": "19734554e6193010c77b3194cb750b8593a08fdc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}