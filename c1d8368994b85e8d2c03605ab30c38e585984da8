{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c725613c_24110923",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1000209
      },
      "writtenOn": "2021-02-09T12:24:27Z",
      "side": 1,
      "message": "\u003e Patch Set 14: Code-Owner-Review-1\n\u003e \n\u003e Hi,\n\u003e \n\u003e Gentle reminder that I\u0027ve got a question about this patch, see comments attached to patch set 12. It\u0027s easy to miss with all the spam from the validation bot!\n\nQuestion by Sandrine:\nWhat is the build command line you\u0027re using?\n\nI\u0027m trying to better understand how you hit this problem, as we\u0027ve never encountered it on Arm platforms, despite testing a combination of different crypto algorithms and key sizes in the CI loop.\n\nI remember that the set of build options for configuring key sizes, hash sizes and the like is rather confusing. E.g. to choose the crypto algo, there\u0027s TF_MBEDTLS_KEY_ALG (documented here: https://trustedfirmware-a.readthedocs.io/en/latest/design/auth-framework.html#the-cryptographic-library) and there\u0027s also KEY_ALG (documented here: https://trustedfirmware-a.readthedocs.io/en/latest/getting_started/build-options.html) and it is hard to understand which one has precedence or how they interact together. Hence I suspect that you might not be using the \"right\" set of build options (and as I said, it would be completely understandable!).\n\nAnswer:\n\nBuild Command:\nexport PLAT\u003dlx2162aqds\nmake all fip pbl PLAT\u003d$PLAT BOOT_MODE\u003dflexspi_nor RCW\u003d./rcw_2000_650_2900_17_2.bin BL33\u003d./u-boot-lx2160aqds.bin SPD\u003dopteed BL32\u003dtee_lx2.bin TRUSTED_BOARD_BOOT\u003d1 CST_DIR\u003d../../apps/security/cst/ GENERATE_COT\u003d1 MBEDTLS_DIR\u003d../mbedtls/\n\nFor better understanding of options, I am using please refer the file \"plat/nxp/common/tbbr/tbbr.mk\" part of the patch#6157.\nIn this file following flags are defined:\n    KEY_ALG\t\t:\u003d rsa\n    KEY_SIZE\t\t:\u003d 2048\n\nThanks\nPankaj",
      "revId": "c1d8368994b85e8d2c03605ab30c38e585984da8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b4fa9bb_66d7aa35",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1000209
      },
      "writtenOn": "2021-02-10T12:30:20Z",
      "side": 1,
      "message": "Please upvote.\n\nregards\nPankaj",
      "revId": "c1d8368994b85e8d2c03605ab30c38e585984da8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4673988_fa8772d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-02-15T13:39:44Z",
      "side": 1,
      "message": "Thanks for the details. I am starting to understand the problem. IIUC this boils down to cot_def.h *using* macros provided by mbedtls_config.h without taking care of *pulling* these definitions in the first place.\n\nI think you stumbled upon this issue because you are the first platform integrator to define their own chain of trust. When using the generic ones, mbedtls_config.h gets included *before* auth_mod.h (which in turn includes cot_def.h) from within the C files, see drivers/auth/tbbr/tbbr_cot_bl2.c and drivers/auth/dualroot/cot.c. \n\nI hadn\u0027t realized we relied on the order of these includes. This does not sound right to me and I agree with you that we need to fix things by removing this constraint.\n\nThat being said, I am not sure this patch is the best way to fix the problem. AFAICS, we\u0027re just moving the problem elsewhere, as now it\u0027s auth_mod.h which has to enforce the include order dependency. This is slightly better than the current situation because all C files pulling auth_mod.h will benefit from the fix (rather than having to deal with this issue in each C source file). But if in the future some other header file needs to pull in definitions from cot_def.h, it will have to enforce the include order dependency as well. This is easily missed IMO.\n\nIt seems better to me to have cot_def.h include mbedtls_config.h. Is there a reason we can\u0027t/don\u0027t want to do that?",
      "parentUuid": "c725613c_24110923",
      "revId": "c1d8368994b85e8d2c03605ab30c38e585984da8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}