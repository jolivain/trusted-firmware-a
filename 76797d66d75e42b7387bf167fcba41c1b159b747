{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "725ebce4_28c2ae71",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-01-09T12:20:46Z",
      "side": 1,
      "message": "nit: relocate the function to above after check_feature ?",
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4225f30d_2d5643cb",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-01-09T14:30:45Z",
      "side": 1,
      "message": "Along with Olivier\u0027s comment you should also modify the comments on this function as well detect_arch_features() and the place where it is called in BL31.\nThis new check is doing other half of check (HW enabled/SW disabled) which was not part of original feat_detect() mechanish (HW disabled/SW enabled)\n\nnit: Naming is not very clear, can we think of any more explicit name?",
      "range": {
        "startLine": 271,
        "startChar": 0,
        "endLine": 271,
        "endChar": 22
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e064ebd_fc1a9249",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-10T14:20:18Z",
      "side": 1,
      "message": "I think eventually every feature eventually should be checked against hardware capability. Hence we may not need this wrapper and perhaps can be folder into check_feature()  itself ?\n\nSee related comment below.",
      "parentUuid": "4225f30d_2d5643cb",
      "range": {
        "startLine": 271,
        "startChar": 0,
        "endLine": 271,
        "endChar": 22
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4136102f_b4fbae4a",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-01-11T11:59:44Z",
      "side": 1,
      "message": "Yeah, I think I had it there, but this was lost over a rebase.",
      "parentUuid": "725ebce4_28c2ae71",
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98e5fafb_565a7ed4",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-01-11T11:59:44Z",
      "side": 1,
      "message": "I am still undecided about promoting every check to _required.\nThere are features which are special, FGT and HCX being examples: if the system supports them, we HAVE to enable them in EL3. Non-secure world has no architectural way of verifying this has been done, it just sees the field in the ID register. This is arguably an architecture flaw, but there is not much we can do about it.\nHowever this is not true for other features, like ENABLE_FEAT_SEL2.",
      "parentUuid": "8e064ebd_fc1a9249",
      "range": {
        "startLine": 271,
        "startChar": 0,
        "endLine": 271,
        "endChar": 22
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be636e13_d8ef2142",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-01-11T12:06:10Z",
      "side": 1,
      "message": "Or maybe we just change if it triggers a panic?\nIn my new current version, I replaced the direct panic() with \"tainted \u003d true;\", and panic only at the end. This allows to list *all* the incriminating features in one run.\nWe could *always* check and report if a feature is disabled in the build, but present on the hardware. But only for the _required versions would trigger the panic.",
      "parentUuid": "98e5fafb_565a7ed4",
      "range": {
        "startLine": 271,
        "startChar": 0,
        "endLine": 271,
        "endChar": 22
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee084a4e_18c927fa",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-13T11:36:46Z",
      "side": 1,
      "message": "Hmm, in my view, every feature available to the NS should be enabled from firmware and hence be checked. but there is a case that some features will need to be disabled for Secure and Realm but TF-A cannot control them separately. The split of feature flags between Secure/NS/RL will need to be taken up separately. So for now, we can enable some required ones as part of this patch. Other features and Secure/RL world split can be taken up after this.\n\n@Jayanth, Could you please created another JIRA to split up options between 3 worlds and enforce mandatory checks for NS for all features ?",
      "parentUuid": "be636e13_d8ef2142",
      "range": {
        "startLine": 271,
        "startChar": 0,
        "endLine": 271,
        "endChar": 22
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5324bcf_a742c6bf",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-01-09T09:34:56Z",
      "side": 1,
      "message": "Is this really a panic situation or just a warning? Do we mean that some feature must be enabled by the platform if PE supports it?",
      "range": {
        "startLine": 275,
        "startChar": 2,
        "endLine": 275,
        "endChar": 10
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fff9531_98d192a9",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-10T14:20:18Z",
      "side": 1,
      "message": "I think this has to be warning. Having features set to ALWAYS, being present in hardware features is essential to prevent runtime failure in EL3. The converse , viz, TF-A has DISABLED a feature but the feature is present in hardware, is not fatal to TF-A but could be a blocker for lower EL software (for linux it is a blocker, but there can be other NS software for which this may not be a blocker). hence this is a guidance to platform integrators/users and we should allow forward progress IMO.",
      "parentUuid": "c5324bcf_a742c6bf",
      "range": {
        "startLine": 275,
        "startChar": 2,
        "endLine": 275,
        "endChar": 10
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8c0644_2f82fa71",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-01-11T11:59:44Z",
      "side": 1,
      "message": "In my experience warnings are just getting ignored. If you really want to enforce something, make it fatal, that forces people to fix things.\nPlease keep in mind that this is still a debug feature. So I think people should get what they ask for. And fixing those issues is easy, just set the feature to either 1 or 0 in the Makefile, depending on the output.\nAs for \"for linux it is a blocker, but there can be other NS software for which this may not be a blocker\": It is an architectural problem: An ID register field advertises a feature, but it traps to EL3 upon usage. That would affect every non-secure software. The only reason it might not be fatal for some of them, is if they don\u0027t use that feature. But as they might in the future, I am very much for keeping this on the safe side.\nI think this should be the safe rule:\nFEAT_DETECTION\u003d1 could be the default for DEBUG\u003d1, unless a platform explicitly opts out (I hereby pull this card for Allwinner already). Failures are fatal and panic before reaching non-secure.",
      "parentUuid": "7fff9531_98d192a9",
      "range": {
        "startLine": 275,
        "startChar": 2,
        "endLine": 275,
        "endChar": 10
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f759b7fe_65868ff5",
        "filename": "common/feat_detect.c",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-13T11:36:46Z",
      "side": 1,
      "message": "Hmm, I think there is a balance. If the firmware pushes out a warning and the NS world triggers a trap to EL3 later on, this should be a good enough diagnostic for fixing up the problem. The problem of enforcing the panic() for this case is detrimental to the goal of having this check for all NS features.  In some cases, it might be necessary to keep a feature disabled for NS even though CPU ID says the feature is available.\n\nOne case I can think of is, currently MTE needs to be enabled or disabled on certain platforms due to System limitations but there is no way to reflect that info in the ID regs. Introducing the panic() here will mean that platforms are forced to turn OFF FEATURE_DETECTION for such legal cases. This is counter productive IMO.",
      "parentUuid": "4d8c0644_2f82fa71",
      "range": {
        "startLine": 275,
        "startChar": 2,
        "endLine": 275,
        "endChar": 10
      },
      "revId": "76797d66d75e42b7387bf167fcba41c1b159b747",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}