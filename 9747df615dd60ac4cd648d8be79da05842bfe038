{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9e7a1ef3_d8804250",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-17T15:14:02Z",
      "side": 1,
      "message": "Hi,\n\nI think it\u0027s worthwhile to keep the number of build time options to the minimum. Since the S1 and S2 versions are never used in isolation, I would just use ENABLE_FEAT_SXPOE and ENABLE_FEAT_SXPIE.\nThe rest of the code looks find and builds, going to test it now.",
      "revId": "9747df615dd60ac4cd648d8be79da05842bfe038",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e08b8628_9100a934",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000686
      },
      "writtenOn": "2023-03-17T15:42:46Z",
      "side": 1,
      "message": "Are we *sure* there\u0027s no possibility that the S1 and S2 options might be done independently, even if we are not able to imagine the situation where this would be desirable? I note that the model provides independent runtime parameters for each of the features, the only dependency I can see is that POE depends on PIE.\n\nI do agree that this results in awfully fine grained control of the options but that does feel idiomatic for the code and as far as I can see the flexibility exists for S1 without S2.",
      "parentUuid": "9e7a1ef3_d8804250",
      "revId": "9747df615dd60ac4cd648d8be79da05842bfe038",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "834b661e_34c59afe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-17T17:07:45Z",
      "side": 1,
      "message": "Superficial test looked fine.",
      "revId": "9747df615dd60ac4cd648d8be79da05842bfe038",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d642b887_15c38692",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-17T17:07:45Z",
      "side": 1,
      "message": "Yeah, I am not sure either, it just feels a bit weird to have two controls when we only ever use the logical OR of them in the code. But I agree that the spec provides the fine grained control, and it\u0027s usually not wise to second guess the architecture.\nSo I am fine as well with leaving it like this. I guess people usually change the setting just in Makefiles, and not on the command line, so it shouldn\u0027t really matter.",
      "parentUuid": "e08b8628_9100a934",
      "revId": "9747df615dd60ac4cd648d8be79da05842bfe038",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "456bd0cb_d21b0de7",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 10
      },
      "lineNbr": 188,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-17T15:14:02Z",
      "side": 1,
      "message": "What about we merge the two is_feat_*_supported() functions into one, and just use one build time option: ENABLE_FEAT_SXPOE? We keep the read_feat_*_id_field functions, and just ORR their result together here.",
      "revId": "9747df615dd60ac4cd648d8be79da05842bfe038",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3c257d6_c24704c8",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 10
      },
      "lineNbr": 188,
      "author": {
        "id": 1000686
      },
      "writtenOn": "2023-03-17T15:42:46Z",
      "side": 1,
      "message": "It seemed better to follow the idiomatic pattern and then add additional functions pulling things together, especially given that the feature check stuff can be configured for a boot time assert on each feature.",
      "parentUuid": "456bd0cb_d21b0de7",
      "revId": "9747df615dd60ac4cd648d8be79da05842bfe038",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43b631f0_1de34ac4",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 10
      },
      "lineNbr": 229,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-17T15:14:02Z",
      "side": 1,
      "message": "Same as above.",
      "revId": "9747df615dd60ac4cd648d8be79da05842bfe038",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}