{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7467db58_87fe1249",
        "filename": "include/drivers/partition/gpt.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-12-10T13:11:39Z",
      "side": 1,
      "message": "sorry, maybe out of scope, but its stange gpt.h inlucdes efi.h.\nIt should be efi.h that includes gpt.h.\n\nI would rather have efi.h:\n+include \u003ctools_share/uuid.h\u003e\n+#define GUID_LEN  sizeof(efi_uuid)\n\n and gpt.h\n+include \u003ctools_share/uuid.h\u003e\n+#define GUID_LEN  sizeof(uuid)",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "5cfdd53b2b5e19c4f2af6f481cd7ab0f17ca5f69",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72fe5c04_c913ca13",
        "filename": "include/drivers/partition/gpt.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2021-12-13T05:25:00Z",
      "side": 1,
      "message": "\u003e sorry, maybe out of scope, but its stange gpt.h inlucdes efi.h.\n\u003e It should be efi.h that includes gpt.h.\n\nSo my thinking here was that efi.h should have all the basic struct and macro declarations for the EFI related stuff. And the gpt.h header would be a consumer of those basic efi declarations.\n\n\u003e \n\u003e I would rather have efi.h:\n\u003e +include \u003ctools_share/uuid.h\u003e\n\u003e +#define GUID_LEN  sizeof(efi_uuid)\n\u003e \n\u003e  and gpt.h\n\u003e +include \u003ctools_share/uuid.h\u003e\n\u003e +#define GUID_LEN  sizeof(uuid)\n\nThis has the GUID_LEN getting defined in both files. That can again cause redefinition errors when we need both the header files. Can we not have the macro defined in a single header, and then have that header included by other consumers of that macro.",
      "parentUuid": "7467db58_87fe1249",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "5cfdd53b2b5e19c4f2af6f481cd7ab0f17ca5f69",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ad07d08_88076444",
        "filename": "include/drivers/partition/gpt.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-12-13T07:32:44Z",
      "side": 1,
      "message": "\u003e (...) efi.h should have all the basic struct and macro declarations for the EFI related stuff. And the gpt.h header would be a consumer of those basic efi declarations.\n\nGPT does not rely on the EFI spec. It uses GUIDs that are UUIDs. efi.h could simply use tools_share/uuid.h resources, as using type uuid_t or struct efi_uuid.\n\n\n\u003e This has the GUID_LEN getting defined in both files (...)\n\nBoth could rely on uuid_t / struct efi_uuid from uuid.h\nLooking into the implementation, gpt.h can easily be updated to use uuid types rather than u8 or char arrays. (see comment in https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12568/6/include/drivers/partition/partition.h#35).\n\n\nSorry I made this comment quite late. Having gpt.h including efi.h looks really strange to me. If maintainers thinks the shortcut is ok, feel free to keep as is.",
      "parentUuid": "72fe5c04_c913ca13",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "5cfdd53b2b5e19c4f2af6f481cd7ab0f17ca5f69",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edec5511_bc571800",
        "filename": "include/drivers/partition/gpt.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2021-12-13T09:37:43Z",
      "side": 1,
      "message": "\u003e \u003e (...) efi.h should have all the basic struct and macro declarations for the EFI related stuff. And the gpt.h header would be a consumer of those basic efi declarations.\n\u003e \n\u003e GPT does not rely on the EFI spec. It uses GUIDs that are UUIDs. efi.h could simply use tools_share/uuid.h resources, as using type uuid_t or struct efi_uuid.\n\nSince the GPT layout, including the header and table entry structure is defined in the UEFI spec(Chapter 5), and it uses GUID\u0027s, i thought that including efi.h in the gpt.h header should be fine. But, i think instead of declaring the efi_guid_t struct in efi.h, i can use the struct efi_guid that is defined in uuid.h. Would that be fine with you? \n\n\u003e \n\u003e \n\u003e \u003e This has the GUID_LEN getting defined in both files (...)\n\u003e \n\u003e Both could rely on uuid_t / struct efi_uuid from uuid.h\n\u003e Looking into the implementation, gpt.h can easily be updated to use uuid types rather than u8 or char arrays. (see comment in https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12568/6/include/drivers/partition/partition.h#35).\n\u003e \n\u003e \n\u003e Sorry I made this comment quite late. Having gpt.h including efi.h looks really strange to me. If maintainers thinks the shortcut is ok, feel free to keep as is.\n\nNo issues at all :). I think i can use struct efi_guid defined in uuid, and move GUID_LEN and EFI_NAMELEN to uuid.h. With that, we don\u0027t need to have gpt.h include efi.h. Is that okay?",
      "parentUuid": "6ad07d08_88076444",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "5cfdd53b2b5e19c4f2af6f481cd7ab0f17ca5f69",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "006aa420_8c8ebaa2",
        "filename": "include/drivers/partition/gpt.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-12-13T11:52:57Z",
      "side": 1,
      "message": "I think we don\u0027t really need GUID_LEN if using uuid.h provides required resources. Guid should be type fields, not char/u8 arrays.\n\nAlso using uuid.h addresses Yann\u0027s comment (https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12567) in a former change.\n\nAs for EFI_NAMELEN, it is not UUID related so it should rather be defined from efi.h (that includes tols_shared/uuid.h).",
      "parentUuid": "edec5511_bc571800",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "5cfdd53b2b5e19c4f2af6f481cd7ab0f17ca5f69",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dd5e3f5_ccabff57",
        "filename": "include/drivers/partition/gpt.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2021-12-13T11:56:31Z",
      "side": 1,
      "message": "\u003e I think we don\u0027t really need GUID_LEN if using uuid.h provides required resources. Guid should be type fields, not char/u8 arrays.\n\nTrue. I have removed the definition of GUID_LEN.\n\n\u003e \n\u003e Also using uuid.h addresses Yann\u0027s comment (https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12567) in a former change.\n\u003e \n\u003e As for EFI_NAMELEN, it is not UUID related so it should rather be defined from efi.h (that includes tols_shared/uuid.h).\n\nOkay.",
      "parentUuid": "006aa420_8c8ebaa2",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "5cfdd53b2b5e19c4f2af6f481cd7ab0f17ca5f69",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}