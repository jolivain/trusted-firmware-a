{
  "comments": [
    {
      "key": {
        "uuid": "d8f390a0_e9e83bcf",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-12T10:13:10Z",
      "side": 1,
      "message": "2021",
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92e98999_e8fd7734",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2021-01-13T01:19:05Z",
      "side": 1,
      "message": "Do you mean change copyright to 2014-2021? Is it proper for me to extend copyright of ARM? Or shall I add copyright of my own company?",
      "parentUuid": "d8f390a0_e9e83bcf",
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d026b32e_d62b1b78",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-13T10:19:10Z",
      "side": 1,
      "message": "Yes, I meant changing to 2014-2021. You can also add (c) of your company.",
      "parentUuid": "92e98999_e8fd7734",
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9db600cc_f2d4267c",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2021-01-14T01:09:40Z",
      "side": 1,
      "message": "sure",
      "parentUuid": "d026b32e_d62b1b78",
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b5fd33f_8332f9f1",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-01-13T19:26:12Z",
      "side": 1,
      "message": "Bit of a nit: It seems more readable to put:\nputchar(\u0027%\u0027)\ninstead of:\nputchar(*fmt)\n\nbecause it makes it clear that it\u0027s a fixed value.",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 22
      },
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8dcde5e_214fad8c",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2021-01-14T01:09:40Z",
      "side": 1,
      "message": "Sounds good; thanks :)",
      "parentUuid": "3b5fd33f_8332f9f1",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 22
      },
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cb65227_976f7ebd",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-14T11:38:02Z",
      "side": 1,
      "message": "I was also thinking about that, but came to conclusion, that the current implementation may result in more optimised code, as there wouldn\u0027t be need for compiler to set a r0/x0 register to \u0027%\u0027.",
      "parentUuid": "d8dcde5e_214fad8c",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 22
      },
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77bb1aa8_460d5fda",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2021-01-14T12:04:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cb65227_976f7ebd",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 22
      },
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a437b1f2_cfc064fe",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-01-14T13:22:04Z",
      "side": 1,
      "message": "Hmm okay\nSo fmt would already be in x0 because it is the first argument to the vprintf function?\n\nBut fmt is a pointer, and we are passing (*fmt) to putchar, so x0 has to be dereferenced to get the value \u0027%\u0027, which is then put in x0, so there would be no advantage, I think?\n\nI\u0027m no expert, but I believe the compiler will do these sorts of small optimizations anyway.\n\nObviously this doesn\u0027t matter much either way, but I\u0027d still vote for the literal \u0027%\u0027 here.",
      "parentUuid": "77bb1aa8_460d5fda",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 22
      },
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5f1ccd3_8d8cc493",
        "filename": "lib/libc/printf.c",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1000272
      },
      "writtenOn": "2021-01-14T15:45:30Z",
      "side": 1,
      "message": "The easiest method to figure out if there is a code gen change it to build it both ways and diff the generated assembly. If anyone is still on the fence about this, please diff the assembly.",
      "parentUuid": "a437b1f2_cfc064fe",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 22
      },
      "revId": "69401ac45bf2f1d2615aba35e269126b25ad6a00",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}