{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b092159f_bc7b9614",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "Sorry lots of rewording suggestions from me in this commit message, but I feel it is important to provide the right background information, especially as we don\u0027t provide any other documentation at this stage.",
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33bca0f7_a0c15bab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 8,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "Suggest adding the following introductory sentence: \"This chain of trust is targeted at Arm CCA solutions.\"",
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3428d4e7_aa866e53",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "(minor) Let\u0027s use the \"signing domains\" terminology all the way through. I think using \"signing domains\" and \"supply chain\" interchangeably might confuse people.",
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76482340_b9af5612",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "Suggest adding a bit more context on this one. For example:\n\n---8\u003c---\nThe Arm CCA Security Model (Arm DEN-0096.A.a) [1] refers to the CCA supply chain as the provider of CCA components running on the CCA platform. The CCA supply chain might be independent from other supply chains providing other firmware blobs.\n\nThe CCA platform is a collective term used to identify all hardware and firmware components involved in delivering the CCA security guarantee. Hence, all hardware and firmware components on a CCA enabled system that a Realm is required to trust.\n\nIn the context of TF-A, this corresponds to BL1, BL2, BL31, RMM and associated configuration files.\n\n[1] https://developer.arm.com/documentation/DEN0096/A_a\n---8\u003c---",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 9
      },
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba258256_b334a490",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "Again adding a short description of what this signing domain includes would be useful. Suggest something along these lines:\n\n2) Non-CCA Core Secure World supply chain.\nThis includes SPMC (and associated configuration file) as well as SiP-owned secure partitions.\nIt is rooted in a new SiP-owned key called Secure World ROTPK, or SWD_ROTPK for short.\n\nPerhaps also worth mentioning that we expect SPMC as the BL32 image?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 43
      },
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14b5766e_7b5d1464",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "Again adding a short description of what this signing domain includes would be useful. Suggest something along these lines:\n\n3) Platform owner supply chain.\nThis includes BL33 (and associated configuration file) and the platform owner\u0027s secure partitions.\nIt is rooted in the Platform ROTPK, or PROTPK.",
      "range": {
        "startLine": 17,
        "startChar": 3,
        "endLine": 17,
        "endChar": 67
      },
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d0a71a3_df4de0b6",
        "filename": "drivers/auth/cca/cot.c",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "There are some inconsistencies in the terminology we use here.\n\nFor the BL32 image, we\u0027re sometimes referring to it as the Trusted OS (e.g. tos_fw_hash_buf) and sometimes as SPMC (e.g. spmc_content_cert). I think it would be good to use one or the other. Even though I was originally in favour of the latter terminology, looking at the entire set of changes I think the former would be less disruptive, as we are reusing macros and names from the TBBR \u0026 dualroot CoTs, which referred to it as the Trusted OS.\n\nFor the OEM signing domain, we\u0027re sometimes referring to it as OEM-owned binaries (e.g. oem_pk_buf) and sometimes as \"platform owner\"-owned binaries (e.g prot_pk) - the latter being the terminology used in the dualroot chain of trust. Again let\u0027s pick one, I vote for \"platform owner\" for the same reasons.",
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de37b128_fabca673",
        "filename": "drivers/auth/cca/cot.c",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "Just a thought... BL1 only needs extracting the following pieces of information out of the CCA content certificate:\n* BL2 hash\n* BL2 config hash\n* FW_CONFIG hash\n\nThe rest is used by BL2 only. So in theory, it should be possible to provide different definitions of cca_content_cert for BL1 and BL2.\n\nThe definition for BL1 would look like this:\n\n static const auth_img_desc_t cca_content_cert \u003d {\n\t.img_id \u003d CCA_CONTENT_CERT_ID,\n\t.img_type \u003d IMG_CERT,\n\t.parent \u003d NULL,\n\t.img_auth_methods \u003d (const auth_method_desc_t[AUTH_METHOD_NUM]) {\n\t\t[0] \u003d {\n\t\t\t.type \u003d AUTH_METHOD_SIG,\n\t\t\t.param.sig \u003d {\n\t\t\t\t.pk \u003d \u0026subject_pk,\n\t\t\t\t.sig \u003d \u0026sig,\n\t\t\t\t.alg \u003d \u0026sig_alg,\n\t\t\t\t.data \u003d \u0026raw_data\n\t\t\t}\n\t\t},\n\t\t[1] \u003d {\n\t\t\t.type \u003d AUTH_METHOD_NV_CTR,\n\t\t\t.param.nv_ctr \u003d {\n\t\t\t\t.cert_nv_ctr \u003d \u0026trusted_nv_ctr,\n\t\t\t\t.plat_nv_ctr \u003d \u0026trusted_nv_ctr\n\t\t\t}\n\t\t}\n\t},\n\t.authenticated_data \u003d (const auth_param_desc_t[COT_MAX_VERIFIED_PARAMS]) {\n\t\t[0] \u003d {\n\t\t\t.type_desc \u003d \u0026tb_fw_hash,\n\t\t\t/* ... */\n\t\t},\n\t\t[1] \u003d {\n\t\t\t.type_desc \u003d \u0026tb_fw_config_hash,\n\t\t\t/* ... */\n\t\t},\n\t\t[2] \u003d {\n\t\t\t.type_desc \u003d \u0026fw_config_hash,\n\t\t\t/* ... */\n\t\t},\n\t},\n };\n\nand the definition for BL2 would contain the other half - only the authenticated_data[] array changes.\n\nAlso, this means that BL1 could get rid of the following buffers:\n\n static unsigned char hw_config_hash_buf[HASH_DER_LEN];\n static unsigned char soc_fw_hash_buf[HASH_DER_LEN];\n static unsigned char soc_fw_config_hash_buf[HASH_DER_LEN];\n static unsigned char rmm_hash_buf[HASH_DER_LEN];\n\nSimilarly, BL2 might be able to get rid of the other ones:\n\n static unsigned char fw_config_hash_buf[HASH_DER_LEN];\n static unsigned char tb_fw_hash_buf[HASH_DER_LEN];\n static unsigned char tb_fw_config_hash_buf[HASH_DER_LEN];\n\nThis would allow us to save some memory in BL1 and BL2. Not sure how much, though, I\u0027ve not calculated it. It would be worth doing this investigation at a later point in time to figure out whether this is worth it. For now, let\u0027s keep things like that and we can look into that sort of optimizations in the future.",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 183,
        "endChar": 2
      },
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59b5af47_6c6a2634",
        "filename": "include/tools_share/cca_oid.h",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-05-18T13:11:20Z",
      "side": 1,
      "message": "(minor) Perhaps move this line above - it applies to all OIDs defined in this file, not just the OID of the PROTPK.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 77
      },
      "revId": "20cca6130fe19890500c9cf688009ddf71884688",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}