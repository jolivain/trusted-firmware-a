{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a1510e_3b735324",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-02-01T09:41:53Z",
      "side": 1,
      "message": "would be good to verify the code generated by Compiler is equivalent or is optimal.",
      "revId": "08333bb2c402c74d3459466d1f87357b01c626e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61981235_fe4fe943",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-07T19:07:21Z",
      "side": 1,
      "message": "Verified locally attaching log for reference:\n+++++++++++++++++++++++++++++++++++++++++++++++\n\nAfter conversion to c code:\n\n------------------------------------------------------------------------------------\n\n0000000000000000 \u003cel1_sysregs_context_save\u003e:\n   0:\td5384001 \tmrs\tx1, spsr_el1\n   4:\tf9000001 \tstr\tx1, [x0]\n   8:\td5384021 \tmrs\tx1, elr_el1\n   c:\tf9000401 \tstr\tx1, [x0, #8]\n  10:\td5381001 \tmrs\tx1, sctlr_el1\n  14:\tf9000801 \tstr\tx1, [x0, #16]\n  18:\td5382041 \tmrs\tx1, tcr_el1\n  1c:\tf9000c01 \tstr\tx1, [x0, #24]\n  20:\td5381041 \tmrs\tx1, cpacr_el1\n  24:\tf9001001 \tstr\tx1, [x0, #32]\n  28:\td53a0001 \tmrs\tx1, csselr_el1\n  2c:\tf9001401 \tstr\tx1, [x0, #40]\n  30:\td53c4101 \tmrs\tx1, sp_el1\n  34:\tf9001801 \tstr\tx1, [x0, #48]\n  38:\td5385201 \tmrs\tx1, esr_el1\n  3c:\tf9001c01 \tstr\tx1, [x0, #56]\n  40:\td5382001 \tmrs\tx1, ttbr0_el1\n  44:\tf9002001 \tstr\tx1, [x0, #64]\n  48:\td5382021 \tmrs\tx1, ttbr1_el1\n  4c:\tf9002401 \tstr\tx1, [x0, #72]\n  50:\td538a201 \tmrs\tx1, mair_el1\n  54:\tf9002801 \tstr\tx1, [x0, #80]\n  58:\td538a301 \tmrs\tx1, amair_el1\n  5c:\tf9002c01 \tstr\tx1, [x0, #88]\n  60:\td5381021 \tmrs\tx1, actlr_el1\n  64:\tf9003001 \tstr\tx1, [x0, #96]\n  68:\td538d081 \tmrs\tx1, tpidr_el1\n  6c:\tf9003401 \tstr\tx1, [x0, #104]\n  70:\td53bd041 \tmrs\tx1, tpidr_el0\n  74:\tf9003801 \tstr\tx1, [x0, #112]\n  78:\td53bd061 \tmrs\tx1, tpidrro_el0\n  7c:\tf9003c01 \tstr\tx1, [x0, #120]\n  80:\td5387401 \tmrs\tx1, par_el1\n  84:\tf9004001 \tstr\tx1, [x0, #128]\n  88:\td5386001 \tmrs\tx1, far_el1\n  8c:\tf9004401 \tstr\tx1, [x0, #136]\n  90:\td5385101 \tmrs\tx1, afsr0_el1\n  94:\tf9004801 \tstr\tx1, [x0, #144]\n  98:\td5385121 \tmrs\tx1, afsr1_el1\n  9c:\tf9004c01 \tstr\tx1, [x0, #152]\n  a0:\td538d021 \tmrs\tx1, contextidr_el1\n  a4:\tf9005001 \tstr\tx1, [x0, #160]\n  a8:\td538c001 \tmrs\tx1, vbar_el1\n  ac:\tf9005401 \tstr\tx1, [x0, #168]\n  b0:\td53c4321 \tmrs\tx1, spsr_abt\n  b4:\tf9005801 \tstr\tx1, [x0, #176]\n  b8:\td53c4341 \tmrs\tx1, spsr_und\n  bc:\tf9005c01 \tstr\tx1, [x0, #184]\n  c0:\td53c4301 \tmrs\tx1, spsr_irq\n  c4:\tf9006001 \tstr\tx1, [x0, #192]\n  c8:\td53c4361 \tmrs\tx1, spsr_fiq\n  cc:\tf9006401 \tstr\tx1, [x0, #200]\n  d0:\td53c3001 \tmrs\tx1, dacr32_el2\n  d4:\tf9006801 \tstr\tx1, [x0, #208]\n  d8:\td53c5021 \tmrs\tx1, ifsr32_el2\n  dc:\tf9006c01 \tstr\tx1, [x0, #216]\n  e0:\td65f03c0 \tret\n  \n  --------------------------------------------------------------------------------------------\n  \n  Restore part, looks pretty much the same:\n  \n------\n-------\n  20:\tf9400820 \tldr\tx0, [x1, #16]\n  24:\td5181000 \tmsr\tsctlr_el1, x0\n  28:\tf9400c20 \tldr\tx0, [x1, #24]\n  2c:\td5182040 \tmsr\ttcr_el1, x0\n  30:\tf9401020 \tldr\tx0, [x1, #32]\n  34:\td5181040 \tmsr\tcpacr_el1, x0\n  38:\tf9401420 \tldr\tx0, [x1, #40]\n\n\n-------- (skipping few bits, looks same as listed for other registers)\n\n\n  c0:\tf9405820 \tldr\tx0, [x1, #176]\n  c4:\td51c4320 \tmsr\tspsr_abt, x0\n  c8:\tf9405c20 \tldr\tx0, [x1, #184]\n  cc:\td51c4340 \tmsr\tspsr_und, x0\n  d0:\tf9406020 \tldr\tx0, [x1, #192]\n  d4:\td51c4300 \tmsr\tspsr_irq, x0\n  d8:\tf9406420 \tldr\tx0, [x1, #200]\n  dc:\td51c4360 \tmsr\tspsr_fiq, x0\n  e0:\tf9406820 \tldr\tx0, [x1, #208]\n  e4:\td51c3000 \tmsr\tdacr32_el2, x0\n  e8:\tf9406c20 \tldr\tx0, [x1, #216]\n  ec:\td51c5020 \tmsr\tifsr32_el2, x0\n  f0:\ta8c17bfd \tldp\tx29, x30, [sp], #16\n  f4:\td65f03c0 \tret",
      "parentUuid": "d4a1510e_3b735324",
      "revId": "08333bb2c402c74d3459466d1f87357b01c626e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ddf5a44_cfff5fa7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-02-07T19:10:29Z",
      "side": 1,
      "message": "Generated code looks optimal, as instead of loading and storing in pairs, which we did in assembly previously, we now, load and store individually (lrd/str in c code) and I hope that should be ok, as we access them with their offsets.",
      "parentUuid": "61981235_fe4fe943",
      "revId": "08333bb2c402c74d3459466d1f87357b01c626e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}