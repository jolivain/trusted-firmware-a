{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "299bba0a_8cac2b25",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 730,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-21T16:04:15Z",
      "side": 1,
      "message": "put this by the structure definition? Dont see much code that contains CASSERTS, so move to top of file like other files.\nIf there are other files, hopefully they are rare and perhaps we can clean those up to the top of the file too.",
      "range": {
        "startLine": 730,
        "startChar": 1,
        "endLine": 730,
        "endChar": 8
      },
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77a0cb8e_a4631d13",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 730,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-25T03:59:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "299bba0a_8cac2b25",
      "range": {
        "startLine": 730,
        "startChar": 1,
        "endLine": 730,
        "endChar": 8
      },
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87f92529_fc6fe5f5",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 745,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-02-21T10:29:16Z",
      "side": 1,
      "message": "Testing these MBZ checks out locally is causing some issues when operating with other components. I\u0027m still looking into what the best course of action here so that we can stay aligned.",
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "526010fd_678d1c2b",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 745,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-04-18T20:21:45Z",
      "side": 1,
      "message": "To maintain compatibility with other existing implementations we are considering whether we should update the spec to remove theses MBZ requirements and instead specify that these and other such fields should be \"Ignored\" instead. Where the definition of Ignored would specify that the field is reserved for future use and must not be interpreted or modified by the partition manager.\n\nFrom your perspective are these checks being (correctly) added to ensure an implementation conforms to the current spec guidance or do you have any opinions on whether these fields must actually be zeroed?",
      "parentUuid": "87f92529_fc6fe5f5",
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "321a9d39_c5c70bff",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 745,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-04-20T18:31:26Z",
      "side": 1,
      "message": "The purpose of these checks is to ensure that these fields can be given meaning in the future.  A classic mistake in Linux userspace APIs is to omit such checks, with the result that the fields can never be used later without breaking compatibility.  I would prefer to fix all the components that are failing to clear these fields and then insist on them being zero from here on.",
      "parentUuid": "526010fd_678d1c2b",
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf8b7420_2a8692f2",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 745,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-04-20T23:00:33Z",
      "side": 1,
      "message": "Great, thanks for the feedback. \n\nWith regards to the forwards compatibility issue you mentioned. The thinking here was that since we will only introduce new fields when we do a bump in the spec version, a partition manager would first check to see if a field was enabled for a given partition\u0027s version, and only if so, interpret the meaning of the field. \n\nSo from an implementation perspective, if a field was not present in the FF-A version implemented by a partition, instead of validating the field was 0 in these checks, the partition manager would ignore the field instead. If the partition was updated to a new FF-A version that utilized the new field, the partition manager would parse the value as expected. This would be one way that we could avoid breaking backwards compatibility when introducing new meaning to these fields. \n\nWould that help address your concern here? Just looking to get your input on the various options to solve this.",
      "parentUuid": "321a9d39_c5c70bff",
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc3acde4_6ebcc896",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 745,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-04-25T18:44:09Z",
      "side": 1,
      "message": "After further discussions internally it looks like we are also agreeing that enforcing these checks is the way forward to prevent confusion and additionally, similar such checks should also be added to other partition manager (PM) implementations for consistency.\n\nThe concern here is that before any such changes are merged to the PMs, we should ensure that the FF-A client implementations are informed to ensure they are in a position to handle the tightening of this behavior and that existing systems do not break without a fix being available. \n\nI don\u0027t want to delay these patches further so could I suggest that the MBZ checks in the relevant patches are either rebased to the top of the patch stack or perhaps ideally refactored into separate patches that could be merged after all these changes as part of the next TF-A release. This would allow for client implementations to have the chance to respond to this upcoming change without delaying the rest of the changes.\n\nPlease let me know if this seems reasonable.",
      "parentUuid": "bf8b7420_2a8692f2",
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bbc9eae_4e9cbafd",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 745,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2023-05-03T22:31:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc3acde4_6ebcc896",
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96ed4fbd_9d255e69",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 788,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-21T16:04:15Z",
      "side": 1,
      "message": "operands",
      "range": {
        "startLine": 788,
        "startChar": 30,
        "endLine": 788,
        "endChar": 38
      },
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bcacf74_7622f5a3",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 788,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-25T03:59:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "96ed4fbd_9d255e69",
      "range": {
        "startLine": 788,
        "startChar": 30,
        "endLine": 788,
        "endChar": 38
      },
      "revId": "bd97292b3833c02129006abe46f45d2de183f7e2",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}