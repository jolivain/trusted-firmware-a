{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "da7d089d_58efaf4b",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-12-19T13:41:59Z",
      "side": 1,
      "message": "Should this be `sizeof(mmc_csd)` or `sizeof(struct mmc_csd_emmc)` rather?\n\nAlso I don\u0027t understand why we now need to divide by `MBOX_WORD_BYTE`?",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34616d2d_8a619738",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000742
      },
      "writtenOn": "2024-01-08T08:23:46Z",
      "side": 1,
      "message": "It is needed due to the copy is 4 bytes each time.",
      "parentUuid": "da7d089d_58efaf4b",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbcbd68a_7005695e",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000742
      },
      "writtenOn": "2024-01-09T08:05:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34616d2d_8a619738",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d42d4c67_a3287ca0",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-01-10T11:07:16Z",
      "side": 1,
      "message": "Sorry I still don\u0027t understand the sizes here... If I am not mistaken:\n\n```\n  sizeof(resp_data) / MBOX_WORD_BYTE\n\u003d          16       / 4\n\u003d 4 bytes\n```\n\nSo this `memcpy_s()` call will only copy the first word from `resp_data` (i.e. `resp_data[0]`) into the `mmc_csd` structure. Is that the intended behaviour?",
      "parentUuid": "cbcbd68a_7005695e",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fa28adb_872a1de0",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000724
      },
      "writtenOn": "2024-01-16T02:42:00Z",
      "side": 1,
      "message": "it should copy whole structure size of mmc_csd. updated in the next patch.",
      "parentUuid": "d42d4c67_a3287ca0",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "160eedbd_fbfe49cd",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-01-17T10:40:05Z",
      "side": 1,
      "message": "\u003e It is needed due to the copy is 4 bytes each time.\n\nAFAIK `memcpy_s()` reasons in terms of bytes, not in terms of 4-byte chunks. You cannot ask `memcpy_s()` to copy `n` bytes in chunks of 4 bytes at a time. Perhaps I missed your point?\n\nSorry if I am being stubborn but I still don\u0027t understand the size computation in the latest patch set.\n\nFirst, let\u0027s just put down the prototype of `memcpy_s()` for reference:\n\n```\nint memcpy_s(void *dst, size_t dsize, void *src, size_t ssize);\n\ndst     -\tpointer to the object to copy to\ndsize   -\tmax number of bytes to modify in the destination (typically the size of the destination object)\nsrc     -\tpointer to the object to copy from\nssize   -\tnumber of bytes to copy\n```\n\nAnd the latest version of your code:\n```\nmemcpy_s(\u0026mmc_csd, sizeof(mmc_csd) / MBOX_WORD_BYTE,\n\t\t\u0026resp_data, sizeof(resp_data) / MBOX_WORD_BYTE);\n```\n\nSo we are copying `sizeof(resp_data) / MBOX_WORD_BYTE) \u003d\u003d 16 / 4 \u003d\u003d 4` bytes from `resp_data[]` buffer into the `mmc_csd` structure (with the extra constraint that no more than a fourth of `mmc_csd` structure size should be modified in this way).\n\nIn other words, this looks equivalent to:\n```\nmmc_csd.not_used \u003d resp_data[0];\n```\n\nIs that what you want to achieve?\n\nIf you want to copy the entirety of `resp_data[]` at the start of the `mmc_csd` data structure (which is what I suspect you want to), then I think this should be:\n\n```\nmemcpy_s(\u0026mmc_csd, sizeof(mmc_csd), \u0026resp_data, sizeof(resp_data));\n```",
      "parentUuid": "1fa28adb_872a1de0",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "415351ec_ca4bb80f",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000742
      },
      "writtenOn": "2024-01-22T03:19:12Z",
      "side": 1,
      "message": "Hi Sandrine, \n\nYes, you are right. Our intention is to copy the entire of resp_data[]. We shall update to sizeof(mmc_csd) instead of sizeof (resp_data).",
      "parentUuid": "160eedbd_fbfe49cd",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00e1154b_20f21eae",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-01-23T15:00:32Z",
      "side": 1,
      "message": "If your intention is to copy the entire of `resp_data[]`, then why the division by `MBOX_WORD_BYTE`? This will reduce the copy to only a fourth of `resp_data[]`, right?",
      "parentUuid": "415351ec_ca4bb80f",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05f2b8bf_02aceaeb",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000724
      },
      "writtenOn": "2024-02-05T16:10:43Z",
      "side": 1,
      "message": "Hi Sandrine, \n\nThis sizeof(resp_data) should be 16 bytes. When using this memcpy_s, it goes with 4-byte-aligned when copying. In this case, divide by MBOX_WORD_BYTE which is 4 bytes, so it copies 4 4-bytes-aligned for entire of resp_data[4]. This is my own understanding, not sure you agree with me. \n\nThanks.",
      "parentUuid": "00e1154b_20f21eae",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34d95ca1_176b6334",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-02-07T09:56:25Z",
      "side": 1,
      "message": "Hi,\n\n\u003e so it copies 4 4-bytes-aligned for entire of resp_data[4].\n\nBut there is no loop to repeat the copy operation! A single `memcpy_s()` call will only copy 4 bytes (computed as `sizeof(resp_data) / MBOX_WORD_BYTE`). Unless you repeat this operation 3 more times, only 4 bytes will ever be copied...",
      "parentUuid": "05f2b8bf_02aceaeb",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b95df1f_ab1b60d2",
        "filename": "plat/intel/soc/common/drivers/sdmmc/sdmmc.c",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1000742
      },
      "writtenOn": "2024-08-22T07:24:26Z",
      "side": 1,
      "message": "Hi Sandrine, SieuMun, \n\nI believed there is confusion here.\n\nLet me explain and clear the doubts. \n\nFrom the mmc_csd, we are actually only needed the top 2 bytes info which will mask with 0xFFFF 0000. \nThis 2 bytes info consists of the file format, write protect, file format group and etc which needed for the subsequence send_cmd. \n\nI do understand that the resp_data is a 4 byte array and your concern is totally valid when taking into consideration of the entire 4 bytes data. However for our case over here, there is not necessary for us to fully copy the 4 bytes data from resp_data to mmc_csd. \n\nTherefore, in the implementation, we only opt to copy 1 byte which in turn added the / MBOX_WORD_BYTE. \n\nHope this is clear.",
      "parentUuid": "34d95ca1_176b6334",
      "range": {
        "startLine": 522,
        "startChar": 20,
        "endLine": 522,
        "endChar": 37
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0311a136_99a66f05",
        "filename": "plat/intel/soc/common/sip/socfpga_sip_fcs.c",
        "patchSetId": 1
      },
      "lineNbr": 1168,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-12-19T13:41:59Z",
      "side": 1,
      "message": "Same question here and throughout this file: could you please explain why switching to `memcpy_s()` requires dividing the sizes by `MBOX_WORD_BYTE`?",
      "range": {
        "startLine": 1168,
        "startChar": 47,
        "endLine": 1168,
        "endChar": 63
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0938c0b_0913aafd",
        "filename": "plat/intel/soc/common/sip/socfpga_sip_fcs.c",
        "patchSetId": 1
      },
      "lineNbr": 1168,
      "author": {
        "id": 1000742
      },
      "writtenOn": "2024-01-08T08:23:46Z",
      "side": 1,
      "message": "It is needed due to the copy is 4 bytes each time.",
      "parentUuid": "0311a136_99a66f05",
      "range": {
        "startLine": 1168,
        "startChar": 47,
        "endLine": 1168,
        "endChar": 63
      },
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c4f3d4_b21a0ba6",
        "filename": "plat/intel/soc/common/soc/socfpga_handoff.c",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-12-19T13:41:59Z",
      "side": 1,
      "message": "Changes in this file do not seem to be mentioned in the commit message.",
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46c1d62a_3f919371",
        "filename": "plat/intel/soc/common/soc/socfpga_handoff.c",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000742
      },
      "writtenOn": "2024-01-08T08:23:46Z",
      "side": 1,
      "message": "Updated",
      "parentUuid": "d8c4f3d4_b21a0ba6",
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b35248f_1f7b3a4b",
        "filename": "plat/intel/soc/common/soc/socfpga_handoff.c",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-01-10T11:07:16Z",
      "side": 1,
      "message": "I could not see a v2 of the patch with the commit message updates... Did you forget to post it for review?",
      "parentUuid": "46c1d62a_3f919371",
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6320e923_67d2dc05",
        "filename": "plat/intel/soc/common/soc/socfpga_handoff.c",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000724
      },
      "writtenOn": "2024-01-16T02:42:00Z",
      "side": 1,
      "message": "updated.",
      "parentUuid": "5b35248f_1f7b3a4b",
      "revId": "b318494601e5533980abee8a36cd9e72ea0fccb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}