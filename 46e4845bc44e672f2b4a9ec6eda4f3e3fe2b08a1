{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a32db884_1aa87bb1",
        "filename": "include/plat/arm/common/arm_def.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2023-10-09T14:00:15Z",
      "side": 1,
      "message": "I have a doubt about this else condition... Let me try to explain what I have in mind.\n\nTF_MBEDTLS_KEY_ALG_ID indicates which key algorithms TF-A supports. This drives which options we enable in mbedTLS config file (see [1] for example).\n\nThere are 3 options right now:\n* TF-A only supports RSA keys (TF_MBEDTLS_KEY_ALG_ID \u003d\u003d TF_MBEDTLS_RSA).\n* TF-A only supports ECDSA keys (TF_MBEDTLS_KEY_ALG_ID \u003d\u003d TF_MBEDTLS_ECDSA).\n* TF-A only supports both RSA and ECDSA keys (TF_MBEDTLS_KEY_ALG_ID \u003d\u003d TF_MBEDTLS_RSA_AND_ECDSA).\n\nThe first 2 cases are straight-forward. All keys, including the ROTPK, are of the same algorithm.\n\nHowever, in the last case, I think (and please correct me if I am wrong) that we might have a situation where we\u0027ve got an ECDSA ROTPK alongside with RSA subsidiary keys. In that case, we\u0027d define ARM_ROTPK_KEY_LEN to 294 bits, when it should be 120/91 bits depending on the exact variant.\n\nThis makes me think that basing this preprocessor condition on the value of the TF_MBEDTLS_KEY_ALG_ID macro might not be what we want. What we really want to know here is the ROTPK algorithm and as stated above TF_MBEDTLS_KEY_ALG_ID does not necessarily gives us this information.\n\nI think we\u0027d rather base this preprocessor condition on ARM_ROTPK_LOCATION_ID.\n\n[1] https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/include/drivers/auth/mbedtls/mbedtls_config-3.h#n62",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 37,
        "endChar": 6
      },
      "revId": "46e4845bc44e672f2b4a9ec6eda4f3e3fe2b08a1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a409500_3d738192",
        "filename": "include/plat/arm/common/arm_def.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-11T12:56:33Z",
      "side": 1,
      "message": "Hi Lauren, \nIIUC, the ARM_ROTPK_KEY_LEN is primarily utilized in *.S files to verify the length of the statically defined ROTPK within those files. Besides this, I haven\u0027t identified any other use for it. I\u0027m inclined to suggest that we can safely remove this definition, as it doesn\u0027t appear to be crucial in terms of usage or am I missing something?",
      "parentUuid": "a32db884_1aa87bb1",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 37,
        "endChar": 6
      },
      "revId": "46e4845bc44e672f2b4a9ec6eda4f3e3fe2b08a1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9bb822e_fc3d5dda",
        "filename": "include/plat/arm/common/arm_def.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2023-10-12T18:38:26Z",
      "side": 1,
      "message": "Oh yes Sandrine! This would be filtering that case out to set the ARM_ROTPK_KEY_LEN to 294. I\u0027ve made that change, thanks!\n\n@Manish, that\u0027s correct. This is used in place of ARM_ROTPK_HEADER_LEN for the full ROTPK scenario to check size. Do you suggest I remove here and the check in the .S files?",
      "parentUuid": "a32db884_1aa87bb1",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 37,
        "endChar": 6
      },
      "revId": "46e4845bc44e672f2b4a9ec6eda4f3e3fe2b08a1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bad8884_2b626069",
        "filename": "include/plat/arm/common/arm_def.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-10-13T09:53:42Z",
      "side": 1,
      "message": "@Lauren, that\u0027s right. \nIt seems unnecessary to introduce a new value for this definition every time we create a new .S ROTPK file. I don\u0027t see much benefit in comparing this defined value with the static size of ROTPK, IIUC.\nDevelopers likely understand what they\u0027re doing when adding a .S file, Furthermore, using a properly sized .S file doesn\u0027t guarantee that it will always work, as it could still be corrupted despite having the correct size.\n\nThis can be done as a part of separate patch.",
      "parentUuid": "a9bb822e_fc3d5dda",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 37,
        "endChar": 6
      },
      "revId": "46e4845bc44e672f2b4a9ec6eda4f3e3fe2b08a1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}