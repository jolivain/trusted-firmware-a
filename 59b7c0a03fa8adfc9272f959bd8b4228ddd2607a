{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "72071043_e01659ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-07-26T21:00:30Z",
      "side": 1,
      "message": "CI tested here from the top patch:\nhttp://ci.trustedfirmware.org/job/tf-a-gerrit-tforg-l2/2362/",
      "revId": "59b7c0a03fa8adfc9272f959bd8b4228ddd2607a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "854a8da4_348d4008",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 101,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-07-29T12:53:07Z",
      "side": 1,
      "message": "I\u0027m fine with this but thinking can this be wrapped in a single call as it is repitition? Something like the following:\n\n```\nstatic inline write_ctx_sctlr_el1_reg_errata(ctx) {\n#if (ERRATA_SPECULATIVE_AT)\n\twrite_ctx_reg(get_errata_speculative_at_ctx(ctx), CTX_ERRATA_SPEC_AT_SCTLR_EL1, sctlr_elx);\n#else\n\twrite_ctx_reg(get_el1_sysregs_ctx(ctx), CTX_SCTLR_EL1, sctlr_elx);\n#endif /* ERRATA_SPECULATIVE_AT */\n}\n\nwrite_ctx_sctlr_el1_reg_errata(ctx);\n```\n\nand similarly for TCR_EL1.",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 34
      },
      "revId": "59b7c0a03fa8adfc9272f959bd8b4228ddd2607a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "535a95f8_9898a722",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 101,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-07-29T14:59:19Z",
      "side": 1,
      "message": "Hi Manish,\nI too agree with your comment (repeatition) and I had this in mind.\nThe reason I still proceeded with this approach is, we need four functions here.\nOne for read and one for write for SCTLR_EL1 and TCR_EL1 regs.\n\n```\nwrite_ctx_sctlr_el1_reg_errata(ctx);\nread_ctx_sctlr_el1_reg_errata(ctx);\nwrite_ctx_tcr_el1_reg_errata(ctx);\nread_ctx_tcr_el1_reg_errata(ctx);\n```\n\nSo wasn\u0027t sure how that would be seen, as we are already using macros for accessing registers and this would be on top of it. Further, it would just be for these two registers and not for all. A little bit of deviation from generic pattern.\nSo restrained myself. Kindly Let me know. If you still prefer this to be optimised as you insist, I will modify it.\nThanks!",
      "parentUuid": "854a8da4_348d4008",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 34
      },
      "revId": "59b7c0a03fa8adfc9272f959bd8b4228ddd2607a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4620838f_086f4c96",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 101,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-07-29T15:20:57Z",
      "side": 1,
      "message": "\u003eSo wasn\u0027t sure how that would be seen, as we are already using macros for accessing registers and this would be on top of it. Further, it would just be for these two registers and not for all. A little bit of deviation from generic pattern. \n\nYes, I agree and it is not strong comment.\nHowever, IMO, such deviation should be acceptable if we provide a wrapper function for such a specific reason. Additionally, it will be beneficial for any future code that requires saving and restoring these registers. It will also serve as a reminder to use these APIs exclusively for saving and restoring these two registers, helping to prevent any future mistakes (?)",
      "parentUuid": "535a95f8_9898a722",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 34
      },
      "revId": "59b7c0a03fa8adfc9272f959bd8b4228ddd2607a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7440faf9_08f037b6",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 101,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-07-29T17:20:56Z",
      "side": 1,
      "message": "Agreed. Could be brought in as a separate small chore patch.",
      "parentUuid": "4620838f_086f4c96",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 34
      },
      "revId": "59b7c0a03fa8adfc9272f959bd8b4228ddd2607a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}