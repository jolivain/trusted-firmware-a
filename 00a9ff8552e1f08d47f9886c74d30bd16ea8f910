{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "98f28304_e747df33",
        "filename": "lib/extensions/amu/aarch64/amu.c",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-06T16:49:49Z",
      "side": 1,
      "message": "weren\u0027t all of these meant to be in the caller? And then the asserts can go away?",
      "revId": "00a9ff8552e1f08d47f9886c74d30bd16ea8f910",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52fa75c6_b1ba2057",
        "filename": "lib/extensions/amu/aarch64/amu.c",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-07T15:26:37Z",
      "side": 1,
      "message": "ACK for doing that in the caller.\nRegarding the asserts: I was just trying to copy the level of paranoia in the existing implementation here. The asserts are in static functions, and the callers check the availability of the feature already. So looking at this the asserts were redundant already.\nI am happy to remove them, but am not sure if they were put there with an intention.",
      "parentUuid": "98f28304_e747df33",
      "revId": "00a9ff8552e1f08d47f9886c74d30bd16ea8f910",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7a6dba4_0b5b29eb",
        "filename": "lib/extensions/amu/aarch64/amu.c",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-03-08T14:25:33Z",
      "side": 1,
      "message": "They\u0027re just there to sanity check preconditions in debug builds. I\u0027ve no particular attachment to them, but I don\u0027t think they do any harm either.",
      "parentUuid": "52fa75c6_b1ba2057",
      "revId": "00a9ff8552e1f08d47f9886c74d30bd16ea8f910",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d9f9988_b639ca51",
        "filename": "lib/extensions/amu/aarch64/amu.c",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-09T11:21:11Z",
      "side": 1,
      "message": "Soby pointed out that it\u0027s a little redundant writing EL1/EL0 registers at EL3 unless absolutely necessary. Is it? If not, then I can remove them and the asserts become a non-issue",
      "parentUuid": "c7a6dba4_0b5b29eb",
      "revId": "00a9ff8552e1f08d47f9886c74d30bd16ea8f910",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cffad175_d6038c31",
        "filename": "lib/extensions/amu/aarch64/amu.c",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-09T12:04:23Z",
      "side": 1,
      "message": "\u003e redundant writing EL1/EL0 registers at EL3\n\nIf you are referring to write_amcntenset0_el0_px: this register is writeable from the highest implemented EL only, though readable from all lower ELs. So it\u0027s our duty to write it, otherwise no one else will be able to. Similar to CNTFRQ_EL0.\n\nRegarding the asserts: it raises an eyebrow here because they are in static functions. I see the points of asserts in functions that are used across the code base, to make sure every caller complies. But here those are just wrapper functions, actually purely for adding the asserts. That looks a bit over the top for me, since there is only one caller for each of them, and the call is done in a loop. All the callers check the conditions already.\nSo all that would protect against is someone deliberately sabotaging the code?\n\nI will leave the asserts in, for now, since it\u0027s a separate change anyway, but we might want to come back to this? I use debug builds most of the time, since then I can get more information out if something goes wrong for whatever reason, at any time, and don\u0027t need to try to reproduce with a debug build again. So I am inclined to not leave random stuff in debug builds because they are \"just debug builds\".",
      "parentUuid": "0d9f9988_b639ca51",
      "revId": "00a9ff8552e1f08d47f9886c74d30bd16ea8f910",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}