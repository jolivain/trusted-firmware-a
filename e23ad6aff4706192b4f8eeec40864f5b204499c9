{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f6f49ef_18157bce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-04-27T11:49:36Z",
      "side": 1,
      "message": "\u003e Patch Set 17: Validation-Bot-Review-1\n\u003e \n\u003e Build finished: 229 (https://qa-reports.linaro.org/tf/tf-gerrit-tforg-l2/build/229/)\n\u003e Some tests failed (1)\n\nunrelated Juno failure: https://tf.validation.linaro.org/scheduler/job/174368",
      "revId": "e23ad6aff4706192b4f8eeec40864f5b204499c9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07960820_64aeafa4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2021-04-27T21:50:06Z",
      "side": 1,
      "message": "Adding Anre",
      "revId": "e23ad6aff4706192b4f8eeec40864f5b204499c9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "241b17b9_d8f35349",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2021-04-27T21:53:15Z",
      "side": 1,
      "message": "Sorry, button pressed too soon.\nadding @Andre.\nI think its already discussed earlier but IMHO including zlib support just for CRC looks like an overkill to me. Can we not use built-in",
      "parentUuid": "07960820_64aeafa4",
      "revId": "e23ad6aff4706192b4f8eeec40864f5b204499c9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f75b4dd0_e46d0a2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-04-28T09:11:35Z",
      "side": 1,
      "message": "IMO, we can add generic code to compute CRC of the buffer using CRC built-in. As mentioned in an earlier comment, enabling the use of built-in CRC varies depends upon the compiler, so we need to add compiler option accordingly in Makefile. There is a limitation though, armasm compiler supports CRC only after ARMv8.1 and later. \nIf everybody agrees to go ahead with a built-in option then will start looking into it. The current implementation works well to compute the CRC of the given buffer.",
      "parentUuid": "241b17b9_d8f35349",
      "revId": "e23ad6aff4706192b4f8eeec40864f5b204499c9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d24ce2d_7a505955",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2021-04-28T17:32:27Z",
      "side": 1,
      "message": "So there are several points to consider:\n- CRC instructions are strictly speaking optional, although the Arm Ltd. cores implement it, and it\u0027s mandatory from v8.1 onwards anyway. So I\u0027d say it\u0027s safe for plat/arm, at least.\n- The h/w CRC insns provide support for two widely used polynomials, and are raw instructions. The zlib polynomial is one of the supported ones (crc32, without the \"c\"), but it might still need some massaging to make the raw instructions fully compatible to the zlib function.\n- I don\u0027t think it\u0027s too useful to have *two* implementations: either we go all software, or always use the hardware implementation. Making this a compile time choice only increases the test matrix, and I think we are not performance sensitive here, aren\u0027t we?\n- Beside code size I think the instructions are much easier to use, and there is less risk of security issues - given that the actual zlib algorithm can be easily constructed using the instructions.\n- I think compiler support is solvable, as it\u0027s required for Juno already, and I think we use multiple (if not all supported?) toolchains already for Juno in the CI.\n\nSo I\u0027d give it a try, it should be easier, smaller and even faster using the instructions.",
      "parentUuid": "f75b4dd0_e46d0a2d",
      "revId": "e23ad6aff4706192b4f8eeec40864f5b204499c9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4ab7b56_943c3c68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-04-28T17:56:29Z",
      "side": 1,
      "message": "\u003e So there are several points to consider:\n\u003e - CRC instructions are strictly speaking optional, although the Arm Ltd. cores implement it, and it\u0027s mandatory from v8.1 onwards anyway. So I\u0027d say it\u0027s safe for plat/arm, at least.\n\nAgree! if all Arm platforms cores are v8.1 onwards.\n\n\u003e - The h/w CRC insns provide support for two widely used polynomials, and are raw instructions. The zlib polynomial is one of the supported ones (crc32, without the \"c\"), but it might still need some massaging to make the raw instructions fully compatible to the zlib function.\n\nNeed to check CRC generated value via zlib and via intrinsic shows similar results or not.\n\n\u003e - I don\u0027t think it\u0027s too useful to have *two* implementations: either we go all software, or always use the hardware implementation. Making this a compile time choice only increases the test matrix, and I think we are not performance sensitive here, aren\u0027t we?\n\nIf hardware implementation goes well, then we will go ahead with only HW CRC calculation in the code (without providing any other option). \nCurrently, we do not have performance-sensitive use cases for e.g. firmware update implementation that uses CRC calculation (where I think performance doesn\u0027t matter much).\n\n\u003e - Beside code size I think the instructions are much easier to use, and there is less risk of security issues - given that the actual zlib algorithm can be easily constructed using the instructions.\n\nAgree!\n\n\u003e - I think compiler support is solvable, as it\u0027s required for Juno already, and I think we use multiple (if not all supported?) toolchains already for Juno in the CI.\n\u003e \n\u003e So I\u0027d give it a try, it should be easier, smaller and even faster using the instructions.",
      "parentUuid": "4d24ce2d_7a505955",
      "revId": "e23ad6aff4706192b4f8eeec40864f5b204499c9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}