{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f9b29dc9_23c01c9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-09-13T16:33:02Z",
      "side": 1,
      "message": "Unrelated failure. Manually providing +1.",
      "revId": "5a77810e041f6c30cb43e809045b75a56454b5b8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf8ca71a_1d6fca7f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-09-14T11:09:34Z",
      "side": 1,
      "message": "@Manish B, could you please add your vote if there are no further comments.\nThanks!",
      "revId": "5a77810e041f6c30cb43e809045b75a56454b5b8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7dd0545_b5623b1b",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 11
      },
      "lineNbr": 185,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2022-09-14T17:03:12Z",
      "side": 1,
      "message": "I think, this check will pass on for positive scenarios.\n\nAs pointed earlier from Manish B, since its a global API, there is a possibility, when some random number gets passed here.\nAfter doing a quick test, with the below values: \npsci_plat_core_count \u003d 15\ncore_count \u003d 25\n\nassert will pass, which shudn\u0027t. So this check won\u0027t be ideal for all scenarios.\n\n\nGoing back to the root cause: \nWe thought of having this check as there might be muliple trees in the forest, but no where in the design (TF-A docs of PSCI power domain tree), they have \nmentioned about muliple trees. All we convey to the platforms is to define the tree description, in the form of a array. \n\nSo if we consider and make changes only with respect to a single tree, we could proceed this way: \n\nbool psci_is_last_on_cpu(void)\n{\n         unsigned int cpu_idx, my_idx \u003d plat_my_core_pos();\n\n\tfor (cpu_idx \u003d 0; cpu_idx \u003c psci_plat_core_count;\n\t\t\tcpu_idx++) {\n\t\tif (cpu_idx \u003d\u003d my_idx) {\n\t\t\tassert(psci_get_aff_info_state() \u003d\u003d AFF_STATE_ON);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (psci_get_aff_info_state_by_idx(cpu_idx) !\u003d AFF_STATE_OFF)\n\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n\nand \n\nbool psci_is_last_on_cpu_safe(void)\n{\n\tunsigned int this_core \u003d plat_my_core_pos();\n\tunsigned int parent_nodes[PLAT_MAX_PWR_LVL] \u003d {0};\n\tunsigned int i \u003d 0;\n\n\t/*\n\t * Traverse the forest of PSCI nodes, nodes with no parents\n\t * (invalid-nodes) are the root nodes.\n\t */\n\twhile ((i \u003c PSCI_NUM_NON_CPU_PWR_DOMAINS) \u0026\u0026\n\t       (psci_non_cpu_pd_nodes[i].parent_node \u003d\u003d\n\t       PSCI_PARENT_NODE_INVALID)) {\n\t\tpsci_get_parent_pwr_domain_nodes(\n\t\t\t\tpsci_non_cpu_pd_nodes[i].cpu_start_idx,\n\t\t\t\tPLAT_MAX_PWR_LVL, parent_nodes);\n\n\t\tpsci_acquire_pwr_domain_locks(PLAT_MAX_PWR_LVL, parent_nodes);\n\n\n\n\n*************************************************************************\n\t\tEither of the below could be used \n                assert( i \u003d\u003d 0 ) check or\n              \n                assert(psci_plat_core_count \u003d psci_non_cpu_pd_nodes[i].ncpus; \n**************************************************************************\n\t\tif (! psci_is_last_on_cpu() ) {\n\t\t\tpsci_release_pwr_domain_locks(PLAT_MAX_PWR_LVL, parent_nodes);\n\t\t\treturn false;\n\t\t}\n\n\t\tpsci_release_pwr_domain_locks(PLAT_MAX_PWR_LVL, parent_nodes);\n\t\ti++;\n\t}\n\n\treturn true;\n}\n\nSo here, we are not making any changes to the existing \"psci_is_last_on_cpu\", this would eliminate the cases, wherein a false number  could be passed\nand we are checking whther the root_node.ncpus value is equal to the psci_plat_core_count.\nThus we are reusing the psci_is_last_on_cpu api in psci_is_last_on_cpu_safe, which we targeted.\n\nLet me know your thoughts here. If we agree to the above change, I will push a patch.\nIf there are other suggestions, we could discuss.\n\nKindly share your thoughts",
      "revId": "5a77810e041f6c30cb43e809045b75a56454b5b8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}