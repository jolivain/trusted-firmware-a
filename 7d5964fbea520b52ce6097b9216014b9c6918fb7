{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "91d03de5_5f96c28c",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-09-22T20:28:06Z",
      "side": 1,
      "message": "what\u0027s the point of passing the base and offset? Why not add this and send the ptr as input param instead?",
      "range": {
        "startLine": 156,
        "startChar": 11,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0d59ae5_72c0f9d5",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-09-23T06:06:01Z",
      "side": 1,
      "message": "\u003e what\u0027s the point of passing the base and offset? \nTo avoid common operation at caller side.\n\n\u003e Why not add this and send the ptr as input param instead?\nIf we agree to pre-process these pointers at the caller side before passing to this function, then we can make this function simpler as below:\nevent_log_start for BL1 - event_log array base \nevent_log_start for BL2 - event_log + offset (no.of bytes filled by BL1 in Event Log buffer)\n\n void event_log_init(uint8_t *event_log_start, uint8_t *event_log_finish)\n {\n     assert(event_log_start !\u003d NULL);\n     assert(event_log_finish \u003e event_log_base);\n\n     log_ptr \u003d event_log_start;\n     event_log_end \u003d event_log_finish;\n     ...\n }",
      "parentUuid": "91d03de5_5f96c28c",
      "range": {
        "startLine": 156,
        "startChar": 11,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1458c18b_fd12d384",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-09-23T09:32:08Z",
      "side": 1,
      "message": "I think your suggestion is better. We should use it.",
      "parentUuid": "c0d59ae5_72c0f9d5",
      "range": {
        "startLine": 156,
        "startChar": 11,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "041fc124_2c537f40",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-09-23T12:21:19Z",
      "side": 1,
      "message": "I think that BL2 needs all 3 pieces of info:\n1) The base address of the buffer is needed for BL2 to print the complete event log, including the measurements recorded by BL1. Further boot stages in secure \u0026 normal world also need to know the base address, I think.\n2) The offset within the buffer is needed for BL2 to append its measurements after BL1\u0027s.\n3) The total size of the buffer (or remaining space) is needed for BL2 to check that it does not write past the end of the buffer.\n\nIt seems to me that we cannot pull this off without all 3 pieces of data, can we? How would we implement 1) with Manish\u0027s suggestion?",
      "parentUuid": "1458c18b_fd12d384",
      "range": {
        "startLine": 156,
        "startChar": 11,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5528b8b3_db141277",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-09-23T13:07:04Z",
      "side": 1,
      "message": "Hi Sandrine, This init function needs information from the platform to update log_ptr(running Event Log ptr) and event_log_end ptr, so I don\u0027t think we need to cover 1) over here. \nIf BL2 platform code specifies where to start logging and end that is quite enough right? that means BL2 platform code needs to call the function as:\n  /* retrieve offset and event_log_base from tb_fw_config */\n  event_log_start \u003d event_log_base + offset;\n  event_log_finish \u003d event_log_base + PLAT_EVENT_LOG_MAX_SIZE;\n  event_log_init(event_log_start, event_log_finish);\n\nTo print the log BL2 platform needs to call:\n  dump_event_log(event_log_base, event_log_cur_size) -\u003e present in event_print.c\n\nPlease correct me if I am wrong. Thanks!",
      "parentUuid": "041fc124_2c537f40",
      "range": {
        "startLine": 156,
        "startChar": 11,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28080adf_a03f1867",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-09-23T13:43:41Z",
      "side": 1,
      "message": "Yes, OK, sorry I mixed things up. As you say, the caller needs all 3 pieces of info, but the event log driver init function only needs the start and end addresses of the portion of memory it should write to.",
      "parentUuid": "5528b8b3_db141277",
      "range": {
        "startLine": 156,
        "startChar": 11,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd5403ce_7aff6357",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-09-22T20:28:06Z",
      "side": 1,
      "message": "assert(event_log_end \u003e event_log_base);",
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb64e285_fa7950cd",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-09-23T06:06:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cd5403ce_7aff6357",
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e8363e1_42814f14",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-09-22T20:28:06Z",
      "side": 1,
      "message": "assert(plat_metadata_ptr !\u003d NULL);",
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21631b72_1ed523e8",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-09-23T06:06:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8e8363e1_42814f14",
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a36f31c4_44fb3bd6",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 291,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-09-22T20:28:06Z",
      "side": 1,
      "message": "should we check for wrap around?",
      "range": {
        "startLine": 291,
        "startChar": 19,
        "endLine": 291,
        "endChar": 55
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89c395bd_0d9ea189",
        "filename": "drivers/measured_boot/event_log/event_log.c",
        "patchSetId": 1
      },
      "lineNbr": 291,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-09-23T06:06:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a36f31c4_44fb3bd6",
      "range": {
        "startLine": 291,
        "startChar": 19,
        "endLine": 291,
        "endChar": 55
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f5d1f35_6a6dcb78",
        "filename": "plat/arm/common/arm_dyn_cfg_helpers.c",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-09-22T20:28:06Z",
      "side": 1,
      "message": "should check if image_info is non-NULL first",
      "range": {
        "startLine": 220,
        "startChar": 31,
        "endLine": 220,
        "endChar": 41
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae948403_24a42ae8",
        "filename": "plat/arm/common/arm_dyn_cfg_helpers.c",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-09-23T06:06:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1f5d1f35_6a6dcb78",
      "range": {
        "startLine": 220,
        "startChar": 31,
        "endLine": 220,
        "endChar": 41
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e207ce0_13bf9b76",
        "filename": "plat/arm/common/arm_dyn_cfg_helpers.c",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-09-22T20:28:06Z",
      "side": 1,
      "message": "should check if image_info is non-NULL first",
      "range": {
        "startLine": 263,
        "startChar": 31,
        "endLine": 263,
        "endChar": 41
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "499fbd1b_a0575165",
        "filename": "plat/arm/common/arm_dyn_cfg_helpers.c",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-09-23T06:06:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3e207ce0_13bf9b76",
      "range": {
        "startLine": 263,
        "startChar": 31,
        "endLine": 263,
        "endChar": 41
      },
      "revId": "7d5964fbea520b52ce6097b9216014b9c6918fb7",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}