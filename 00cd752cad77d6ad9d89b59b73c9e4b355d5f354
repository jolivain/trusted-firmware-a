{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2be5a15a_e4203243",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 1011,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-05-09T13:33:22Z",
      "side": 1,
      "message": "Just thinking, should we completely overwrite the sctlr_el2 here? trying to understand original code does read,and/or, here we are overwriting entire reg?",
      "range": {
        "startLine": 1011,
        "startChar": 4,
        "endLine": 1011,
        "endChar": 13
      },
      "revId": "00cd752cad77d6ad9d89b59b73c9e4b355d5f354",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c8de936_9232a300",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 1011,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-05-09T13:56:38Z",
      "side": 1,
      "message": "This code block executes in cold boot. \nPreviously, during cold boot, the primary CPU gets its context initialised for NS and later on -\u003e SECURE world.\nIn this path, if we have Secure component running at S-EL2(CTX_INCLUDE_EL2_REGS) present, then we initialise SCTLR_EL2 register in setup_ns_context function and this will be used to while we switch to NS later on, wherein NS context gets restored.\n\nIn build configs, wherein we don\u0027t have S-EL2 (SPMC), here we use the SCTLR_EL1 value to configure SCTLR_EL2 register, as we have a software component at NS-EL2, but not at S-EL2.\n\nWith this, the problem is we cannot decouple EL1 and EL2 context, which is our primary goal.\n\nHence I thought of having a global value for configuring this register, as it\u0027s just the initial configuration. With this I dont need to rely on EL2 register context, to configure EL1 register.\n\nHope this provides some overview and the reason behind this patch.",
      "parentUuid": "2be5a15a_e4203243",
      "range": {
        "startLine": 1011,
        "startChar": 4,
        "endLine": 1011,
        "endChar": 13
      },
      "revId": "00cd752cad77d6ad9d89b59b73c9e4b355d5f354",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4358375_976ffa77",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 1011,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-05-09T16:42:20Z",
      "side": 1,
      "message": "Ah ok makes sense. Agree with you, just was thinking `sctlr_el2_endian_val` doesn\u0027t fully now represent the entire value of `sctlr_el2` when we do `write_sctlr_el2`.\n\nWas just worrying(maybe unnecessarily ðŸ˜Š) are we overwriting any default values from Power on Reset(POR) certain regs are configured to hold default values on POR and we overwrite any default values we may be overriding any default behavior.",
      "parentUuid": "8c8de936_9232a300",
      "range": {
        "startLine": 1011,
        "startChar": 4,
        "endLine": 1011,
        "endChar": 13
      },
      "revId": "00cd752cad77d6ad9d89b59b73c9e4b355d5f354",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "161cd489_64efa70a",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 1011,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-05-10T14:44:06Z",
      "side": 1,
      "message": "I got your thought. We aren\u0027t.\n\nIdeally SCTLR_EL2 will be again configured from the software running at EL-2.\nOn top of this, at boot EL3 firmware still tries to intiailise it with some default reset value.\nSo it s a one time write.\n\nIt comes in this flow:\nprimary cpu enters, ``setup_ns_context`` where we try to fetch the endianness value and save it in global variable. Later on, when the primary cpu enters NS-EL2 for the first time, we update the ``sctlr_el2`` register with this endianness value and the ``SCTLR_EL2_RES1``. \n\nPreviously, we did the exact same thing but via ``SCTLR_EL1`` register. Now instead of this we are using the saved value. So we aren\u0027t overwriting it.\n\nIn fact, if we overwrite the ``SCTLR_EL2`` register, TFTF test cases will fail.\nI encountered this in my previous version of patch 7.\n\nSo in order to fetch the endianness value we need to save it at some place and use it at later part, while we exit to NS-EL2.",
      "parentUuid": "a4358375_976ffa77",
      "range": {
        "startLine": 1011,
        "startChar": 4,
        "endLine": 1011,
        "endChar": 13
      },
      "revId": "00cd752cad77d6ad9d89b59b73c9e4b355d5f354",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "360b5ee3_3cb1b9f8",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 19
      },
      "lineNbr": 1011,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-05-10T14:51:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "161cd489_64efa70a",
      "range": {
        "startLine": 1011,
        "startChar": 4,
        "endLine": 1011,
        "endChar": 13
      },
      "revId": "00cd752cad77d6ad9d89b59b73c9e4b355d5f354",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}