{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "faeb241b_83b6f6bc",
        "filename": "drivers/arm/gic/v3/gicv3_main.c",
        "patchSetId": 4
      },
      "lineNbr": 1287,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-02-06T23:11:27Z",
      "side": 1,
      "message": "can you remove the panic from the is_valid_interrupt()? The caller of this helper utility can decide to invoke panic if needed. The motivation is that the helper utility should be recoverable and let the caller decide what to do. So this would look like:\n\nif (!is_valid_interrupt(id)) {\n  panic();\n}\n\nif (is_sgi_or_ppi(id)) {\n..............\n} else {\n..............\n}",
      "range": {
        "startLine": 1275,
        "startChar": 0,
        "endLine": 1287,
        "endChar": 2
      },
      "revId": "9b6edb06df209327248e73196bd568136776dc44",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "907b213c_0e47a437",
        "filename": "drivers/arm/gic/v3/gicv3_main.c",
        "patchSetId": 4
      },
      "lineNbr": 1287,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2024-02-06T23:52:06Z",
      "side": 1,
      "message": "Done, have changed the logic to return false from is_valid_interrupt in case the interrupt ID number is outside the expected range. \nPanic is the action taken if the is_valid_interrupt utility returns a false and is now not part of the is_valid_interrupt function.",
      "parentUuid": "faeb241b_83b6f6bc",
      "range": {
        "startLine": 1275,
        "startChar": 0,
        "endLine": 1287,
        "endChar": 2
      },
      "revId": "9b6edb06df209327248e73196bd568136776dc44",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}