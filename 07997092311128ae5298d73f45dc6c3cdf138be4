{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "481859fc_07458cd1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000469
      },
      "writtenOn": "2023-04-11T13:14:20Z",
      "side": 1,
      "message": "https://ci.trustedfirmware.org/job/tf-a-static-checks/4265/\n\n****** Newly added files detection check for Coverity Scan analysis on patch(es) ******\n\nResult : FAILURE\n\nAlready wired that\u0027s why this can be ignored completely.",
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75d0a7eb_6ee69a23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000049
      },
      "writtenOn": "2023-05-09T21:48:33Z",
      "side": 1,
      "message": "Post v2.9 target.",
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec84d86a_08f70393",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000811
      },
      "writtenOn": "2023-05-12T14:23:52Z",
      "side": 1,
      "message": "sending out next version",
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cab1f18f_88c2a5a7",
        "filename": "plat/xilinx/common/versal.c",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-04-11T13:31:07Z",
      "side": 1,
      "message": "Would like to know why this error code is returned when chip information cannot be obtained. Based on SMCCC [1] section 7.4.4, this error code is relevant when the input parameter is incorrect. \n\nI think, the plat_is_smccc_feature_available function should return the error \"SMC_ARCH_CALL_NOT_SUPPORTED\" if the chip information cannot be obtained. \n\nAny thoughts?\n\n[1]: https://developer.arm.com/documentation/den0028/latest/",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cf5a34f_b8d0e356",
        "filename": "plat/xilinx/common/versal.c",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000469
      },
      "writtenOn": "2023-04-12T11:31:39Z",
      "side": 1,
      "message": "Based on the logic you should call if feature is available. If it is call plat_get_soc_version(). But actually code is not enforcing it.\n\nIt means you can call smccc_arch_id() directly and should return NOT_IMPLEMENTED which doesn\u0027t have listed error value for it.\n\nI see only \n116 #define SMC_ARCH_CALL_SUCCESS           0\n117 #define SMC_ARCH_CALL_NOT_SUPPORTED     -1\n118 #define SMC_ARCH_CALL_NOT_REQUIRED      -2\n119 #define SMC_ARCH_CALL_INVAL_PARAM       -3\n\nShould we create new one?",
      "parentUuid": "cab1f18f_88c2a5a7",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f4fd42b_3c2f93a7",
        "filename": "plat/xilinx/common/versal.c",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-04-12T12:54:55Z",
      "side": 1,
      "message": "Hi Michal,\n\nIt looks like typo in the SMCCC documentation. There is not error code for SMC_ARCH_CALL_NOT_IMPLEMENTED. Best you can treat this as a SMC_ARCH_CALL_NOT_SUPPORTED.\n\nIn addition, I am concerned about why there is a function call to retrieve chip information every time an SMC trigger is triggered. Wouldn\u0027t it be possible to retrieve the chip information at boot-up and cache it, and then these SMCs could return the cached data? If \u0027pm_get_chipid\u0027 returns static information, does it make sense to call it on every SMC trigger?",
      "parentUuid": "2cf5a34f_b8d0e356",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "848c7b84_a13134d3",
        "filename": "plat/xilinx/common/versal.c",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000469
      },
      "writtenOn": "2023-04-12T13:55:08Z",
      "side": 1,
      "message": "ok. No issue to return SMC_ARCH_CALL_NOT_SUPPORTED instead. \n\nAlso calling it only once is easy to do. That function is likely called only once and on these socs we don\u0027t have issue with size that\u0027s why it can be simply done.",
      "parentUuid": "0f4fd42b_3c2f93a7",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6d7ec38_6c19c17d",
        "filename": "plat/xilinx/common/versal.c",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-04-12T15:40:51Z",
      "side": 1,
      "message": "Thanks Michal, makes sense!",
      "parentUuid": "848c7b84_a13134d3",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c2129d6_fc33df92",
        "filename": "plat/xilinx/common/versal.c",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000811
      },
      "writtenOn": "2023-05-12T14:23:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6d7ec38_6c19c17d",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3534b6cd_667572ff",
        "filename": "plat/xilinx/common/versal.c",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-04-12T12:54:55Z",
      "side": 1,
      "message": "Better mask this with SOC_ID_REV_MASK i.e. chip_info[0] \u0026 SOC_ID_REV_MASK",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 64,
        "endChar": 20
      },
      "revId": "07997092311128ae5298d73f45dc6c3cdf138be4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}