{
  "comments": [
    {
      "key": {
        "uuid": "a6363e2e_0712111e",
        "filename": "common/bl_common.c",
        "patchSetId": 7
      },
      "lineNbr": 313,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-07-15T16:05:55Z",
      "side": 1,
      "message": "This needs to be moved to plat/common folder (and called plat_bl31_params_*). Ideally we don\u0027t want to reintroduce code for deprecated structures and this has to be under DEPRECATED build flag.",
      "range": {
        "startLine": 313,
        "startChar": 5,
        "endLine": 313,
        "endChar": 22
      },
      "revId": "3f4aa053190b7f537e0eb1de1bb2a136651f36ec",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f044ae8a_1d8bae2e",
        "filename": "common/bl_common.c",
        "patchSetId": 7
      },
      "lineNbr": 313,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2019-07-16T02:51:28Z",
      "side": 1,
      "message": "Note that the purpose of this isn\u0027t only to keep supporting the version 1 parameters, it\u0027s also just a convenience wrapper to parse version 2. I think due to the linked list structure parsing it requires enough code that it\u0027s worth not duplicating it for every platform. Do you still want me to move it to plat/common? (I still don\u0027t really understand where the line between plat/common and the rest is supposed to be, I guess.)\n\nIf you\u0027re worried about the deprecated code, would wrapping those parts in #if !ERROR_DEPRECATED be okay? (I\u0027m intending to move coreboot to the version 2 structures as soon as all of this lands, so personally I don\u0027t care very much. But in general, I think it might be better and wouldn\u0027t really hurt if we supported deprecated interfaces for stuff that interacts with third-party code a little longer... I would say that\u0027s not quite the same thing as avoiding use of deprecated interfaces within TF-A. It\u0027s a bit odd that all those parameter structures are so carefully versioned if we\u0027re not going to continue supporting the older versions anyway.)",
      "parentUuid": "a6363e2e_0712111e",
      "range": {
        "startLine": 313,
        "startChar": 5,
        "endLine": 313,
        "endChar": 22
      },
      "revId": "3f4aa053190b7f537e0eb1de1bb2a136651f36ec",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2015cadb_72ee7632",
        "filename": "common/bl_common.c",
        "patchSetId": 7
      },
      "lineNbr": 313,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-07-17T09:00:58Z",
      "side": 1,
      "message": "It is worth factorizing code for the platforms for this case. \n\n/common is meant to be helper functions reused by generic layer and the platform layer. Generally, if a proper API interface can be well defined (like you have done for bl_aux_params), and is more or less standalone, this would go into the /lib folder.\n\nThe parameter passing between BL2 and BL31 is completely a platform specific thing. Platforms can choose to use `bl_params_t` list or `bl_aux_params` or DT (and hence my initial thoughts on prefixing this function with `plat_`).\n\nCalling this function bl31_params_parse() gives the notion that this is __the__ mandated way to pass argument between BL2 and BL31 which it is not. \n\nHere is another proposal :\n\nIf you wrap all of this implementation under #if !ERROR_DERPECATED and then rename this API to compat_bl31_params_parse() with comments saying that this is a helper compatibility API to help with migration of platform still using the deprecated `bl31_params_v1` struct and place it in `common/desc/image_load.c` that will be good I think.",
      "parentUuid": "f044ae8a_1d8bae2e",
      "range": {
        "startLine": 313,
        "startChar": 5,
        "endLine": 313,
        "endChar": 22
      },
      "revId": "3f4aa053190b7f537e0eb1de1bb2a136651f36ec",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}