{
  "comments": [
    {
      "key": {
        "uuid": "5b8821aa_5d610a29",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 301,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-07-06T19:26:45Z",
      "side": 1,
      "message": "can you use an appropriate name for this variable? something like cpu_node_name?",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f41e274e_b4af685f",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 301,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b8821aa_5d610a29",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce04adbd_a6b645c1",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 313,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "Does MISRA ask for the return value of snprintf to be checked? Because I think string will always be able to hold the biggest u32 value (10 digits + \"cpu\" + \"@\" + \\0).",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1423045c_bbb8ed28",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 313,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "Yes, as you pointed out string should have space to hold the subnode name, I just added the check to warn in case of a truncation. However the arguments for snprintf are not passed on the call but generated by the platform, so I guess it is safe to remove this check.",
      "parentUuid": "ce04adbd_a6b645c1",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc1b1a35_5a04a3fe",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 326,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "Mmh, don\u0027t you need to convert the endianess before writing the property?",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dd3a2a4_64f5ff39",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 326,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc1b1a35_5a04a3fe",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c7a2645_6980b824",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 359,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "Those two names don\u0027t match the actual function parameter names below.",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bdbf39d_b94f3e92",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 359,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c7a2645_6980b824",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87b582e3_333d5d67",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 374,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-07-06T19:26:45Z",
      "side": 1,
      "message": "can you use a more appropriate name than string? may be cluster_name or node_name?",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b2d15a2_93e18a5b",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 374,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87b582e3_333d5d67",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9026464b_eacc91d1",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 394,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "Wouldn\u0027t it be easier to let fdt_get_phandle() return the phandle instead? You just seem to use tmp_offs for that purpose?",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c730bad_08e2308b",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 394,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "fdt_add_cluster() returns the cluster offset or a negative value on error. fdt_get_phandler() returns 0 if no phandler is found (which is interpreted as error as fdt_add_cluster_cache() adds a phandle property to the cache node). by returning the phandle value, it could be interpreted as a valid offset of 0 instead of an error.",
      "parentUuid": "9026464b_eacc91d1",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3813049b_5e77b472",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 394,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-30T18:23:51Z",
      "side": 1,
      "message": "Oh, I wrote rubbish: I meant to let *fdt_add_cluster_cache()* return the phandle instead, since the offset value is just used to get the phandle. So you save the call to fdt_get_phandle(), and directly assign cc_phandle to the return value of fdt_add_cluster_cache().",
      "parentUuid": "2c730bad_08e2308b",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f6727fa_e1b1bfef",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 426,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "Similar thing here: let fdt_add_cpu_node() return the phandle.",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2833c446_0f8854b4",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 426,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "Refer to my previous comment.",
      "parentUuid": "5f6727fa_e1b1bfef",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cdce333_19b4ea92",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 523,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "I think that\u0027s not needed, most fdt_ functions interpret offset\u003d0 as the root node. But please double check that.",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec89ab4f_c01464be",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 523,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-07-06T19:26:45Z",
      "side": 1,
      "message": "Yes, root node has offset 0.",
      "parentUuid": "7cdce333_19b4ea92",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75067d78_ae2264ca",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 523,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec89ab4f_c01464be",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6630bc6c_e1ad2b68",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 534,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-07-06T19:26:45Z",
      "side": 1,
      "message": "Before returning an error value from any of the helper APIs you created, can you put a debug message similar to this:\nVERBOSE(\"FDT: write to %s property of node at offset %d\\n failed\", \"#address-cells\", offs);",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd0476df_bfa64286",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 534,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6630bc6c_e1ad2b68",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3217b40_99df25c9",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 544,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "Do you just need the phandle for getting the /cpus node later? I don\u0027t think it\u0027s needed in the eventual DTB. What about storing the node offset when creating the \"cpus\" node above, then passing this on to fdt_add_cluster()?",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04f7628b_94c397c9",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 544,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "The offsets can change as more subnodes and properties are added and I would need to recalculate them every time I needed them. So I thought it would be better to get an offset from a phandle than from a node name, hence storing the phandle.",
      "parentUuid": "e3217b40_99df25c9",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd0dbf8b_710b45dd",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 544,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-30T18:23:51Z",
      "side": 1,
      "message": "I don\u0027t think the offset of the *parent node* changes when you add children or properties. This is actually how you add those, by referencing this same node offset. Besides, see the other comment, and you can drop this in favour of using fdt_path_offset() in the callee.",
      "parentUuid": "04f7628b_94c397c9",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1ad7f36_a87678de",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 552,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "Same thing as above? The phandle is not needed, just use the node offset?",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9314665c_fc07b6b1",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 552,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "See my previous comment.",
      "parentUuid": "e1ad7f36_a87678de",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "270cc405_8c3527b0",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 552,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-30T18:23:51Z",
      "side": 1,
      "message": "You can apply a similar approach in the callee: fdt_path_offset(\"/cpus/cpu-map\")",
      "parentUuid": "9314665c_fc07b6b1",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdac6432_c46dc1d3",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 554,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-07-06T19:26:45Z",
      "side": 1,
      "message": "Is it always guaranteed that a LLC(L3) cache exists for FPGA port? I am curious why it has to be populated in device tree. Is it not possible to detect presence of LLC through some Feature Identification register?",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f31ca84_ca6a8529",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 554,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "I used the Zeus DTS as reference for this implementation. I will find out about what you propose here, but in the meantime I guess the rest of changes can be reviewed.",
      "parentUuid": "bdac6432_c46dc1d3",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee24c16d_e3ffc3ee",
        "filename": "common/fdt_fixup.c",
        "patchSetId": 13
      },
      "lineNbr": 554,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-30T18:23:51Z",
      "side": 1,
      "message": "Yes, I see that much of the complexity stems from those cache and cpu-map nodes. They are optional and help Linux to understand the cache topology, to optimise scheduler decisions. So I think we can indeed reduce the code significantly by just dropping them, at least for now. What Linux really needs is the cpu nodes.",
      "parentUuid": "8f31ca84_ca6a8529",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f12a9c3_972f45a1",
        "filename": "plat/arm/board/arm_fpga/fpga_bl31_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 130,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-06T16:47:29Z",
      "side": 1,
      "message": "Yeah, so in my current setup I reserve 64KB for the DT, putting it just before the kernel. Currently the typical DTB is around 3KB, so plenty of room, even with a sophisticated topology.",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea69811a_1c9ca85a",
        "filename": "plat/arm/board/arm_fpga/fpga_bl31_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 130,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-30T18:23:51Z",
      "side": 1,
      "message": "That is all addressed in the command line patch now, which already introduces this function. You would just need to add the 5 lines with the call to fdt_add_topology_tree() below.",
      "parentUuid": "9f12a9c3_972f45a1",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74e578a3_8b210a9d",
        "filename": "plat/arm/board/arm_fpga/fpga_bl31_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-07T08:59:34Z",
      "side": 1,
      "message": "Other users (qemu/rpi4) use fdt_pack() here, apparently to close the gaps in the blob. I need to check whether this is really necessary and what it does exactly, but it\u0027s probably good to follow suit here.\n\nPlus we should clean the cache here. Not doing so caused actual issues on the RPi4. At the moment this doesn\u0027t matter, but I think there were plans to enable the MMU in the future.",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a53dd14_c38e3c08",
        "filename": "plat/arm/board/arm_fpga/fpga_bl31_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-29T16:15:10Z",
      "side": 1,
      "message": "I think fdt_pack is safe to use. I added it, as well as I cleaned the cache inside fdt_add_topology_tree()",
      "parentUuid": "74e578a3_8b210a9d",
      "revId": "70783d6a960cf2abbe8812769127da0433a79dde",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}