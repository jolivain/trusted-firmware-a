{
  "comments": [
    {
      "key": {
        "uuid": "ea107a3a_5477e53b",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T05:04:33Z",
      "side": 1,
      "message": "How do we address scenarios where previous contributors are not around to add their \"Signed-off-by\"? They still made the contribution and an author might want to give them credit for their work, but cannot add \"Signed-off-by\" on their behalf",
      "range": {
        "startLine": 43,
        "startChar": 56,
        "endLine": 45,
        "endChar": 8
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d00999d3_793eee6c",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-18T08:51:32Z",
      "side": 1,
      "message": "I guess in this case you could use a \u0027Co-authored-by\u0027 tag instead of a \u0027Signed-off-by\u0027 one.",
      "parentUuid": "ea107a3a_5477e53b",
      "range": {
        "startLine": 43,
        "startChar": 56,
        "endLine": 45,
        "endChar": 8
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31077c5b_a99c85fd",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-08-18T15:11:49Z",
      "side": 1,
      "message": "Maybe the wording should be refined here: Signed-off-by: is not about authorship, it\u0027s a legal statement to assure that the patch complies with the DCO. Typically a S-o-b: is given by people who just \"carry\" the patch, for instance when taking over the \"burden\" of upstreaming, when the original author lost interest or is no longer available, or when the patch becomes part of a series.\nNot sure how to best word it, but something along the line of: \"If anyone else handles the commit, ...\"",
      "parentUuid": "d00999d3_793eee6c",
      "range": {
        "startLine": 43,
        "startChar": 56,
        "endLine": 45,
        "endChar": 8
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e54b0f5d_3fd3dcb1",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T15:54:37Z",
      "side": 1,
      "message": "I have used \"Original change by:\" in my commit message in the past to convey this",
      "parentUuid": "31077c5b_a99c85fd",
      "range": {
        "startLine": 43,
        "startChar": 56,
        "endLine": 45,
        "endChar": 8
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f86aeff3_2d88601f",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T12:33:21Z",
      "side": 1,
      "message": "Thanks for the information, Andre. Indeed, I\u0027ve read the DCO again [1] and I now realize that it\u0027s not necessarily about authorship, in particular in the situation of (c) in [1]. From there, I guess the sentence \"The names in the ``Signed-off-by:`` and ``Author:`` lines must match.\" is wrong and should be removed.\n\nI am tempted to make this paragraph shorter and just point people at the DCO. Something like:\n\n Ensure that each commit in the series has at least one ``Signed-off-by:`` line,\n using the individual\u0027s real name and email address. By adding this line the\n contributor certifies the contribution is made under the terms of the DCO.\n\n More details may be found in the `Gerrit Signed-off-by Lines guidelines`_.\n\nHow does that sound?\n\n[1] https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/dco.txt",
      "parentUuid": "e54b0f5d_3fd3dcb1",
      "range": {
        "startLine": 43,
        "startChar": 56,
        "endLine": 45,
        "endChar": 8
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84137fe8_6170eb44",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T15:05:20Z",
      "side": 1,
      "message": "\u003e From there, I guess the sentence \"The names in the ``Signed-off-by:`` and ``Author:`` lines must match.\" is wrong and should be removed.\n\nI think this should be reworded into:\n\n The names in the ``Signed-off-by:`` and ``Commit:`` lines must match.\n\nMy understanding is that the individual posting the patch on tf.org is the committer and has to add his sign-off to comply with the DCO.\n\nReworded that way in v2.",
      "parentUuid": "f86aeff3_2d88601f",
      "range": {
        "startLine": 43,
        "startChar": 56,
        "endLine": 45,
        "endChar": 8
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf904caf_5b6d7cf5",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T05:04:33Z",
      "side": 1,
      "message": "This is not feasible at all times. Internal bug references mean nothing when posted in the open.",
      "range": {
        "startLine": 71,
        "startChar": 6,
        "endLine": 71,
        "endChar": 51
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e83b4392_e40f16e0",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-18T08:51:32Z",
      "side": 1,
      "message": "This line was meant to refer to public bug reports on https://developer.trustedfirmware.org/project/board/1/. Notice the word \u0027issue\u0027 is a link to this page. If the bug is only tracked internally then I agree there is little value to add a reference to it, as people outside of your organization would not be able to see the details.",
      "parentUuid": "bf904caf_5b6d7cf5",
      "range": {
        "startLine": 71,
        "startChar": 6,
        "endLine": 71,
        "endChar": 51
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "505cf0ab_940fc0cd",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T15:54:37Z",
      "side": 1,
      "message": "Sounds good",
      "parentUuid": "e83b4392_e40f16e0",
      "range": {
        "startLine": 71,
        "startChar": 6,
        "endLine": 71,
        "endChar": 51
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ed08a3f_c60d220a",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T15:05:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "505cf0ab_940fc0cd",
      "range": {
        "startLine": 71,
        "startChar": 6,
        "endLine": 71,
        "endChar": 51
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbaa3efa_8e6be624",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T05:04:33Z",
      "side": 1,
      "message": "I would reword this: Ensure that each patch in a patch series compiles by itself. This allows \"git revert\" and \"git bisect\" to work.",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1da5b4a5_cb58753f",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-18T08:51:32Z",
      "side": 1,
      "message": "This wasn\u0027t the original intent of this sentence. I admit this has not been properly discussed on the TF-A mailing list (and I should probably start a thread about it) but we\u0027ve had discussions about this within Arm and we believe that in some cases it might be too much of a restriction to mandate that every patch in a patch series compiles. We think that it is more flexible and good enough to mandate that the code compiles at the patch series granularity.\n\nThis, in turn, requires maintainers to merge patch series atomically, as a single chunk, and refrain from merging part of it, at least in the cases where such build errors occur in the middle the patch stack.",
      "parentUuid": "bbaa3efa_8e6be624",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "355f87f9_89d984da",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-08-18T15:11:49Z",
      "side": 1,
      "message": "But that would mean that git bisect does not work, which is a very powerful tool.\nIs it really such a burden to demand that every patch at least compiles? In Linux this has always been required, and this was never really a problem, at least once you have wrapped your head around how to achieve this. There are actually several approaches to choose from (ranging from the cowardly \"add it to the build system with the last patch only\" to \"build up the sub-features one by one\").",
      "parentUuid": "1da5b4a5_cb58753f",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba08d53f_6a2af413",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T19:39:58Z",
      "side": 1,
      "message": "I agree. We should mandate that each patch compiles by itself. We cannot afford to break \"git bisect\" intentionally.",
      "parentUuid": "355f87f9_89d984da",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "630039c5_8501e88a",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2020-08-18T20:11:34Z",
      "side": 1,
      "message": "+1 to what Varun and André said. Every other project I\u0027ve ever worked on had a per-patch requirement (and the CI should also check them one at a time). In addition to breaking Git expectations, it\u0027s also just odd for reviewers to approve a patch when there\u0027s clearly an important part missing from it that is only added in a later patch. One of the main reasons for breaking changes up into smaller patches is that they can be reviewed one at a time, but that doesn\u0027t work if the patch isn\u0027t actually self-contained.\n\nI\u0027d be curious to hear about the concerns that were raised about this within Arm in detail. Maybe we can find other ways to resolve them?",
      "parentUuid": "ba08d53f_6a2af413",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8156184_ad0f69dc",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T12:33:21Z",
      "side": 1,
      "message": "Personally I would be fine with mandating that each patch must compile, this seems like a normal assumption to me and an easy one to satisfy. I don\u0027t think I\u0027ve ever faced a situation where I could not make a patch compile in a series.\n\nJulius, unfortunately I don\u0027t recall all the details but I believe there has been situations in the past were the contributor was struggling to get all patches in their series to compile. Rather than addressing the problem (by splitting the patches in another manner or using one of the techniques Andre mentioned, which would have required some more work when the patch series as a whole was already complete), we deemed that it was OK to assume that people would not cherry-pick individual patches in the series and would instead get the whole feature, as all patches were necessary to get a fully working solution anyway.\n\nClearly you guys disagree with this approach for different reasons (fair ones IMO!) so I am happy with revising that and mandate here that every patch must compile and enforce that more strictly in the CI.\n\nThis is where I can see that formalizing the implicit rules in this patch is a useful thing! It triggers interesting discussions.\n\nI\u0027ll wait for another couple of days, see if anyone has a different opinion on this. If I don\u0027t hear anything by Friday afternoon, I\u0027ll merge it (with the amendments we discussed).",
      "parentUuid": "630039c5_8501e88a",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b024c33b_c2e38467",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T15:05:20Z",
      "side": 1,
      "message": "Reworded.",
      "parentUuid": "f8156184_ad0f69dc",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "535f3108_a5d2a01f",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2020-08-20T20:21:05Z",
      "side": 1,
      "message": "\u003e we deemed that it was OK to assume that people would not cherry-pick individual patches in the series and would instead get the whole feature, as all patches were necessary to get a fully working solution anyway.\n\nI think those cases where someone develops a large new feature would probably be fine anyway, because usually you only turn on the feature in the last patch (by adding relevant files to a platform.mk file or setting a Makefile variable or something). So if the feature itself doesn\u0027t compile with only half the patches, that is fine as long as nothing is trying to compile it. I think the rule doesn\u0027t technically need to be that every file that is added can be compiled, it just needs to be that all currently supported configurations (i.e. those tested by the CI) can still build successfully after each patch. So adding an incomplete file that\u0027s not yet built by any of those configurations should be fine.",
      "parentUuid": "b024c33b_c2e38467",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f409485_e4b6b143",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-20T20:56:04Z",
      "side": 1,
      "message": "\u003e  it was OK to assume that people would not cherry-pick individual patches in the series and would instead get the whole feature, as all patches were necessary to get a fully working solution anyway\n\nI think this is an incorrect assumption. Maintainers have merged partial branches in the past. So it is the author\u0027s responsibility to double confirm that there wont be any issues due to this.",
      "parentUuid": "535f3108_a5d2a01f",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e23d7c51_08084790",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-21T08:21:03Z",
      "side": 1,
      "message": "@Julius: Yes, I agree with you, it is quite easy to use the technique you described. Unfortunately, I don\u0027t recall enough of the details to say whether this would have solved the contributor\u0027s problem at the time...\n\n@Varun: Agree, putting the burden on the maintainers to identify which patches are safe to merge together, i.e. finding the point in the stack where it starts to build fine, is not ideal and error-prone.\n\nI think the latest version of the patch addresses your concerns for this specific point, let me know if not.",
      "parentUuid": "5f409485_e4b6b143",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fd2c6f8_73e6b96d",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-25T04:20:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e23d7c51_08084790",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05a7a57a_410c8155",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T05:04:33Z",
      "side": 1,
      "message": "Isn\u0027t this implied? CI failures will reflect as -1.",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 118,
        "endChar": 42
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49d0f646_e9b0eb93",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-18T08:51:32Z",
      "side": 1,
      "message": "I felt it was worth making it explicit to encourage contributors to have a look at the issues picked up by the CI and fix them. Unfortunately, as you know, only Arm developers have access to most of the CI results right now and so we usually take a look at the results on behalf of other contributors and explicitly ask them to fix any such issue. But when the CI has fully transitioned to tf.org, we would like patch authors to take care of it by themselves, hence this sentence.\n\nI think it does not harm to say it explicitly. Also it documents the patch submission rules.",
      "parentUuid": "05a7a57a_410c8155",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 118,
        "endChar": 42
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dc43881_3d87780e",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-25T04:20:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "49d0f646_e9b0eb93",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 118,
        "endChar": 42
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61587533_add27f96",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-08-17T15:05:12Z",
      "side": 1,
      "message": "Hi Sandrine,\nI was wondering if you could add the following line. Please ignore if you feel its not relevant.\n- The author of the patch is discouraged from doing self review even though he/she might be the\nonly owner of the module. Try to find another contributor who is familiar with the functionality\nof the module.",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c60c77e7_0dd4639c",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T05:04:33Z",
      "side": 1,
      "message": "I disagree as this is not feasible at all times and restricts the code review for no reason. We need to provide flexibility where there is only one code owner.",
      "parentUuid": "61587533_add27f96",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17424b25_e84e32c0",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-18T08:51:32Z",
      "side": 1,
      "message": "@Varun: We\u0027re talking about falling back to adding \"vanilla\" reviewers that are *not* code owners in the event where another code owner cannot be found for a given patch. The idea being that it is better to get a second pair of eyes on any patch, even if these eyes are less familiar with the code than those of a code owner, than no peer review at all. I thought that\u0027s what we agreed on the mailing list and it seems feasible to me at all times.\n\nI would be inclined to follow Madhu\u0027s suggestion and add this line.",
      "parentUuid": "c60c77e7_0dd4639c",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c762aad0_aee5be53",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-08-18T15:11:49Z",
      "side": 1,
      "message": "A second pair of eyes on the code is definitely a must-have. So yeah, a non-code-owner is better as a reviewer than the author.",
      "parentUuid": "17424b25_e84e32c0",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "516391e5_67e4a909",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T15:54:37Z",
      "side": 1,
      "message": "@Andre @Sandrine, I am OK with having more reviewers. But this has not worked for me in the past. Tegra patches almost always lie on gerrit without any reviews.\n\nI think one of the objectives of this exercise should also be to alleviate the pain of the code submitters and get patches merged quickly. Adding more restrictions hurts that objective.\n\n@Sandrine I have concerns about \"Try to find another contributor who is familiar with the functionality of the module.\" from Madhu\u0027s comment. This needs to be re-worded\n\nAdditionally we should inform the community that \"vanilla\" reviews are OK. Usually people wont provide +1 if they cannot or dont review the entire patch. It is hard for a non-owner to review the patch completely at all times.",
      "parentUuid": "c762aad0_aee5be53",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "934a795f_fdaf01d6",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T12:33:21Z",
      "side": 1,
      "message": "\u003e @Andre @Sandrine, I am OK with having more reviewers. But this has not worked for me in the past. Tegra patches almost always lie on gerrit without any reviews.\n\nIs that even when you explicitly assign the review to specific people? If yes, perhaps you happen to choose the same ones too often, which overloads them too much and they can\u0027t cope with all the reviews? Also, how long do you wait before considering that the patch is lying without any reviews? Review timelines/delays is something we haven\u0027t discussed yet so different people might have a different frame of reference for this.\n\nI am just trying to identify the reasons why we end up in this situation. I would really like to mandate that each and every patch gets reviewed by someone else, this seems very important to me.\n\n\u003e I think one of the objectives of this exercise should also be to alleviate the pain of the code submitters and get patches merged quickly. Adding more restrictions hurts that objective.\n\nAgree that we should work towards getting patches merged quickly, but not at the expense of quality. Peer review is a must for reaching a minimum quality level IMO.\n\n\u003e @Sandrine I have concerns about \"Try to find another contributor who is familiar with the functionality of the module.\" from Madhu\u0027s comment. This needs to be re-worded\n\nHow do you propose to reword it?\n\n\u003e Additionally we should inform the community that \"vanilla\" reviews are OK. Usually people wont provide +1 if they cannot or dont review the entire patch. It is hard for a non-owner to review the patch completely at all times.\n\nI think we\u0027ve discussed that on the mailing list already (see [1]). Maybe I misunderstood Julius\u0027 point. This patch is an attempt at formalizing what\u0027s been discussed there and in my mind serves to inform the community.\n\n[1] https://lists.trustedfirmware.org/pipermail/tf-a/2020-July/000605.html",
      "parentUuid": "516391e5_67e4a909",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d425dbd3_dadf15cd",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T15:05:20Z",
      "side": 1,
      "message": "For now, I\u0027ve got 3 votes (Madhu, Andre and myself) in favour of prohibiting self-review against 1 vote (Varun) to allow it. Therefore, I went ahead and made the changes. We can always revert it if more people express concerns and that the general consensus is to allow self-review.",
      "parentUuid": "934a795f_fdaf01d6",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bac88cad_f9b62dc2",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-20T20:56:04Z",
      "side": 1,
      "message": "\u003e Is that even when you explicitly assign the review to specific people?\n\nYes. Usually I have waited from a couple of weeks to a month before seeing a response.\n\n\u003e perhaps you happen to choose the same ones too often, which overloads them too much and they can\u0027t cope with all the reviews?\n\nIn that case, I would say the process is broken. There is no good way to find the best reviewer as of today.\n\n\u003e Review timelines/delays is something we haven\u0027t discussed yet so different people might have a different frame of reference for this\n\nThis is very important to me and I have been facing long latencies right from day 1 of the project. I would like this to be addressed soon.\n\n\u003e I would really like to mandate that each and every patch gets reviewed by someone else, this seems very important to me.\n\nI agree. But we need to find a solution that works for everyone, not just a select few.\n\n\u003e @Sandrine I have concerns about \"Try to find another contributor who is familiar with the functionality of the module.\" from Madhu\u0027s comment. This needs to be re-worded\n\u003e How do you propose to reword it?\n\n\"The first step should always be to find another reviewer who is familiar with the module, but if there doesn\u0027t exist one, then send an email to the mailing list asking for someone to review\"\n\n\u003e For now, I\u0027ve got 3 votes (Madhu, Andre and myself) in favour of prohibiting self-review against 1 vote (Varun) to allow it. Therefore, I went ahead and made the changes\n\nI think you are mis-stating my position. I have already stated that self-reviews are not OK. But, the current process is not equipped to handle scenarios where there ain\u0027t any reviewers, other than the code  owner, for a given module. Your guidelines fail to address this scenario.",
      "parentUuid": "d425dbd3_dadf15cd",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb495eb3_2695e6db",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-21T08:21:03Z",
      "side": 1,
      "message": "\u003e \u003e Review timelines/delays is something we haven\u0027t discussed yet so different people might have a different frame of reference for this\n\u003e \n\u003e This is very important to me and I have been facing long latencies right from day 1 of the project. I would like this to be addressed soon.\n\nIt is very important, I agree. Would you mind starting a discussion around this on the mailing list and amend the process documentation based on the outcome? Proposals for process changes don\u0027t have to come all from Arm ;)\n\n\u003e \u003e I would really like to mandate that each and every patch gets reviewed by someone else, this seems very important to me.\n\u003e \n\u003e I agree. But we need to find a solution that works for everyone, not just a select few.\n\nSure. That is the very purpose of these proposals and discussions!\n\n\u003e \u003e @Sandrine I have concerns about \"Try to find another contributor who is familiar with the functionality of the module.\" from Madhu\u0027s comment. This needs to be re-worded\n\u003e \u003e How do you propose to reword it?\n\u003e \n\u003e \"The first step should always be to find another reviewer who is familiar with the module, but if there doesn\u0027t exist one, then send an email to the mailing list asking for someone to review\"\n\nI now realize I originally misunderstood your point here. I previously thought you were suggesting that we would merge some patches without any peer review, in the absence of suitable reviewers. Your sentence above sounds reasonable to me! Actually, I\u0027ve already added a paragraph about requesting reviews on the mailing list in v2. Does that address your concerns?\n\n\u003e \u003e For now, I\u0027ve got 3 votes (Madhu, Andre and myself) in favour of prohibiting self-review against 1 vote (Varun) to allow it. Therefore, I went ahead and made the changes\n\u003e \n\u003e I think you are mis-stating my position. I have already stated that self-reviews are not OK. But, the current process is not equipped to handle scenarios where there ain\u0027t any reviewers, other than the code  owner, for a given module. Your guidelines fail to address this scenario.\n\nYes indeed, I was mis-stating your position, thanks for clarifying. Sounds like we are on the same page on the general review process but you\u0027re just worried about the difficulty to identify suitable reviewers in the case where it\u0027s not obvious (i.e. when there is a designated code owner). Is that fair to say?\n\nWith the additional paragraph about the mailing list at line 140 in v3 of the patch, do the guidelines now address this scenario in your view?",
      "parentUuid": "bac88cad_f9b62dc2",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a824e484_c46ae368",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-25T04:20:50Z",
      "side": 1,
      "message": "\u003e With the additional paragraph about the mailing list at line 140 in v3 of the patch, do the guidelines now address this scenario in your view?\n\nIt sounds good on paper. The proof is in the pudding though! Let\u0027s implement them and see if they deliver.\n\n\u003e Sure. That is the very purpose of these proposals and discussions!\n\nI meant to say these guidelines do not solve the problems I face regularly.",
      "parentUuid": "bb495eb3_2695e6db",
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80e7b5eb_3109f3fa",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T05:04:33Z",
      "side": 1,
      "message": "What if there is a single code owner? Are we mandating that there should be multiple code owners? That is over reach IMO.",
      "range": {
        "startLine": 134,
        "startChar": 7,
        "endLine": 136,
        "endChar": 79
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9183843_7dd2f890",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-18T08:51:32Z",
      "side": 1,
      "message": "No, we\u0027re not mandating that there should be multiple code owners. What this is trying to say is, in the event where there is no code owner at all for a module, the patch still has to be reviewed by someone so let\u0027s choose some reviewer (preferably someone that had some exposure to the code, hence the `git blame` story) to take a look at it.\n\nThe same process would apply if there is a single code owner for a module and the patch to review has been posted by this very same code owner, in this case we\u0027re proposing that a non-code owner reviewer is chosen.",
      "parentUuid": "80e7b5eb_3109f3fa",
      "range": {
        "startLine": 134,
        "startChar": 7,
        "endLine": 136,
        "endChar": 79
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b8aec57_3026a5c8",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T15:54:37Z",
      "side": 1,
      "message": "The process to choose a reviewer in such cases is unclear. Asking on the mailing list has worked for me in the past. We should add that option to the doc IMO.",
      "parentUuid": "e9183843_7dd2f890",
      "range": {
        "startLine": 134,
        "startChar": 7,
        "endLine": 136,
        "endChar": 79
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0c05d48_874f97f7",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T12:33:21Z",
      "side": 1,
      "message": "Yes I agree, it is not fully defined. `git blame` is the best I can think of but it won\u0027t necessarily work in all cases.\n\nI am OK with adding the option to ask on the mailing list. I\u0027ll add that in the v2.",
      "parentUuid": "4b8aec57_3026a5c8",
      "range": {
        "startLine": 134,
        "startChar": 7,
        "endLine": 136,
        "endChar": 79
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0604ff63_6defad43",
        "filename": "docs/process/contributing.rst",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-19T15:05:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0c05d48_874f97f7",
      "range": {
        "startLine": 134,
        "startChar": 7,
        "endLine": 136,
        "endChar": 79
      },
      "revId": "66cb70440ce0adb68dfb7bc6a12f8ae069c2c392",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}