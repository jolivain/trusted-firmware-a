{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6adab9eb_fd1561a3",
        "filename": "plat/common/aarch64/plat_common.c",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-30T19:50:50Z",
      "side": 1,
      "message": "Just trying to understand,\n\nwill \u0027el\u0027 ever evaluate to el1 or el0 from the context of current execution? or the el is read from different context?",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 82,
        "endChar": 16
      },
      "revId": "25b124d031f26eeb5f36864bd66b66786afd89a5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e6e4d81_63f1faf4",
        "filename": "plat/common/aarch64/plat_common.c",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2024-01-30T20:06:46Z",
      "side": 1,
      "message": "The function name \"get_el_str\" is a generic function name so this function body seemed incomplete and hence as part of fixing the misra defect, this change also has been made as per comments from Manish in the ticket.",
      "parentUuid": "6adab9eb_fd1561a3",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 82,
        "endChar": 16
      },
      "revId": "25b124d031f26eeb5f36864bd66b66786afd89a5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78396f6c_8b82c083",
        "filename": "plat/common/aarch64/plat_common.c",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-31T15:20:12Z",
      "side": 1,
      "message": "To add on to what Arvind mentioned, get_el_str() can be called with SPSR value which can be any EL",
      "parentUuid": "7e6e4d81_63f1faf4",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 82,
        "endChar": 16
      },
      "revId": "25b124d031f26eeb5f36864bd66b66786afd89a5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae11a3c6_91dab68a",
        "filename": "plat/common/aarch64/plat_common.c",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2024-02-01T17:54:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "78396f6c_8b82c083",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 82,
        "endChar": 16
      },
      "revId": "25b124d031f26eeb5f36864bd66b66786afd89a5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecc28269_be5637d0",
        "filename": "plat/common/aarch64/plat_common.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-01-30T20:08:44Z",
      "side": 1,
      "message": "Execution can never reach here. Can you place an assert(false) before return?",
      "revId": "25b124d031f26eeb5f36864bd66b66786afd89a5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dddfa4aa_7eb441a6",
        "filename": "plat/common/aarch64/plat_common.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000803
      },
      "writtenOn": "2024-01-30T20:42:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecc28269_be5637d0",
      "revId": "25b124d031f26eeb5f36864bd66b66786afd89a5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}