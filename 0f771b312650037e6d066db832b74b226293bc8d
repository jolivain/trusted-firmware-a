{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cd4951d4_421b3ec5",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 164,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "just to confirm: is there any config where secure world can have EA bit set?",
      "range": {
        "startLine": 164,
        "startChar": 65,
        "endLine": 164,
        "endChar": 79
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "952868fc_cae3a91e",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 164,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "I am not aware of any such configuration and the plan for SPM/hafnium is to handle SErrors itself. I will capture this in documentation patch. Thanks for pointing out.",
      "parentUuid": "cd4951d4_421b3ec5",
      "range": {
        "startLine": 164,
        "startChar": 65,
        "endLine": 164,
        "endChar": 79
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f81f955_b920e6ca",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 192,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "is this \"will\" or \"can\"? It looks liek \"will\" because you enter this path after you saw EA bit to be set?\nImmediately after this msr instruction, is it expected that the SError will trigger at SP_ELx?\nIs that architecturally guaranteed to trigger? or is there a chance some implementations can delay SError vectoring?\n\nDo we need a barrier to ensure strs above are completed before the msr instruction? or is there implicit ordering when there is an msr to daifclr? what ensures msr completes after str to NESTED_EA_FLAG?",
      "range": {
        "startLine": 192,
        "startChar": 47,
        "endLine": 192,
        "endChar": 52
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f564e005_c92a7319",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 192,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "\u003e is it expected that the SError will trigger at SP_ELx?\nYes\n\u003e Is that architecturally guaranteed to trigger?\nI think so but don\u0027t know where it is documented.\n\nInserted ISB",
      "parentUuid": "4f81f955_b920e6ca",
      "range": {
        "startLine": 192,
        "startChar": 47,
        "endLine": 192,
        "endChar": 52
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "251c702c_219b900f",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 192,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T17:47:33Z",
      "side": 1,
      "message": "i\u0027m not sure isb is sufficient, we need to confirm. ISB only esnures context-changing operations before are visible to context change operations after the isb. strs are not context changing operations and i dont know if the arm arch allows reordering of stores with isb beacuse it is not context changing. Also ISB says all instructions in program order after ISB are refetched, but it doesnt seem to provide any guarantee on ISB ordering w.r.t to non-context-changing operations. So in theory, the store to memory could still be ordered after the isb and msr since the ARM ARM doesnt say that instrucitons BEFORE the ISB will definitely be fetched before the ISB...",
      "parentUuid": "f564e005_c92a7319",
      "range": {
        "startLine": 192,
        "startChar": 47,
        "endLine": 192,
        "endChar": 52
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "591f99e3_811141b8",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 192,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T17:50:27Z",
      "side": 1,
      "message": "I also think it is critical to be certain that the SError fires before the store on line 197. Otherwise CTX_NESTED_EA_FLAG could be cleared before the nested serror starts executing.",
      "parentUuid": "251c702c_219b900f",
      "range": {
        "startLine": 192,
        "startChar": 47,
        "endLine": 192,
        "endChar": 52
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "658e8b82_3eb0401f",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 210,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-09-25T21:57:55Z",
      "side": 1,
      "message": "nitpick: could you rephrase for better clarity:\n\nIf the original exception was either a sync exception or irq or fiq, return to appropriate exception vector. Else, if the original exception corresponds to SError from lower El, simply eret back to lower EL since it has handled as soon as the PSTATE.A bit was cleared earlier in this macro.",
      "range": {
        "startLine": 207,
        "startChar": 1,
        "endLine": 210,
        "endChar": 4
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2ad718f_ed4173ea",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 210,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "can this even happen? i tried to chart out the call path and i dont see an exception from lower EL3 returning to here since serror_elx does ERET if from lower exception level?\nif nested, it goes into plat_el3_ea_handler right?",
      "parentUuid": "658e8b82_3eb0401f",
      "range": {
        "startLine": 207,
        "startChar": 1,
        "endLine": 210,
        "endChar": 4
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d2fb9ef_611c92a5",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 210,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:50:01Z",
      "side": 1,
      "message": "the path i charted out :\nsync_exception_aarch64\nsync_and_handle_pending_serror\nhandle_pending_async_ea\nserror_sp_elx\nhandle_lower_el_async_ea\neret\n\ni think your expecation is that ERET returns back to EL3 right? (think it should since SError was taken in EL3 at SPELx..",
      "parentUuid": "a2ad718f_ed4173ea",
      "range": {
        "startLine": 207,
        "startChar": 1,
        "endLine": 210,
        "endChar": 4
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e8bd600_deca4c14",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 210,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "The flow is pretty much what you mentioned, the only difference being towards the end \nsync_exception_aarch64\nsync_and_handle_pending_serror\nhandle_pending_async_ea\nserror_sp_elx\nhandle_lower_el_async_ea (platform is expected to handle all SErrors at once)\nSo return depends on whether the original exception was SError from lower EL or other exception\nIf original exception was lower EL SError exception : eret to lower EL\nFor any other exception it should go back to sync_and_handle_pending_serror line #69 and then to original vector entry to continue with original exception.\n\nJust for clarification, SError from lower EL exceptions are slightly diff from others \n\nvector_entry serror_aarch64\n\tsave_x30\n\tapply_at_speculative_wa\n\tsanitize_ea_routed_to_el3\n\tsync_and_handle_pending_serror\n\tunmask_async_ea\n\tb\thandle_lower_el_async_ea ###This meant to be called in case there was no pending error otherwise we never reach here.",
      "parentUuid": "4d2fb9ef_611c92a5",
      "range": {
        "startLine": 207,
        "startChar": 1,
        "endLine": 210,
        "endChar": 4
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83884d30_6f8931b1",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 210,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T19:47:53Z",
      "side": 1,
      "message": "makes sense. thanks.",
      "parentUuid": "6e8bd600_deca4c14",
      "range": {
        "startLine": 207,
        "startChar": 1,
        "endLine": 210,
        "endChar": 4
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95948888_d15536b9",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 243,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-09-25T21:57:55Z",
      "side": 1,
      "message": "nitpick: please rephrase.\n\nIn case of back and forth between lower EL and EL3, we can track the loop count in \"CTX_NESTED_EA_FLAG\" and leverage previous ELR in \"CTX_SAVED_EL3_EL3\" to detect this vicious cycle and further panic to indicate a problem here (Label \"check_loop_ctr\").",
      "range": {
        "startLine": 240,
        "startChar": 52,
        "endLine": 243,
        "endChar": 29
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b997dd2_ce3d46a5",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 243,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "sorry do you mean CTX_SAVED_ELR_EL3? What does CTX_SAVED_EL3_EL3 mean?",
      "parentUuid": "95948888_d15536b9",
      "range": {
        "startLine": 240,
        "startChar": 52,
        "endLine": 243,
        "endChar": 29
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c536e3d2_9262b701",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 243,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b997dd2_ce3d46a5",
      "range": {
        "startLine": 240,
        "startChar": 52,
        "endLine": 243,
        "endChar": 29
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d5833d7_389a1a52",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 269,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "nit: vector",
      "range": {
        "startLine": 269,
        "startChar": 19,
        "endLine": 269,
        "endChar": 26
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9e338c2_506d20ac",
        "filename": "bl31/aarch64/ea_delegate.S",
        "patchSetId": 48
      },
      "lineNbr": 269,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d5833d7_389a1a52",
      "range": {
        "startLine": 269,
        "startChar": 19,
        "endLine": 269,
        "endChar": 26
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60d5b899_a77c12ba",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 61,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "is this required if we have IESB enabled? Asking to see if we can avoid the barriers in certain cases.",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 61,
        "endChar": 4
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58029bfb_71c4e678",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 61,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "If you look at next patch, i have removed this for IESB enabled https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/21685/22/include/arch/aarch64/asm_macros.S#308",
      "parentUuid": "60d5b899_a77c12ba",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 61,
        "endChar": 4
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd6a54aa_edb5893c",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 61,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T17:52:59Z",
      "side": 1,
      "message": "thanks. saw it after i wrote the comment :)",
      "parentUuid": "58029bfb_71c4e678",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 61,
        "endChar": 4
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fb72d6b_4763b94b",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 70,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "nit: an #else would be good from a readability point of view...so we can skip/follow only one path that you are interested in when reading.",
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dc7fe03_c926f34d",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 70,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "Let me try to explain you the reason why we can\u0027t use #else here\n\n#if \n /* this part covers NS world FFH */\n It covers cases when this macro is enabled (outgoing world can be Secure/Realm as well)\n the scr_el3.ea will distinguish weather coming from NS or S/Realm world\n#endif\n /* This part of code is applicable to NS KFH or outgoing world is Secure/Realm",
      "parentUuid": "9fb72d6b_4763b94b",
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccba1bf4_862cf707",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 70,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T17:52:59Z",
      "side": 1,
      "message": "heh yes:) missed the b.eq 1f.",
      "parentUuid": "1dc7fe03_c926f34d",
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ecfab6_9009d961",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 87,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "is this really required? if this happens this is a hardware bug right? could we save some instructions in critical/hot paths if this is only in debug mode?",
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7dc2fd85_6d4633dc",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 87,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "Done\n\nI also had the same feeling, i introduced this macro for some previous version of patch. I think its better to get rid of this.",
      "parentUuid": "67ecfab6_9009d961",
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c02498c_7f81ed4c",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 87,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T17:52:59Z",
      "side": 1,
      "message": "thx.",
      "parentUuid": "7dc2fd85_6d4633dc",
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19bfcec8_65b340ba",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 205,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T02:44:23Z",
      "side": 1,
      "message": "we can end up in infinite loop here right? we unmask EA on SP_EL3, take an abort, and then take another abort when executing instructions in this handler? \nIs it worth noting that it is a possiblity and we cant do much\u003e?",
      "range": {
        "startLine": 204,
        "startChar": 33,
        "endLine": 205,
        "endChar": 42
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2efe7c9e_8e0bd204",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 205,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "I agree that there is a rarest possibility of this happening but We have entered this path through synchronising errors and the only memory access we are doing is of SRAM which has slightest of chance for an SError(if this happens, the system is anyways unreliable). To avoid making this comment more complicated, i prefer not to put any more comments here.\nLet me know if you strongly feel otherwise.",
      "parentUuid": "19bfcec8_65b340ba",
      "range": {
        "startLine": 204,
        "startChar": 33,
        "endLine": 205,
        "endChar": 42
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73a4a59e_ae9e8155",
        "filename": "bl31/aarch64/runtime_exceptions.S",
        "patchSetId": 48
      },
      "lineNbr": 205,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-09-26T17:54:34Z",
      "side": 1,
      "message": "agree, Thanks Manish.",
      "parentUuid": "2efe7c9e_8e0bd204",
      "range": {
        "startLine": 204,
        "startChar": 33,
        "endLine": 205,
        "endChar": 42
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1818ad75_94bab29b",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 48
      },
      "lineNbr": 67,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-09-25T21:57:55Z",
      "side": 1,
      "message": "depending whether it is FFH or KFH, this flag serves different purposes. I believe we should also use appropriate name to reflect that fact.",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 26
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fc64b63_94c75c18",
        "filename": "include/lib/el3_runtime/aarch64/context.h",
        "patchSetId": 48
      },
      "lineNbr": 67,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-09-26T15:51:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1818ad75_94bab29b",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 26
      },
      "revId": "0f771b312650037e6d066db832b74b226293bc8d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}