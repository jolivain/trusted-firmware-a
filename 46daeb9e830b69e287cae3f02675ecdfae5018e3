{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4c6f2bb4_d8e76193",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-02-27T16:42:46Z",
      "side": 1,
      "message": "Seems like we need not support -O0 build.\n\nBut for the FVP , if MPAM is present, shouldn\u0027t MPAM be programmed correctly to protect Secure world (in which case MPAM should also default to CHECK for FVP)? Also I dont find mpam_enable() being called in Secure world init path. \n\nSo if mpam is disabled for Secure world, should it be saved and restored ?\n\nI may be missing something for MPAM wrt to Secure world.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 25,
        "endChar": 0
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cbfaf08_d09ee038",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-02-27T16:51:22Z",
      "side": 1,
      "message": "Tagging Rohit for ACK",
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b4c1320_98f12956",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-02-27T17:55:56Z",
      "side": 1,
      "message": "Rohit, many thanks for the thorough review, and for catching the bugs! All fixed.",
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02b6e19f_bd93924e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000774
      },
      "writtenOn": "2023-02-28T11:30:58Z",
      "side": 1,
      "message": "Sure, No problem :)",
      "parentUuid": "1b4c1320_98f12956",
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0cc36ac_a010f943",
        "filename": "include/lib/extensions/mpam.h",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-02-27T16:35:55Z",
      "side": 1,
      "message": "This may not be needed now.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faa3469f_191db2fb",
        "filename": "include/lib/extensions/mpam.h",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-02-27T16:43:39Z",
      "side": 1,
      "message": "Unfortunately it is. I re-added that because some non-optimising build job (with ENABLE_MPAM_FOR_LOWER_ELS\u003d0) keeps the mpam_enable() symbol in the object file:\nhttps://ci.trustedfirmware.org/job/tf-a-builder/1740976/console\nThis is admittedly true for the other features as well, but breaks CI only here because that\u0027s one of the few features we keep at \u003d0 for the FVP build.\nI would really like to see any unoptimised builds to go away, really, but this might be a longer discussion.",
      "parentUuid": "c0cc36ac_a010f943",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3af6ae2_b0a701f9",
        "filename": "include/lib/extensions/mpam.h",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-02-28T11:48:04Z",
      "side": 1,
      "message": "OK I see. Is there any reason why MPAM is dynamically for FVP ? Is it because MPAM cannot be enabled for AEM FVPs ?",
      "parentUuid": "faa3469f_191db2fb",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a541423c_d3ffc2f8",
        "filename": "include/lib/extensions/mpam.h",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-02-28T12:18:13Z",
      "side": 1,
      "message": "The FVPs supports MPAM, but the implementation is very minimal, also the functionality cannot really be verified, partly because the FVP does not model things like cache or memory bandwidth.\nIn general MPAM is a feature that relies heavily on system integration (having MSCs that implement it), so I would expect it to be turned on explicitly by certain platforms only.\nIf we enable it for the FVP, it would be for the sake of the CI only, which tells me we should do it in CI scripts instead of platform.mk. Also we should come up with some tests that verify at least some basic functionality (like register accessibility, save/restore functionality).",
      "parentUuid": "d3af6ae2_b0a701f9",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49ace014_a58d86d3",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 7
      },
      "lineNbr": 844,
      "author": {
        "id": 1000774
      },
      "writtenOn": "2023-02-27T17:30:05Z",
      "side": 1,
      "message": "Hi Andre, MPAMHCR_EL2, MPAMVPMV_EL2 and MPMVPM0_EL2 would only be present if MPAMIDR_HAS_HCR is 1.",
      "range": {
        "startLine": 844,
        "startChar": 51,
        "endLine": 844,
        "endChar": 57
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a183811_9d038240",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 7
      },
      "lineNbr": 844,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-02-27T17:55:56Z",
      "side": 1,
      "message": "OK, yes, but that applies to all the other registers as well, and we bail out above if this bit is 0. I will reword the comment to avoid confusion.",
      "parentUuid": "49ace014_a58d86d3",
      "range": {
        "startLine": 844,
        "startChar": 51,
        "endLine": 844,
        "endChar": 57
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ce37a6f_31530972",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 7
      },
      "lineNbr": 894,
      "author": {
        "id": 1000774
      },
      "writtenOn": "2023-02-27T17:30:05Z",
      "side": 1,
      "message": "This should be vpm7*",
      "range": {
        "startLine": 894,
        "startChar": 2,
        "endLine": 894,
        "endChar": 20
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ed8ec8c_efdf1435",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 7
      },
      "lineNbr": 894,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-02-27T17:55:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ce37a6f_31530972",
      "range": {
        "startLine": 894,
        "startChar": 2,
        "endLine": 894,
        "endChar": 20
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d227363_043370d1",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 7
      },
      "lineNbr": 912,
      "author": {
        "id": 1000774
      },
      "writtenOn": "2023-02-27T17:30:05Z",
      "side": 1,
      "message": "This should be vpm1*",
      "range": {
        "startLine": 912,
        "startChar": 2,
        "endLine": 912,
        "endChar": 20
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "120a6a54_d153574e",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 7
      },
      "lineNbr": 912,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-02-27T17:55:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d227363_043370d1",
      "range": {
        "startLine": 912,
        "startChar": 2,
        "endLine": 912,
        "endChar": 20
      },
      "revId": "46daeb9e830b69e287cae3f02675ecdfae5018e3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}