{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2b4b3865_17f4279a",
        "filename": "plat/arm/common/arm_io_storage.c",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-15T13:06:04Z",
      "side": 1,
      "message": "Consider making this array constant? Right now, it\u0027s a mutable array of constant strings.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "37317666583a877158992ee9523eebec6fc5c2c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f293990_d06c7f10",
        "filename": "plat/arm/common/arm_io_storage.c",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-15T13:44:03Z",
      "side": 1,
      "message": "Ah okay, yes that make sense! \u0027static const char * const fip_part_names[]\u0027",
      "parentUuid": "2b4b3865_17f4279a",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "37317666583a877158992ee9523eebec6fc5c2c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5650faca_da382eb9",
        "filename": "plat/arm/common/arm_io_storage.c",
        "patchSetId": 5
      },
      "lineNbr": 202,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-15T13:06:04Z",
      "side": 1,
      "message": "Add an assertion checking that active_fw_idx does not cause an out-of-bounds access?",
      "range": {
        "startLine": 202,
        "startChar": 22,
        "endLine": 202,
        "endChar": 35
      },
      "revId": "37317666583a877158992ee9523eebec6fc5c2c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fe63bff_c09c2c94",
        "filename": "plat/arm/common/arm_io_storage.c",
        "patchSetId": 5
      },
      "lineNbr": 202,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-15T13:44:03Z",
      "side": 1,
      "message": "\u0027arm_get_fw_bank_active_idx\u0027 function always returns value less than NR_OF_FW_BANK.\nAlso, array size of fip_part_names always NR_OF_FW_BANK with CASSERT check in place at line no.31.\n\nWith all this, I don\u0027t see we need one more assert check here.",
      "parentUuid": "5650faca_da382eb9",
      "range": {
        "startLine": 202,
        "startChar": 22,
        "endLine": 202,
        "endChar": 35
      },
      "revId": "37317666583a877158992ee9523eebec6fc5c2c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f7cd069_900acd6b",
        "filename": "plat/arm/common/arm_io_storage.c",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2021-06-15T13:06:04Z",
      "side": 1,
      "message": "Could you please help me understand under which circumstances we might end up in this error case? Would that be a result of a malformed GPT image? Any other reason?\n\nI am trying to assess whether panic() is the right thing to do here. When we\u0027ll support the recovery mode, I guess we might try that here instead? Should we call plat_error_handler() instead? According to [1], panic() is for unexpected errors whereas plat_error_handler() is for expected errors. I think this one here might qualify as an expected error. We must be prepared for invalid GPT images because it gets updated by another software agent external to TF-A. But I am not sure, the difference between expected and unexpected irrecoverable is subtle and I find it hard to grasp. What do you think?\n\n[1] https://trustedfirmware-a.readthedocs.io/en/latest/process/coding-guidelines.html#handling-unrecoverable-errors",
      "range": {
        "startLine": 204,
        "startChar": 2,
        "endLine": 204,
        "endChar": 10
      },
      "revId": "37317666583a877158992ee9523eebec6fc5c2c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87690e68_b843c1ae",
        "filename": "plat/arm/common/arm_io_storage.c",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-06-15T13:44:03Z",
      "side": 1,
      "message": "\u003e Could you please help me understand under which circumstances we might end up in this error case? Would that be a result of a malformed GPT image? Any other reason?\n\nThis error can be possible if \u0027fip\u0027 partition information is mission in the GPT image. Yes, you can say then it is malformed GPT. This is the only reason.\n\n\u003e \n\u003e I am trying to assess whether panic() is the right thing to do here. When we\u0027ll support the recovery mode, I guess we might try that here instead? Should we call plat_error_handler() instead? According to [1], panic() is for unexpected errors whereas plat_error_handler() is for expected errors. I think this one here might qualify as an expected error. We must be prepared for invalid GPT images because it gets updated by another software agent external to TF-A. But I am not sure, the difference between expected and unexpected irrecoverable is subtle and I find it hard to grasp. What do you think?\n\nI added \u0027panic()\u0027, but as I mentioned in the previous comments this should get changed to \u0027plat_error_handler\u0027 instead once we have recovery mechanism in place.\nCurrently, the code support recovery of standalone FIP image, but not GPT image.\n\n\u003e \n\u003e [1] https://trustedfirmware-a.readthedocs.io/en/latest/process/coding-guidelines.html#handling-unrecoverable-errors",
      "parentUuid": "7f7cd069_900acd6b",
      "range": {
        "startLine": 204,
        "startChar": 2,
        "endLine": 204,
        "endChar": 10
      },
      "revId": "37317666583a877158992ee9523eebec6fc5c2c3",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}