{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "644d3b4c_ea142275",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-21T16:08:00Z",
      "side": 1,
      "message": "can this not overflow?\nThis is a static function, so again we can ensure things are sane by using asserts.",
      "range": {
        "startLine": 204,
        "startChar": 20,
        "endLine": 204,
        "endChar": 25
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b3eaf90_e4b365fb",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-25T04:02:29Z",
      "side": 1,
      "message": "These two are equivalent if -fno-strict-aliasing and -fno-strict-overflow are used.  Otherwise the new version has defined behavior in strictly more situations.",
      "parentUuid": "644d3b4c_ea142275",
      "range": {
        "startLine": 204,
        "startChar": 20,
        "endLine": 204,
        "endChar": 25
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2fa03c3_d42b50b4",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-25T14:00:32Z",
      "side": 1,
      "message": "not sure i follow. Which two are equivalent? and which new version?\nCan you explain your comment another way? i\u0027m not drawing the line between the two compiler options and what i\u0027m asking for.",
      "parentUuid": "4b3eaf90_e4b365fb",
      "range": {
        "startLine": 204,
        "startChar": 20,
        "endLine": 204,
        "endChar": 25
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bdf89ae_3904a8a3",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-27T19:03:39Z",
      "side": 1,
      "message": "If my understanding of the C standard is correct, ‘(uint8_t *)\u0026desc-\u003eemad’ gives a pointer that can only validly be used for accessing `emad`, while ‘(uint8_t *)desc + offsetof(struct ffa_mtd_v1_0, emad’ gives a pointer that can be used for accessing all of ‘desc‘.  -fno-strict-aliasing and -fno-strict-overflow tell the compiler to not assume that one will not perform out-of-bounds pointer arithmetic.",
      "parentUuid": "c2fa03c3_d42b50b4",
      "range": {
        "startLine": 204,
        "startChar": 20,
        "endLine": 204,
        "endChar": 25
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75fe49d9_fd80d114",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-28T16:05:26Z",
      "side": 1,
      "message": "okay that i understand. but do you assume that desc cannot be at the edge of the address range and then rollover? If yes, why? \nIf not, why not assert?",
      "parentUuid": "2bdf89ae_3904a8a3",
      "range": {
        "startLine": 204,
        "startChar": 20,
        "endLine": 204,
        "endChar": 25
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88f53ab4_fbcf74a5",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-03-07T02:40:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "75fe49d9_fd80d114",
      "range": {
        "startLine": 204,
        "startChar": 20,
        "endLine": 204,
        "endChar": 25
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a00b96ec_4e19b341",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-21T16:08:00Z",
      "side": 1,
      "message": "Assert. Static function so is a programming error. Callers can enforce this elsewhere.",
      "range": {
        "startLine": 209,
        "startChar": 3,
        "endLine": 209,
        "endChar": 8
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "304bb49f_8f5bedc7",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-25T04:02:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a00b96ec_4e19b341",
      "range": {
        "startLine": 209,
        "startChar": 3,
        "endLine": 209,
        "endChar": 8
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b1be937_4a875714",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-21T16:08:00Z",
      "side": 1,
      "message": "overflows possible so good to have asserts.",
      "range": {
        "startLine": 214,
        "startChar": 9,
        "endLine": 215,
        "endChar": 1
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bff645bc_706e5958",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-25T04:02:29Z",
      "side": 1,
      "message": "Asserts will be added later.",
      "parentUuid": "1b1be937_4a875714",
      "range": {
        "startLine": 214,
        "startChar": 9,
        "endLine": 215,
        "endChar": 1
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6de24ba3_c4d9ec51",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-25T14:00:32Z",
      "side": 1,
      "message": "have they been added? if yes, can you point to those reviews?",
      "parentUuid": "bff645bc_706e5958",
      "range": {
        "startLine": 214,
        "startChar": 9,
        "endLine": 215,
        "endChar": 1
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fb1d313_1794e449",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-02-27T19:03:54Z",
      "side": 1,
      "message": "Not yet, but the asserts were not there to begin with, so this does not make the situation any worse.",
      "parentUuid": "6de24ba3_c4d9ec51",
      "range": {
        "startLine": 214,
        "startChar": 9,
        "endLine": 215,
        "endChar": 1
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25c89f28_bdf3c89f",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-02-28T16:05:26Z",
      "side": 1,
      "message": "yes, but given that you are adding asserts and making modifications in relevant code, would it be possible to add?",
      "parentUuid": "8fb1d313_1794e449",
      "range": {
        "startLine": 214,
        "startChar": 9,
        "endLine": 215,
        "endChar": 1
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff23f61e_4075fb2a",
        "filename": "services/std_svc/spm/el3_spmc/spmc_shared_mem.c",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2023-03-07T02:40:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "25c89f28_bdf3c89f",
      "range": {
        "startLine": 214,
        "startChar": 9,
        "endLine": 215,
        "endChar": 1
      },
      "revId": "9b303def4d03230fa6f5d89c19475c019be19e42",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}