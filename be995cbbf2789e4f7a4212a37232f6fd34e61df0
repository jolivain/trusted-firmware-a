{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5b68f2ff_79f49c40",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-05-03T01:05:33Z",
      "side": 1,
      "message": "It seems the platform_api is not implemented properly by the platform. The contract for this API is to return a -ve value if mpidr is not valid and it should never return a value higher than PLATFORM_CORE_COUNT. \n\n\nNot sure whether generic code should try to validate against sloppy platform code as this is difficult to achieve for every case and we are on a slippery slope for validating platform API for every case. If at all, asserts should be enough to help catch these issues , but eventually platform code must follow contract and be hardened.",
      "range": {
        "startLine": 29,
        "startChar": 3,
        "endLine": 29,
        "endChar": 38
      },
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eccbeac7_90672462",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-05-03T10:27:52Z",
      "side": 1,
      "message": "I understand that it *should* be the responsibility of the platform to validate the MPIDR, and that the platform is the only place that can reasonably do that.\n\nBUT in this case the PSCI library code is going to index an array internal to the PSCI library, based on the returned core index. So in the interest of security, I think it is not violating anything by briefly checking that against that array size. After all this is critical code (since the input comes from NS world), and we have a safe and clean way out there: simply returning an error code.\n\nWe could even change the asserts in psci_cpu_on_start() into regular checks, and return -PSCI_E_INVALID_PARAMS, but that would be double checking.",
      "parentUuid": "5b68f2ff_79f49c40",
      "range": {
        "startLine": 29,
        "startChar": 3,
        "endLine": 29,
        "endChar": 38
      },
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bafd5eb_4670b27a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-05-03T12:22:48Z",
      "side": 1,
      "message": "I agree, this is sensitive code since the arg is from NS. We need to have a policy around when to add checks and when not to add , to be consistent. See my previous comment on the criteria : https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/20749?tab\u003dcomments",
      "parentUuid": "eccbeac7_90672462",
      "range": {
        "startLine": 29,
        "startChar": 3,
        "endLine": 29,
        "endChar": 38
      },
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "200bde48_f62cd7fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-05-03T16:10:13Z",
      "side": 1,
      "message": "I think one criteria could be the ability to safely return with just an error code. We don\u0027t have this luxury in most cases, but here we can do it and catch the problem safely - without panicking the whole machine.\nAnd the name psci_validate_mpidr() also seems to somewhat promise some scrutiny.\n\nSo are we good with the patch as is? I will fix the one MISRA issue.",
      "parentUuid": "3bafd5eb_4670b27a",
      "range": {
        "startLine": 29,
        "startChar": 3,
        "endLine": 29,
        "endChar": 38
      },
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e5312df_ff2ad027",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-05-10T16:56:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "200bde48_f62cd7fe",
      "range": {
        "startLine": 29,
        "startChar": 3,
        "endLine": 29,
        "endChar": 38
      },
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2162c92_c34e6640",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-05-03T01:05:33Z",
      "side": 1,
      "message": "TF-A platform code must honor expectations as set out in porting guide. Asserts can be used to catch issues with platform code but runtime validation of platform API contract should be avoided.",
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b84123e_fe947e71",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-05-03T08:34:25Z",
      "side": 1,
      "message": "Hi Soby, stepping back, the change in question https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/20444 that current change is amending, was a naive attempt to fix a coverity finding which looked a possible buffer overflow opportunity (https://lists.trustedfirmware.org/archives/list/tf-a@lists.trustedfirmware.org/thread/PE4TOYXAU43343S2HVKVVDH2M3JIS64I/). We got pinged by a partner who was concerned about such possible issue in the psci lib.\nI agree with you we expect the platform port to be \u0027correct\u0027 and implement the mpdir conversion routine properly (and so omit runtime checks). Still, it is questionable whether we want to harden against the reported buffer overflow. Replacing with asserts is reasonable, although would be discarded in release builds and the potential issue be left?\nAlso in general should TF-A generic code be robust against an improperly designed platform port?",
      "parentUuid": "d2162c92_c34e6640",
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86cabed2_87bd7a87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-05-03T09:00:56Z",
      "side": 1,
      "message": "hmm , I can see the reasoning. The issue here is that, generic code cannot check for all cases of a platform API not behaving correctly. This is a simple case and hence we could implement a check but there are plenty of other cases where we cannot easily verify the correctness of return values. So where do we draw the line of verifying return arguments of a platform API ? (and we cannot verify full correctness in any case).\n\nOne possible angle to view this particular issue is :\n\n1. The args to this platform API is from NS world, which could justify extra validation in generic code.\n\n2. The platform API is doing 2 things implicitly : Verify the mpidr \u0026 calc core pos.  Thus, we could argue this is not a well designed platform API and hence this justifies the extra validation from generic code.\n\nBoth of these can be used as criteria to justify extra checks for some platform APIs in generic code. Once a criteria for the additional validation is in place, then we can avoid the slippery slope of applying it to other APIs.\n\nIf this can be added to platform porting guide or coding guidelines, then we all have a baseline understanding of where to add additional checks for platform API return values (can someone take an AI to add this ?).\n\nIn summary, I agree these checks for this particular API can be justified based on the above criteria.",
      "parentUuid": "4b84123e_fe947e71",
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3310b58_d7382d13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-05-10T16:56:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "86cabed2_87bd7a87",
      "revId": "be995cbbf2789e4f7a4212a37232f6fd34e61df0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}