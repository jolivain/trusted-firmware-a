{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ec5bb9d3_8950e36b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2023-03-06T15:49:52Z",
      "side": 1,
      "message": "+1 for Tegra platforms",
      "revId": "23d311bbcf3794274f36a7fe031a802482377e1f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85767742_1bcd12bc",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 1
      },
      "lineNbr": 824,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-06T16:56:31Z",
      "side": 1,
      "message": "why this change? The esb is a NOP when RAS isn\u0027t there and it would be missed on 2.",
      "revId": "23d311bbcf3794274f36a7fe031a802482377e1f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "000afb21_7c56480f",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 1
      },
      "lineNbr": 824,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-07T11:57:17Z",
      "side": 1,
      "message": "Yes, that\u0027s the problem: the ESB is a NOP, but we need a barrier. If we are not sure whether RAS is there (which is the case for \u003d2, if we cannot do a check), we must resort to the safe (but more expensive) DSB. The ESB is an optimisation, so it should be fine without it.",
      "parentUuid": "85767742_1bcd12bc",
      "revId": "23d311bbcf3794274f36a7fe031a802482377e1f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "711a7440_31870627",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 1
      },
      "lineNbr": 824,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-03-07T13:44:18Z",
      "side": 1,
      "message": "I see. Alright, that\u0027s fine. I suppose I comment won\u0027t hurt",
      "parentUuid": "000afb21_7c56480f",
      "revId": "23d311bbcf3794274f36a7fe031a802482377e1f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e69b946_6687ed8b",
        "filename": "plat/nvidia/tegra/soc/t194/plat_setup.c",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-03-10T14:29:29Z",
      "side": 1,
      "message": "RAS is a unique FEAT and this check is not fully correct. It should be guarded under newly introduced macro for Firmware first handling of RAS errors. https://review.trustedfirmware.org/q/topic:%22mp%252Ffeat_ras%22+(status:open%20OR%20status:merged) \n\nRAS_EXTENSION as it stands today means, RAS handling of errors by EL3, but systems which do handle RAS errors at lower EL is_feat_ras_supported() will be true they do not register any handler in Firmwar. That\u0027s what my patchset is trying to refactor.\n\nDon\u0027t bother about this patch i will take care of it.",
      "range": {
        "startLine": 257,
        "startChar": 1,
        "endLine": 257,
        "endChar": 29
      },
      "revId": "23d311bbcf3794274f36a7fe031a802482377e1f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02dcfef8_3a63e4bc",
        "filename": "plat/nvidia/tegra/soc/t194/plat_setup.c",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2023-05-09T19:47:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e69b946_6687ed8b",
      "range": {
        "startLine": 257,
        "startChar": 1,
        "endLine": 257,
        "endChar": 29
      },
      "revId": "23d311bbcf3794274f36a7fe031a802482377e1f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}