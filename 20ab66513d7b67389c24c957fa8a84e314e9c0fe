{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "46adf621_80d5b7a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2021-08-11T07:40:37Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 14,
        "startChar": 51,
        "endLine": 14,
        "endChar": 59
      },
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36076214_7f6c90ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2021-09-02T13:30:25Z",
      "side": 1,
      "message": "WIP this change to be revisited.",
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74a0f5d2_f424208b",
        "filename": "services/std_svc/spm_mm/spm_mm_main.c",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000289
      },
      "writtenOn": "2021-08-11T07:18:24Z",
      "side": 1,
      "message": "IIUC, there are two separate problems:\n\n1. Clash between TRNG and MM comm SMCs coming in from the normal world\n2. Clash between the StMM SP and SPM_MM SMCs and FF-A SMCs coming in from the secure world\n\n1) can be solved by restricting the MM comm range to 0x40-0x4f. 2) will be solved by keeping SPM_MM and FF-A SPM mutually exclusive.\n\nSo should this check not take the security state of the caller into account as well i.e.\n\n1) If caller is from NS, then return true only if 0x40 \u003c\u003d FID \u003c\u003d 0x4f else SMC_UNK\n2) If caller is from S,  then return true only if 0x60 \u003c\u003d FID \u003c\u003d 0x6f else SMC_UNK\n\nThis change works but the slight issue is that SPM_MM will attempt to handle a 0x60 \u003c\u003d FID \u003c\u003d 0x6f from NS and then reject it later (since it is not from Secure). Would it not be better to reject the call in this function itself.\n\nI realise that this is the way it was originally written but now that we are here..... :)",
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da2a82a0_ff8e7511",
        "filename": "services/std_svc/spm_mm/spm_mm_main.c",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2021-08-11T07:36:44Z",
      "side": 1,
      "message": "There is a discussion on the ML:\nhttps://lists.trustedfirmware.org/pipermail/tf-a/2021-August/001307.html\n\nAbout bullet 2) the intent is not about using SPM_MM + TRNG, but rather Trusty SPD (+FF-A mem sharing) + TRNG.\nThe caveat is that the Trusty SPD re-uses the spm_mm_smc_handler symbol to serve FF-A [1].\n\nThen I wonder if the current change really works because other FF-A func ids are filtered out and won\u0027t reach the SPD handler [2] (?)\n\nThe way to solve it would be for Trusty to adopt the SPMD (and merge the EL3 mem sharing bits).\nThen get rid of the spm_mm_smc_handler symbol re-use in Trusty context.\n\n[1] https://android.googlesource.com/trusty/external/trusted-firmware-a/+/refs/heads/master/services/std_svc/std_svc_setup.c#113\n\n[2] https://android.googlesource.com/trusty/external/trusted-firmware-a/+/refs/heads/master/services/spd/trusty/shared-mem-smcall.c#982",
      "parentUuid": "74a0f5d2_f424208b",
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1306b9c7_4f2cd0e8",
        "filename": "services/std_svc/spm_mm/spm_mm_main.c",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2021-08-11T07:45:43Z",
      "side": 1,
      "message": "Alternative short term approach is to split TRUSTY_SPM and SPM_MM options in std_svc_smc_handler. Trusty SPD may call its own FF-A func id checks and SMC handler, or maybe just re-use the SPMD is_ffa_fid [1] and redefine spmd_smc_handler within the Trusty SPD.\n\n[1] https://android.googlesource.com/trusty/external/trusted-firmware-a/+/refs/heads/master/services/std_svc/std_svc_setup.c#129",
      "parentUuid": "da2a82a0_ff8e7511",
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "672b5dba_858e0ddf",
        "filename": "services/std_svc/spm_mm/spm_mm_main.c",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000519
      },
      "writtenOn": "2021-08-11T11:21:20Z",
      "side": 1,
      "message": "To hack around the issue in the trusty setup, I did just change SPM_MM_FID_MIN_VALUE from 0x40 to 0x60. That\u0027s not a complete solutions as it ignores the 0x40/1 range but was enough to let me use the TRNG. I didn\u0027t use the version uploaded here with Trusty but Olivier makes a good point that it would be nice to do something that will be compatible so the trusty fork can merge nicely. It seems the suggested approach of testing the two ranges independently would work well for that.",
      "parentUuid": "1306b9c7_4f2cd0e8",
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9062395_ad7023d7",
        "filename": "services/std_svc/spm_mm/spm_mm_main.c",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000289
      },
      "writtenOn": "2021-08-11T16:08:58Z",
      "side": 1,
      "message": "@Olivier, thanks for the background on the Trusty intersection.\n\nThis change won\u0027t allow Trusty to handle FF-A SMCs. In any case that is a separate requirement. IIRC Arve\u0027s work predates the FF-A SPMD support in EL3. Reusing the SPM_MM was the quickest option back then. The Trusty SPD and SPM_MM should not intersect in any way in upstream. \n\nSo, I think this solves the TRNG problem. Qualifying the 0x60-0x70 range with the security state (as suggested above) would prevent NS FF-A SMCs from landing in SPM_MM.\n\nTrusty\u0027s choice to use FF-A in bits implies that all FF-A calls should be routed to the Trusty SPD. It already handles most. So \"#if defined(SPD_spmd) || TRUSTY_SPM\" would be needed. Trying to use the SPMD with the Trusty SPD (essentially an SPMC) where it only handles a subset of FF-A calls would mean unnecessary complexity. \n\nIn any case, IIUC Trusty\u0027s choices are downstream right now so it can do what it wants really. I don\u0027t there is any point in carrying a Trusty EL3 SPMC+SPMD implementation upstream. The point of FF-A is to remove TOS specific code from EL3 rather than let the TOS cherry pick.",
      "parentUuid": "672b5dba_858e0ddf",
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afe45f9a_9495837e",
        "filename": "services/std_svc/spm_mm/spm_mm_main.c",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2021-08-12T08:52:03Z",
      "side": 1,
      "message": "@Andrew, would it be possible to do this downstream? \n\ndiff --git a/services/spd/trusty/shared-mem-smcall.c b/services/spd/trusty/shared-mem-smcall.c\nindex 8965f2d50..90255ccd3 100644\n--- a/services/spd/trusty/shared-mem-smcall.c\n+++ b/services/spd/trusty/shared-mem-smcall.c\n@@ -919,7 +919,7 @@ static int to_spi_err(int ret)\n /*\n  * trusty_shared_memory_smc - SMC call handler.\n  */\n-uintptr_t spm_mm_smc_handler(uint32_t smc_fid,\n+uintptr_t spmd_smc_handler(uint32_t smc_fid,\n                             u_register_t x1,\n                             u_register_t x2,\n                             u_register_t x3,\ndiff --git a/services/std_svc/std_svc_setup.c b/services/std_svc/std_svc_setup.c\nindex 1cc90f89f..9093de814 100644\n--- a/services/std_svc/std_svc_setup.c\n+++ b/services/std_svc/std_svc_setup.c\n@@ -123,7 +123,7 @@ static uintptr_t std_svc_smc_handler(uint32_t smc_fid,\n                SMC_RET1(handle, ret);\n        }\n \n-#if SPM_MM || TRUSTY_SPM\n+#if SPM_MM\n        /*\n         * Dispatch SPM calls to SPM SMC handler and return its return\n         * value\n@@ -134,7 +134,7 @@ static uintptr_t std_svc_smc_handler(uint32_t smc_fid,\n        }\n #endif\n \n-#if defined(SPD_spmd)\n+#if defined(SPD_spmd) || TRUSTY_SPM\n        /*\n         * Dispatch FFA calls to the FFA SMC handler implemented by the SPM\n         * dispatcher and return its return value\n\n\nThe clash between SPM_MM and TRNG func id ranges becomes a second priority problem (no longer intersected with Trusty). It can be resolved by reworking the current change with is_spm_mm_fid checking both the distinct changes of MM (0x40-0x4f) and \"SP_MM\" (0x60-0x6f).",
      "parentUuid": "f9062395_ad7023d7",
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e87aea64_753e87f1",
        "filename": "services/std_svc/spm_mm/spm_mm_main.c",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000519
      },
      "writtenOn": "2021-08-12T12:34:31Z",
      "side": 1,
      "message": "I think it should be, I posted [1] to do that and migrate to the SPD FFA definitions.\n\n[1] -- https://android-review.googlesource.com/c/trusty/external/trusted-firmware-a/+/1794327",
      "parentUuid": "afe45f9a_9495837e",
      "revId": "20ab66513d7b67389c24c957fa8a84e314e9c0fe",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}