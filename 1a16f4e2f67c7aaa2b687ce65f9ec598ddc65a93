{
  "comments": [
    {
      "key": {
        "uuid": "2ce96bd1_37b1369a",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-05T16:14:06Z",
      "side": 1,
      "message": "Won\u0027t that increase COT_MAX_VERIFIED_PARAMS for the TBBR CoT? And unnecessarily slow down auth_get_param() in this case?\n\nBesides, I think it\u0027s more accurate to say that COT_MAX_VERIFIED_PARAMS is a property of the chain of trust you use. It\u0027s not directly decided by whether you enable SPM or not.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 15,
        "endChar": 6
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f22aba4_a7ee17df",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-06-05T17:41:17Z",
      "side": 1,
      "message": "I am not sure if i understood clearly your comments but the reason why i kept it under SPM flag is not to unnecssary increase the static memory usage in non SPM cases.\n\nEnabling SPM requires to increase number image hashes in a certificate.\nYes i agree that it will increase auth_get_param() in tbbr case because COT_MAX_VERIFIED_PARAMS  is currently being shared by both tbbr and dualroot, if you want i can think of defining it for both cases differently.\n\nPlease let me know if i completly misunderstood your comments.",
      "parentUuid": "2ce96bd1_37b1369a",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 15,
        "endChar": 6
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aec9a121_b421c123",
        "filename": "include/common/tbbr/cot_def.h",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-08T08:08:08Z",
      "side": 1,
      "message": "On further thoughts, I think it\u0027s fine as is. What I originally had in mind was something like:\n\n #if defined(ARM_COT_dualroot)\n #define COT_MAX_VERIFIED_PARAMS\t\t8\n #else\n #define COT_MAX_VERIFIED_PARAMS\t\t4\n #endif\n\ni.e. base COT_MAX_VERIFIED_PARAMS on the chain of trust used. But I now realize that it won\u0027t work, as one can use the dualroot chain of trust with no secure partition support so you\u0027d need to check both ARM_COT_dualroot and SPD_spmd.\n\nThus, as I said, I am happy for the code in this file to stay as is.",
      "parentUuid": "7f22aba4_a7ee17df",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 15,
        "endChar": 6
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "476ece80_891d4ec7",
        "filename": "include/common/tbbr/tbbr_img_def.h",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2020-06-05T15:47:43Z",
      "side": 1,
      "message": "I have followed the comments thread, although I kind of understood we should ban usage of #undef. Btw this is yielding a MISRA violation. Not sure yet how you can fix that.",
      "range": {
        "startLine": 13,
        "startChar": 1,
        "endLine": 13,
        "endChar": 6
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6670b651_83d514f1",
        "filename": "include/common/tbbr/tbbr_img_def.h",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-06-05T15:58:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "476ece80_891d4ec7",
      "range": {
        "startLine": 13,
        "startChar": 1,
        "endLine": 13,
        "endChar": 6
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1526f770_83b1710a",
        "filename": "include/common/tbbr/tbbr_img_def.h",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-05T16:14:06Z",
      "side": 1,
      "message": "OK in this case, I guess we could do something like:\n\n1. In this file:\n\n #define SP_CONTENT_CERT_ID\t\tU(31)\n #define MAX_SP_IDS\t\t\tU(8)\n #define SPM_IMAGES                     (U(1) + MAX_SP_IDS)\n\n #include #include \u003cexport/common/tbbr/tbbr_img_def_exp.h\u003e\n\n2. In file tbbr_img_def_exp.h:\n\n #ifndef SPM_IMAGES\n #define SPM_IMAGES 0\n #endif\n\n #define MAX_NUMBER_IDS\t(U(31) + SPM_IMAGES)",
      "parentUuid": "476ece80_891d4ec7",
      "range": {
        "startLine": 13,
        "startChar": 1,
        "endLine": 13,
        "endChar": 6
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e4d099d_848d5a26",
        "filename": "include/common/tbbr/tbbr_img_def.h",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-06-05T17:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1526f770_83b1710a",
      "range": {
        "startLine": 13,
        "startChar": 1,
        "endLine": 13,
        "endChar": 6
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "086f7437_7878b3c0",
        "filename": "include/drivers/auth/auth_mod.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-06-05T16:14:06Z",
      "side": 1,
      "message": "n should be enclosed in parentheses.",
      "range": {
        "startLine": 56,
        "startChar": 33,
        "endLine": 56,
        "endChar": 34
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e17bcd9_32067902",
        "filename": "include/drivers/auth/auth_mod.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-06-05T17:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "086f7437_7878b3c0",
      "range": {
        "startLine": 56,
        "startChar": 33,
        "endLine": 56,
        "endChar": 34
      },
      "revId": "1a16f4e2f67c7aaa2b687ce65f9ec598ddc65a93",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}