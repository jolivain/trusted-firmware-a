{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5b296ef2_83544cbb",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-09-30T09:47:02Z",
      "side": 1,
      "message": "I understand the rationale for the other 3 mappings above, but could you please explain what is the DRAM involvement in HAB ROM code operations?",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5eb55bc1_55b3336a",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000216
      },
      "writtenOn": "2022-10-02T12:18:25Z",
      "side": 1,
      "message": "It is for SPL authenticate U-Boot in DRAM, and DRAM authenticate Linux in DRAM.",
      "parentUuid": "5b296ef2_83544cbb",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7e7a3ff_aa78f592",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-10-04T09:25:36Z",
      "side": 1,
      "message": "OK I understand.\n\nThat being said, mapping the entire DRAM in BL31 for the lifetime of the system is not ideal from a security point of view... Have you considered making this a temporary mapping instead?\n\nThe translation table library in TF-A supports the concept of \"dynamic\" mapping [1], which need not be declared statically as above. You could potentially leave the DRAM initially ummapped in BL31; then when you receive the authentication request in BL31 you map the required region of DRAM to access U-boot/Linux (so presumably you don\u0027t even need to map the entire DRAM here, but just the region holding the payload to authenticate), authenticate, then unmap. Would that work for your use case? This does not come for free, though, there will be a performance impact. So this is a security/performance trade-off.\n\nBTW, why does the DRAM need to be mapped as read-write here? Why not read-only? AFAIU, authenticating an image only requires read access, but is there something I am missing? \n\n[1] Build option PLAT_XLAT_TABLES_DYNAMIC,\nhttps://trustedfirmware-a.readthedocs.io/en/latest/components/xlat-tables-lib-v2-design.html#static-and-dynamic-memory-regions",
      "parentUuid": "5eb55bc1_55b3336a",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff20a794_e166d2f3",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2022-10-13T09:38:05Z",
      "side": 1,
      "message": "Hello Sandrine,\n\n\u003e OK I understand.\n\u003e \n\u003e That being said, mapping the entire DRAM in BL31 for the lifetime of the system is not ideal from a security point of view... Have you considered making this a temporary mapping instead?\n\nThis is indeed a good point to consider! After second-glancing at the implementation, I believe that the entire static DRAM mapping might not be necessary, and only regions that are requested for authentication needs to be mapped in.\n\n\u003e \n\u003e The translation table library in TF-A supports the concept of \"dynamic\" mapping [1], which need not be declared statically as above. You could potentially leave the DRAM initially ummapped in BL31; then when you receive the authentication request in BL31 you map the required region of DRAM to access U-boot/Linux (so presumably you don\u0027t even need to map the entire DRAM here, but just the region holding the payload to authenticate), authenticate, then unmap. Would that work for your use case? This does not come for free, though, there will be a performance impact. So this is a security/performance trade-off.\n\nI would have a look at the feature, and try it out. Without much knowledge of it now, my concern is about cache coherency here, as the DRAM region which needs to be dynamically mapped shall be consistent between S and NS worlds via TZ MMU extension.\n\n\u003e \n\u003e BTW, why does the DRAM need to be mapped as read-write here? Why not read-only? AFAIU, authenticating an image only requires read access, but is there something I am missing? \n\nGood point, let me check this! I believe there is no need to do RW mapping here, RO shall be sufficient since HAB shall not modify the input data subject for authentication. Otherwise, any input from NXP would be really appreciated here to clarify whether RW is required.\n\n\u003e \n\u003e [1] Build option PLAT_XLAT_TABLES_DYNAMIC,\n\u003e https://trustedfirmware-a.readthedocs.io/en/latest/components/xlat-tables-lib-v2-design.html#static-and-dynamic-memory-regions\n\n-- andrey",
      "parentUuid": "e7e7a3ff_aa78f592",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "179cbc67_0dbf41f9",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000216
      },
      "writtenOn": "2022-10-14T03:14:56Z",
      "side": 1,
      "message": "\u003e Hello Sandrine,\n\u003e \n\u003e \u003e OK I understand.\n\u003e \u003e \n\u003e \u003e That being said, mapping the entire DRAM in BL31 for the lifetime of the system is not ideal from a security point of view... Have you considered making this a temporary mapping instead?\n\u003e \n\u003e This is indeed a good point to consider! After second-glancing at the implementation, I believe that the entire static DRAM mapping might not be necessary, and only regions that are requested for authentication needs to be mapped in.\n\u003e \n\u003e \u003e \n\u003e \u003e The translation table library in TF-A supports the concept of \"dynamic\" mapping [1], which need not be declared statically as above. You could potentially leave the DRAM initially ummapped in BL31; then when you receive the authentication request in BL31 you map the required region of DRAM to access U-boot/Linux (so presumably you don\u0027t even need to map the entire DRAM here, but just the region holding the payload to authenticate), authenticate, then unmap. Would that work for your use case? This does not come for free, though, there will be a performance impact. So this is a security/performance trade-off.\n\u003e \n\u003e I would have a look at the feature, and try it out. Without much knowledge of it now, my concern is about cache coherency here, as the DRAM region which needs to be dynamically mapped shall be consistent between S and NS worlds via TZ MMU extension.\n\nThis may consume more MMU mapping table to runtime map, and need pass which range is required for authentication using SIP args.\n\n\u003e \n\u003e \u003e \n\u003e \u003e BTW, why does the DRAM need to be mapped as read-write here? Why not read-only? AFAIU, authenticating an image only requires read access, but is there something I am missing? \n\u003e \n\u003e Good point, let me check this! I believe there is no need to do RW mapping here, RO shall be sufficient since HAB shall not modify the input data subject for authentication. Otherwise, any input from NXP would be really appreciated here to clarify whether RW is required.\n\n\nI not see RW is required in HAB authenticate case.\n\n\u003e \n\u003e \u003e \n\u003e \u003e [1] Build option PLAT_XLAT_TABLES_DYNAMIC,\n\u003e \u003e https://trustedfirmware-a.readthedocs.io/en/latest/components/xlat-tables-lib-v2-design.html#static-and-dynamic-memory-regions\n\u003e \n\u003e -- andrey",
      "parentUuid": "ff20a794_e166d2f3",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44c75957_dc670393",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-10-14T08:43:18Z",
      "side": 1,
      "message": "Hello Andrei,\n\n\u003e I would have a look at the feature, and try it out. Without much knowledge of it now, my concern is about cache coherency here, as the DRAM region which needs to be dynamically mapped shall be consistent between S and NS worlds via TZ MMU extension.\n\nSorry I am not sure I am following... Could you please give a scenario where you\u0027d expect to see coherency issues?\n\nTo be clear, TF-A should map the (regions of) DRAM as Non-Secure memory, even though it will read it from secure state. \n\n\nHello Bai Ping,\n\n\u003e This may consume more MMU mapping table to runtime map\n\nTrue, but I would expect this is mostly a consequence of mapping smaller regions of DRAM, which would require fine-grain page tables? So where you used to map the entire DRAM using maybe a single level-1/2 translation table entry, you might have to go down to 4-KB / level-3 mapping?\n\n\u003e and need pass which range is required for authentication using SIP args.\n\nYes, you\u0027re right. But aren\u0027t you already passing this information to the SiP SMC handler anyway? Without looking into the documentation provided in the CST package, I had assumed that the second and third argument of the HAB authentication callback:\n\n void* (*authenticate_image)(uint8_t, long, void **, size_t *,\n\t\thab_loader_callback_f_t);\n\nwere to pass the base address and size of the image to authenticate - which would also be the base address and size of the region to dynamically map?",
      "parentUuid": "179cbc67_0dbf41f9",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adb08545_84c485db",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000110
      },
      "writtenOn": "2022-10-14T08:59:36Z",
      "side": 1,
      "message": "\u003e Hello Andrei,\n\u003e \n\u003e \u003e I would have a look at the feature, and try it out. Without much knowledge of it now, my concern is about cache coherency here, as the DRAM region which needs to be dynamically mapped shall be consistent between S and NS worlds via TZ MMU extension.\n\u003e \n\u003e Sorry I am not sure I am following... Could you please give a scenario where you\u0027d expect to see coherency issues?\n\u003e \n\u003e To be clear, TF-A should map the (regions of) DRAM as Non-Secure memory, even though it will read it from secure state. \n\u003e \n\nshould be no cache coherence issue as the memory is mapped as NS by purpose, if the DRAM mapped as S, it will lead to coherence issue.\n\n\u003e \n\u003e Hello Bai Ping,\n\u003e \n\u003e \u003e This may consume more MMU mapping table to runtime map\n\u003e \n\u003e True, but I would expect this is mostly a consequence of mapping smaller regions of DRAM, which would require fine-grain page tables? So where you used to map the entire DRAM using maybe a single level-1/2 translation table entry, you might have to go down to 4-KB / level-3 mapping?\n\nmapping the entire DRAM doesn\u0027t use additional page table as it will use 32MB block mapping in level2, if we use fine grain mapping, additional level-3 page table is required, the SRAM is very small on some platform, should avoid creating additional level3 mapping. \n\n\u003e \n\u003e \u003e and need pass which range is required for authentication using SIP args.\n\u003e \n\u003e Yes, you\u0027re right. But aren\u0027t you already passing this information to the SiP SMC handler anyway? Without looking into the documentation provided in the CST package, I had assumed that the second and third argument of the HAB authentication callback:\n\u003e \n\u003e  void* (*authenticate_image)(uint8_t, long, void **, size_t *,\n\u003e \t\thab_loader_callback_f_t);\n\u003e \n\u003e were to pass the base address and size of the image to authenticate - which would also be the base address and size of the region to dynamically map?",
      "parentUuid": "44c75957_dc670393",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52f89c22_3e35b6bd",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-10-14T09:03:15Z",
      "side": 1,
      "message": "\u003e mapping the entire DRAM doesn\u0027t use additional page table as it will use 32MB block mapping in level2, if we use fine grain mapping, additional level-3 page table is required\n\nI agree, we are on the same page here 😊",
      "parentUuid": "adb08545_84c485db",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7983cb0a_c3697cc8",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2022-10-14T09:11:16Z",
      "side": 1,
      "message": "Hello all,\n\nFirst of, thanks a lot for the throughout review and your comments here here!\n\nHad a second look at the cache coherency, and indeed it should not be an issue since the mapping is originating from NS to S world.\n\nThanks Sandrine and Bai Ping!\n\n\u003e \u003e mapping the entire DRAM doesn\u0027t use additional page table as it will use 32MB block mapping in level2, if we use fine grain mapping, additional level-3 page table is required\n\u003e \n\u003e I agree, we are on the same page here 😊\n\nAs a compromise, would the `MT_RO` mapping assist here to mitigate the security aspects, and still use L1 translation regime not to clutter the page table?\n\nIf that is what we can all agree to, then I can push the updated patch set which includes those changes. Otherwise, I would need to go and change the implementation to include dynamic mapping instead.",
      "parentUuid": "52f89c22_3e35b6bd",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b3a4f9c_6b524b80",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000110
      },
      "writtenOn": "2022-10-14T09:28:46Z",
      "side": 1,
      "message": "\u003e Hello all,\n\u003e \n\u003e First of, thanks a lot for the throughout review and your comments here here!\n\u003e \n\u003e Had a second look at the cache coherency, and indeed it should not be an issue since the mapping is originating from NS to S world.\n\u003e \n\u003e Thanks Sandrine and Bai Ping!\n\u003e \n\u003e \u003e \u003e mapping the entire DRAM doesn\u0027t use additional page table as it will use 32MB block mapping in level2, if we use fine grain mapping, additional level-3 page table is required\n\u003e \u003e \n\u003e \u003e I agree, we are on the same page here 😊\n\u003e \n\u003e As a compromise, would the `MT_RO` mapping assist here to mitigate the security aspects, and still use L1 translation regime not to clutter the page table?\n\u003e \n\u003e If that is what we can all agree to, then I can push the updated patch set which includes those changes. Otherwise, I would need to go and change the implementation to include dynamic mapping instead.\n\nI am ok for mapping it as MT_RO. better to have a sanity test ^_^.\n\nBR",
      "parentUuid": "7983cb0a_c3697cc8",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34d57e50_5c4638c3",
        "filename": "plat/imx/imx8m/imx8mm/imx8mm_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-10-14T09:42:26Z",
      "side": 1,
      "message": "\u003e As a compromise, would the `MT_RO` mapping assist here to mitigate the security aspects, and still use L1 translation regime not to clutter the page table?\n\n\u003e If that is what we can all agree to, then I can push the updated patch set which includes those changes. Otherwise, I would need to go and change the implementation to include dynamic mapping instead.\n\nThat sounds reasonable to me too!",
      "parentUuid": "2b3a4f9c_6b524b80",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 44,
        "endChar": 85
      },
      "revId": "9819135e76ce89fdea989fc4ae104bbee88ba44f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}