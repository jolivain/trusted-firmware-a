{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6f00db1d_ee5dbc89",
        "filename": "plat/arm/board/tc/include/platform_def.h",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Presumably we are not targetting SPM_MM configuration for these platform tests, are we? In which case, we can leave PLATFORM_STACK_SIZE value untouched in this config.",
      "range": {
        "startLine": 152,
        "startChar": 0,
        "endLine": 153,
        "endChar": 36
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5fe7e82_149e6393",
        "filename": "plat/arm/board/tc/plat_tc_mbedtls_config.h",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "(coding style) Please add spaces around the \u0027*\u0027 sign.",
      "range": {
        "startLine": 15,
        "startChar": 46,
        "endLine": 15,
        "endChar": 47
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82a13c73_18d87488",
        "filename": "plat/arm/board/tc/plat_tc_mbedtls_config.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "When I read the comment, I was expecting something like:\n\n #if TF_MBEDTLS_HEAP_SIZE \u003c PLATFORM_TEST_MIN_MBEDTLS_HEAP_SIZE\n #  undef TF_MBEDTLS_HEAP_SIZE\n #  define TF_MBEDTLS_HEAP_SIZE PLATFORM_TEST_MIN_MBEDTLS_HEAP_SIZE\n #endif\n\nbut this looks a bit more complicated than that... Could you please explain the tie in with RSA/ECDSA choice and the key size?",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 21,
        "endChar": 6
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd92ff17_eedaebb6",
        "filename": "plat/arm/board/tc/plat_tc_mbedtls_config.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Just want to check my understanding... These defines are added on top of the existing ones in mbedtls_config.h (included from this file at line 10). AFAIU it means we are enabling both legacy crypto related macros, and MBEDTLS_PSA_CRYPTO_C, and it works fine. Right? Does it mean that the resulting mbedtls library file contains both legacy and PSA crypto APIs?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfd044da_8e53dabf",
        "filename": "plat/arm/board/tc/platform.mk",
        "patchSetId": 3
      },
      "lineNbr": 196,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Can we move this line at the end of the file? As you can see, the existing lines are sorted from less-specific to most-specific context (CSS -\u003e SoC -\u003e board). AFAICT, plat/arm/board/tc/platform_test.mk is board specific.\n\nOr is there a reason why we cannot do it as I suggest (e.g. need below makefiles to override definitions provided by plat/arm/board/tc/platform_test.mk)?",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 196,
        "endChar": 42
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb2274a3_074a3d3a",
        "filename": "plat/arm/board/tc/platform_test.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "This file looks a bit empty right now... Do you envisage adding more declarations in the future? If no, then I would be keen on moving this declaration somewhere else, in some existing header file, if possible.",
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b232539c_e1523d73",
        "filename": "plat/arm/board/tc/platform_test.mk",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Can we choose sane, default values for these (e.g. 32 and PSA_ALG_SHA_256), instead of requiring the user to always set them? \n\nJust to be clear, I think it\u0027s fine to ask the user to set TF_M_TESTS_PATH and TF_M_EXTRAS_PATH, because I can\u0027t imagine a default value that makes sense for these, as it\u0027s completely dependent of the user\u0027s setup.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 24,
        "endChar": 9
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f38a912f_048f103b",
        "filename": "plat/arm/board/tc/platform_test.mk",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "I think this needs to be:\n\n \"\u003cplat_tc_mbedtls_config.h\u003e\"\n\nbased on the other examples in the codebase:\n\n drivers/auth/mbedtls/mbedtls_common.mk:MBEDTLS_CONFIG_FILE      ?\u003d      \"\u003cdrivers/auth/mbedtls/mbedtls_config.h\u003e\"\n plat/st/stm32mp1/platform.mk:MBEDTLS_CONFIG_FILE        ?\u003d      \"\u003cstm32mp1_mbedtls_config.h\u003e\"",
      "range": {
        "startLine": 29,
        "startChar": 27,
        "endLine": 29,
        "endChar": 55
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fe3ab1d_38e96332",
        "filename": "plat/arm/board/tc/platform_test.mk",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Where are these used? I suspect they are a duplicate of MBEDTLS_CONFIG_FILE at line 29? If not, could you please explain the difference between PLATFORM_MBEDTLS_CONFIG_FILE and MBEDTLS_CONFIG_FILE?",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 59
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7beb975d_86d57d62",
        "filename": "plat/arm/board/tc/platform_test.mk",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Why are these needed? Do the platform tests need parsing any of the dynamic DTB config files? If yes, for what purpose?",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 48,
        "endChar": 22
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1f01099_ec7422eb",
        "filename": "plat/arm/board/tc/platform_test.mk",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Could you please add a comment above this line to explain why this is needed?",
      "range": {
        "startLine": 72,
        "startChar": 4,
        "endLine": 72,
        "endChar": 44
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff9605dc_0f5baca0",
        "filename": "plat/arm/board/tc/platform_test.mk",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "I could not find where this MEASUREMENT_VALUE_SIZE is used (neither in TF-A, TF-M tests or TF-M extras). Could you please point me to it?",
      "range": {
        "startLine": 77,
        "startChar": 4,
        "endLine": 77,
        "endChar": 53
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b57377be_d98a658c",
        "filename": "plat/arm/board/tc/platform_test.mk",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Ditto for this one. Should that rather be MBOOT_RSS_HASH_ALG?",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 51
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59b0b06f_75a9e796",
        "filename": "plat/arm/board/tc/platform_test.mk",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "And ditto for this one too.",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 62
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd9cb5c6_f9d206cc",
        "filename": "plat/arm/board/tc/region_defs.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "This file too looks a bit empty right now... Same question, do you envisage adding more declarations in the future?\n\nAlso, I\u0027m struggling to relate the name of the header file (region_defs.h) with the the macro name (PSA_INITIAL_ATTEST_TOKEN_MAX_SIZE), which does not sound like a region... Could you please what you had in mind?",
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8705f0ae_662681d4",
        "filename": "plat/arm/board/tc/rss_ap_test_stubs.c",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "(minor) It does not look necessary to initialize count to 0 here, since it\u0027s not used before it is assigned a value at line 112.",
      "range": {
        "startLine": 108,
        "startChar": 11,
        "endLine": 108,
        "endChar": 14
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "076a22bc_42f4bfc0",
        "filename": "plat/arm/board/tc/rss_ap_tests.c",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Since assertions are removed in debug builds, it might be best to add a \u0027return;\u0027 statement in addition to assert(false). Or do you expect platform tests to always run in debug mode? In which case it might be good to enforce this dependency in the build system.",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f87c61e9_a2e071cc",
        "filename": "plat/arm/board/tc/rss_ap_tests.c",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "IIUC, this line means that we will stop as soon as we encounter an error (at least in debug builds). Is my understanding correct? I can\u0027t really tell if that\u0027s the best call or whether we should try running subsequent tests nonetheless, as it depends on the type of tests, but I just wanted to raise the question, in case it hadn\u0027t been considered...",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 41,
        "endChar": 41
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30bed99f_fa9c52be",
        "filename": "plat/arm/board/tc/rss_ap_testsuites.c",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "(minor) Remove empty line at the top of the file.",
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16853b93_81b2afd7",
        "filename": "plat/arm/board/tc/rss_ap_testsuites.c",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "Could you please add a comment for these lines?",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0072ca5_4f142ab4",
        "filename": "plat/arm/board/tc/tc_bl31_setup.c",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-14T13:15:09Z",
      "side": 1,
      "message": "I would remove this comment. It will go stale as soon as we add more platform tests.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 9
      },
      "revId": "8ab53f5c6d077f7b0905a888538e3c3adb482fef",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}