{
  "comments": [
    {
      "key": {
        "uuid": "bc7e7c15_4418afe3",
        "filename": "plat/arm/common/arm_sip_svc.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-11-01T11:48:02Z",
      "side": 1,
      "message": "This doesn\u0027t seem right. Any reason for this change ?",
      "revId": "33c2418bb3b328b654ce597a07bdf6ba698d85e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac5bf91d_2f5331e1",
        "filename": "plat/arm/common/arm_sip_svc.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000274
      },
      "writtenOn": "2019-11-04T09:39:38Z",
      "side": 1,
      "message": "pc has the type u_register_t, so on AArch32 line 62 overflows it. On AArch32 arm_execution_state_switch() also always calls SMC_RET1(handle, STATE_SW_E_DENIED), so even if the entrypoint is valid, the state switch will still fail.\n\nIf you want, I could change the ifdef, so that x1 is ignored on AArch32, and arm_validate_ns_entrypoint() is still called. The difference is only whether we want to even try validating the entrypoint address before failing.",
      "parentUuid": "bc7e7c15_4418afe3",
      "revId": "33c2418bb3b328b654ce597a07bdf6ba698d85e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "838e73e8_19b06748",
        "filename": "plat/arm/common/arm_sip_svc.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-11-18T12:43:35Z",
      "side": 1,
      "message": "Hi Bence,\nThanks for the explanation. This API doesn\u0027t make sense for AArch32 builds so I agree this change is correct. This issue is this change is unrelated to the PMF capability you are adding. Hence make this a separate patch either on this same branch or a separate one.",
      "parentUuid": "ac5bf91d_2f5331e1",
      "revId": "33c2418bb3b328b654ce597a07bdf6ba698d85e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19948e99_5b1619e2",
        "filename": "plat/arm/common/arm_sip_svc.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000274
      },
      "writtenOn": "2019-11-18T15:10:45Z",
      "side": 1,
      "message": "I included this change in the patch, because this function, arm_sip_handler is the one that dispatches PMF calls to the PMF SMC handler, and thus I needed to build it on AArch32 to enable the PMF SMC service on AArch32. It wouldn\u0027t compile due to the issues discussed above, so I added the ifdef.\n\nI can move this change into a separate commit, but the PMF changes will have to depend on it.",
      "parentUuid": "838e73e8_19b06748",
      "revId": "33c2418bb3b328b654ce597a07bdf6ba698d85e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e14056e_2ea26cae",
        "filename": "plat/arm/common/arm_sip_svc.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-11-18T15:24:01Z",
      "side": 1,
      "message": "Ok, that sounds fine. The first patch can be this fix and the PMF changes can be on top.",
      "parentUuid": "19948e99_5b1619e2",
      "revId": "33c2418bb3b328b654ce597a07bdf6ba698d85e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d8658ce_ac0355c9",
        "filename": "plat/arm/common/arm_sip_svc.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000274
      },
      "writtenOn": "2019-11-19T12:51:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e14056e_2ea26cae",
      "revId": "33c2418bb3b328b654ce597a07bdf6ba698d85e1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}