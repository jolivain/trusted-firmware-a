{
  "comments": [
    {
      "key": {
        "uuid": "9473cf10_a93d86ec",
        "filename": "drivers/auth/mbedtls/mbedtls_common.mk",
        "patchSetId": 8
      },
      "lineNbr": 80,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-03-11T17:24:01Z",
      "side": 1,
      "message": "I have a very limited understanding of mbedTLS project and the cryptographic algorithms. Please take my comments with a pinch of salt. \nAs seen here https://github.com/ARMmbed/mbedtls/blob/mbedtls-2.18.0/include/mbedtls/md.h#L74, MBEDTLS_MD_MAX_SIZE is 32 for any hash algorithm other than sha512. Hence for sha384, MBEDTLS_MD_MAX_SIZE is 32 but TCG_DIGEST_SIZE is 48. Is it intentional?",
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7831c08c_9f5917b1",
        "filename": "drivers/auth/mbedtls/mbedtls_common.mk",
        "patchSetId": 8
      },
      "lineNbr": 80,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-03-11T17:34:37Z",
      "side": 1,
      "message": "Yes, I also saw that MBEDTLS_MD_MAX_SIZE is 32 for sha256, but is 64 for both sha384 and sha512 nad don\u0027t know the reason for that.\nI also tested\nvoid arm_bl1_set_bl2_hash(image_desc_t *image_desc)\n{\n\tunsigned char hash_data[MBEDTLS_MD_MAX_SIZE];\n..\nwith MBEDTLS_MD_MAX_SIZE changed to 48 for sha384 and the code worked. Checking hash_data[64] content for sha384 also shows that only first 48 bytes are used and others aren\u0027t changed by mbedtls.",
      "parentUuid": "9473cf10_a93d86ec",
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c9838df_676817e3",
        "filename": "drivers/auth/mbedtls/mbedtls_common.mk",
        "patchSetId": 8
      },
      "lineNbr": 80,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-03-11T19:25:49Z",
      "side": 1,
      "message": "MBEDTLS_MD_MAX_SIZE is 32 for sha384, not 64. You mentioned 48 bytes are used in hash_data for calculating hash but statically hash_data is declared with a size of 32. Doesn\u0027t it mean there is an overflow?",
      "parentUuid": "7831c08c_9f5917b1",
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad537b89_98f2d67b",
        "filename": "plat/arm/board/fvp/fvp_bl1_setup.c",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2020-03-12T12:31:45Z",
      "side": 1,
      "message": "Looks like this function always return 0, Why return value is needed here? (Is it generic function?)",
      "range": {
        "startLine": 77,
        "startChar": 4,
        "endLine": 77,
        "endChar": 35
      },
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e055873_333e84be",
        "filename": "plat/arm/board/fvp/fvp_bl1_setup.c",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-03-13T10:57:23Z",
      "side": 1,
      "message": "This function is based on default implementation of bl1_plat_handle_post_image_load() from \n\\plat\\common\\plat_bl1_common.c, which interface is defined by:\nint bl1_plat_handle_post_image_load(unsigned int image_id);\nin \\include\\plat\\common\\platform.h",
      "parentUuid": "ad537b89_98f2d67b",
      "range": {
        "startLine": 77,
        "startChar": 4,
        "endLine": 77,
        "endChar": 35
      },
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f01c0322_966ea5a0",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2020-03-12T12:00:17Z",
      "side": 1,
      "message": "By setting this global variable here, it looks like you create a dependency between the \"mbedtls shared heap\" features and measured boot. Currently, it is not too important for Arm platform, as the shared heap is used by default. But this isn\u0027t the case for other platforms.\n\nI think it would be cleaner to just call FCONF_GET_PROPERTY(fconf, dtb, base_addr) from `arm_bl1_set_hash()`. In any case, you have to cast the dtb between uintptr_t \u003c-\u003e void* for `flush_dcache_range()` and the fdt lib function.",
      "range": {
        "startLine": 104,
        "startChar": 2,
        "endLine": 104,
        "endChar": 5
      },
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38c32402_bf2e3775",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-03-13T11:08:54Z",
      "side": 1,
      "message": "Do you also want to modify this function to call FCONF_GET_PROPERTY(fconf, dtb, base_addr)?\nWhat\u0027s wrong with cast?\nflush_dcache_range() uses uintptr_t tb_fw_cfg_dtb in this function and\nflush_dcache_range((uintptr_t)dtb in arm_bl1_set_bl2_hash()",
      "parentUuid": "f01c0322_966ea5a0",
      "range": {
        "startLine": 104,
        "startChar": 2,
        "endLine": 104,
        "endChar": 5
      },
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9352adbe_d962f465",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2020-03-13T11:54:41Z",
      "side": 1,
      "message": "My suggestion is to access directly the value with FCONF_GET_PROPERTY(fconf,dtb,base_addr) in both functions instead of using the global variable.\n\nNothing wrong with cast, we can\u0027t avoid them here.",
      "parentUuid": "38c32402_bf2e3775",
      "range": {
        "startLine": 104,
        "startChar": 2,
        "endLine": 104,
        "endChar": 5
      },
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b46a2b4e_511f5578",
        "filename": "plat/arm/common/arm_dyn_cfg.c",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2020-03-12T12:00:17Z",
      "side": 1,
      "message": "This proves that we have to start thinking of a \"SETTER\" macro for fconf. Introducing new read and write properties doesn\u0027t seem to scale properly with the current codebase.\n\nWe can leave this like this for now, but we will have to come with a better solution as we improve the fconf framework.",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 1
      },
      "revId": "0159eef6a3aabb52e81bd08472d2569050d3ee4c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}