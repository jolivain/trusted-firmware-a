{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c7c7726d_8b189913",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000337
      },
      "writtenOn": "2024-03-12T21:32:50Z",
      "side": 1,
      "message": "Hello Chris,\n\nI tried building recent TF-A with PTXdist and it resulted in make hanging, because the PTXdist recipe sets AS. I imagine other build systems like Yocto would also run in to this same issue.\n\nI fixed the first issue of the hang, but still run into issues, because of the assumption that AS must be a compiler. I think this assumption is not justified. What do you think?",
      "revId": "6496a208bb3984575649c7c79b064809ac70587a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6bfc5a4_dd34b58c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T10:56:48Z",
      "side": 1,
      "message": "Hi Ahmad, it\u0027s not so much an assumption as it is a requirement - all of our assembly files are preprocessed before they are assembled, so we cannot feed them directly to GAS (or any other assembler which does not preprocess), nor do we pass the appropriate GAS flags to match the C compiler (because we can simply use the CFLAGS). It would be a fairly significant effort to enable split them apart, but to my knowledge there is no technical advantage to doing so.\n\nI\u0027m not aware of any issues with Yocto (yet?); is this not something that can be fixed from PTXdist by either unsetting AS or setting AS\u003d$CC?",
      "parentUuid": "c7c7726d_8b189913",
      "revId": "6496a208bb3984575649c7c79b064809ac70587a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2adb77b8_1f109809",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000337
      },
      "writtenOn": "2024-04-02T14:11:17Z",
      "side": 1,
      "message": "Fair enough, but shouldn\u0027t TF-A just ignore AS then, if it\u0027s not going to use it as build systems have come to expect (i.e. override the assembler used).",
      "parentUuid": "a6bfc5a4_dd34b58c",
      "revId": "6496a208bb3984575649c7c79b064809ac70587a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99491834_5666e5d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T16:22:29Z",
      "side": 1,
      "message": "We only use `AS` it if it\u0027s been explicitly configured by the user (either via the environment or via the command line). It just happens that right now the set of supported assemblers matches the set of supported C compilers. Eventually, this will probably happen to the linker as well (moving from linking with LD to linking with GCC) as there are no benefits to using these tools directly, but quite a high maintenance cost.\n\nIn any case there\u0027s no situation where we can accept `as` as the value for `AS` - it\u0027s the assembler for the host machine (e.g. x86_64-linux-gnu) and not the target machine (e.g. aarch64-none-elf). You would need to use `aarch64-none-elf-as` even if TF-A did support it.",
      "parentUuid": "2adb77b8_1f109809",
      "revId": "6496a208bb3984575649c7c79b064809ac70587a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}