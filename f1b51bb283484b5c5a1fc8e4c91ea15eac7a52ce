{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "57e2919a_50089191",
        "filename": "lib/cpus/aarch64/cortex_a710.S",
        "patchSetId": 11
      },
      "lineNbr": 229,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2023-07-03T14:02:38Z",
      "side": 1,
      "message": "Hi Harrison, \nIn case of the second apply erratum, since we added NO_GET_CPU_REV, the LR will not be saved to x9.\n\t.if \\_chosen\n\t\tbl\terratum_\\_cpu\\()_\\_id\\()_wa\n\t\tmov\tx30, x9\nIn this case, would the correct value of LR be restored at the end?",
      "revId": "f1b51bb283484b5c5a1fc8e4c91ea15eac7a52ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db20c9b6_a1780cb5",
        "filename": "lib/cpus/aarch64/cortex_a710.S",
        "patchSetId": 11
      },
      "lineNbr": 229,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-07-04T16:50:25Z",
      "side": 1,
      "message": "Ah - yes, that\u0027s a good point, we have no guarantees that x9 contains the link register when we restore it. We have a couple of options to deal with this: conditionally restore the link register at the end of the errata sequence if `get_rev \u003d\u003d 1`; or, unconditionally cache the register in x9 at the start of the function. What do you think?",
      "parentUuid": "57e2919a_50089191",
      "revId": "f1b51bb283484b5c5a1fc8e4c91ea15eac7a52ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47c4b4b8_d7b3e3ee",
        "filename": "lib/cpus/aarch64/cortex_a710.S",
        "patchSetId": 11
      },
      "lineNbr": 229,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-07-05T08:07:27Z",
      "side": 1,
      "message": "First option should be sufficient, it\u0027s a single mov which doesn\u0027t matter in the grand scheme of things. You don\u0027t need the second as once written, x9 isn\u0027t used by anything else",
      "parentUuid": "db20c9b6_a1780cb5",
      "revId": "f1b51bb283484b5c5a1fc8e4c91ea15eac7a52ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7f68d93_f3bc0fa4",
        "filename": "lib/cpus/aarch64/cortex_a710.S",
        "patchSetId": 11
      },
      "lineNbr": 229,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2023-07-13T18:57:58Z",
      "side": 1,
      "message": "In this case, are we planning to leave it unchanged since x9 is not being used for any other operation? or do we plan to change the helper function, so it saves LR into x9 irrespective of the condition at the start of the function.",
      "parentUuid": "47c4b4b8_d7b3e3ee",
      "revId": "f1b51bb283484b5c5a1fc8e4c91ea15eac7a52ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "368fd9f6_cf98d79a",
        "filename": "lib/cpus/aarch64/cortex_a710.S",
        "patchSetId": 11
      },
      "lineNbr": 229,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-07-27T11:19:41Z",
      "side": 1,
      "message": "In the latest revision of the patch I\u0027ve preserved the previous behavior. That is, we always cache LR in x9 and restore it at the end of the workaround.",
      "parentUuid": "d7f68d93_f3bc0fa4",
      "revId": "f1b51bb283484b5c5a1fc8e4c91ea15eac7a52ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe3dbe2d_67013e91",
        "filename": "lib/cpus/aarch64/cortex_a710.S",
        "patchSetId": 11
      },
      "lineNbr": 229,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2023-08-07T16:28:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "368fd9f6_cf98d79a",
      "revId": "f1b51bb283484b5c5a1fc8e4c91ea15eac7a52ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}