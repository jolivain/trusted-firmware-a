{
  "comments": [
    {
      "key": {
        "uuid": "5585d6a7_46d7a106",
        "filename": "plat/meson/gxl/gxl_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2019-07-30T23:18:43Z",
      "side": 1,
      "message": "Is flush_dcache_range(cpu_mailbox_addr, sizeof(uint64_t)) not required ?",
      "revId": "8545b32115b48fb2a1e5794e83d9387369ff263c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6403e647_2ba8746b",
        "filename": "plat/meson/gxl/gxl_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-07-31T06:29:53Z",
      "side": 1,
      "message": "GXBB_PSCI_MAILBOX_BASE is within MAP_TZRAM ram range which is mapped as MT_DEVICE. I may be wrong but isn\u0027t MT_DEVICE memory non cacheable or is flush_dcache_range() still needed for such mapping ?",
      "parentUuid": "5585d6a7_46d7a106",
      "revId": "8545b32115b48fb2a1e5794e83d9387369ff263c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "885c8ee3_c5f172c3",
        "filename": "plat/meson/gxl/gxl_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2019-07-30T23:18:43Z",
      "side": 1,
      "message": "I am curious what does writing the special bytes \"0xFFFFFFFF\" and \"0\" to CPU specific mailbox address achieve? thanks",
      "revId": "8545b32115b48fb2a1e5794e83d9387369ff263c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b519a74_8cd1ec56",
        "filename": "plat/meson/gxl/gxl_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-07-31T06:29:53Z",
      "side": 1,
      "message": "So do I. All gxl code is based on reverse engineering effort, unfortunately I haven\u0027t found a proper meaning for those values out of my mind.\n\nOn the otherside setting this register to 0xFFFFFFFF does not seem mandatory. So I could either remove all the gxl_pm_state(mpidr, 0xFFFFFFFF) and replace the gxl_pm_state(mpidr, 0) with gxl_pm_warm_reset() for legibility sake. Or I could mimic the vendor\u0027s binary behavior for safety sake.\n\nEither ways are fine with me.",
      "parentUuid": "885c8ee3_c5f172c3",
      "revId": "8545b32115b48fb2a1e5794e83d9387369ff263c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}