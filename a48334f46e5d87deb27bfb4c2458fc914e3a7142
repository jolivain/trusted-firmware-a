{
  "comments": [
    {
      "key": {
        "uuid": "3db33120_63896ae6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-06T23:08:48Z",
      "side": 1,
      "message": "nit:Handle notification message to register secondary core entry point?",
      "revId": "a48334f46e5d87deb27bfb4c2458fc914e3a7142",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86b19c56_897f28d5",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 1
      },
      "lineNbr": 364,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-06T23:08:48Z",
      "side": 1,
      "message": "Need to check for overflow/underflow or do we assume load_address \u0026 binary size are trusted and hence cannot cause overflow? perhaps an assert(check_uptr_overflow(load_address + binary_size)) would be worthwhile to catch issues during dev.",
      "revId": "a48334f46e5d87deb27bfb4c2458fc914e3a7142",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f5b5a75_2cab2447",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 1
      },
      "lineNbr": 409,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-07-17T01:08:54Z",
      "side": 1,
      "message": "Can we please use a proper error code? e.g. -ENOTSUP, -EFAIL, etc.",
      "range": {
        "startLine": 409,
        "startChar": 8,
        "endLine": 409,
        "endChar": 10
      },
      "revId": "a48334f46e5d87deb27bfb4c2458fc914e3a7142",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5505e378_bba5d838",
        "filename": "services/std_svc/spmd/spmd_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-07-17T01:08:54Z",
      "side": 1,
      "message": "Please use proper error code",
      "range": {
        "startLine": 28,
        "startChar": 9,
        "endLine": 28,
        "endChar": 11
      },
      "revId": "a48334f46e5d87deb27bfb4c2458fc914e3a7142",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a507a78_7215c319",
        "filename": "services/std_svc/spmd/spmd_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-07-17T01:08:54Z",
      "side": 1,
      "message": "Please use proper error code",
      "range": {
        "startLine": 33,
        "startChar": 9,
        "endLine": 33,
        "endChar": 11
      },
      "revId": "a48334f46e5d87deb27bfb4c2458fc914e3a7142",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1d7021d_88157c0d",
        "filename": "services/std_svc/spmd/spmd_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-06T23:08:48Z",
      "side": 1,
      "message": "nit: this assumes or this checks?",
      "range": {
        "startLine": 37,
        "startChar": 9,
        "endLine": 37,
        "endChar": 16
      },
      "revId": "a48334f46e5d87deb27bfb4c2458fc914e3a7142",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faa0974c_b0ad3c9c",
        "filename": "services/std_svc/spmd/spmd_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-07-17T01:08:54Z",
      "side": 1,
      "message": "Please use proper error code",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 12
      },
      "revId": "a48334f46e5d87deb27bfb4c2458fc914e3a7142",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c7e13a8_d9f16c97",
        "filename": "services/std_svc/spmd/spmd_pm.c",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-06T23:08:48Z",
      "side": 1,
      "message": "entry_point should be validated to at least ensure it is not an EL3 address. We dont want SPMC lying to SPMD about where it wants to enter.",
      "revId": "a48334f46e5d87deb27bfb4c2458fc914e3a7142",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}