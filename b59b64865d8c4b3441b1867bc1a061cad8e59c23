{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4e67cfcc_7b08f35a",
        "filename": "plat/st/stm32mp1/bl2_plat_setup.c",
        "patchSetId": 6
      },
      "lineNbr": 472,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2021-12-13T10:19:40Z",
      "side": 1,
      "message": "As said in other file\u0027s comment, this code may go in a dedicated function in stm32mp1_private.c.",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0626a5f_fd95a93a",
        "filename": "plat/st/stm32mp1/bl2_plat_setup.c",
        "patchSetId": 6
      },
      "lineNbr": 472,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2021-12-13T10:25:49Z",
      "side": 1,
      "message": "Should there be some magic number, to check the index is correct? As 0 might be a correct index, but just because nothing has previously been written in the register",
      "parentUuid": "4e67cfcc_7b08f35a",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86cf9e7e_2d791b42",
        "filename": "plat/st/stm32mp1/bl2_plat_setup.c",
        "patchSetId": 6
      },
      "lineNbr": 472,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2021-12-13T10:53:58Z",
      "side": 1,
      "message": "\u003e Should there be some magic number, to check the index is correct? As 0 might be a correct index, but just because nothing has previously been written in the register\n\nplat_fwu_get_boot_idx should be returning the correct boot index. Maybe we can have a check here\n\nboot_idx \u003d plat_fwu_get_boot_idx();\nassert(boot_idx \u003c NR_OF_FW_BANKS);",
      "parentUuid": "b0626a5f_fd95a93a",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95616a8e_f5121ae3",
        "filename": "plat/st/stm32mp1/bl2_plat_setup.c",
        "patchSetId": 6
      },
      "lineNbr": 472,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2021-12-13T10:57:58Z",
      "side": 1,
      "message": "My main concern was about the 0 value. Does it means index 0, and is valid, or is it an invalid unfilled register? So should we have the upper bits of the register set with a magic number, and check this magic number, just to know that this index 0 is valid?",
      "parentUuid": "86cf9e7e_2d791b42",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "606c57cd_4e7cf4bc",
        "filename": "plat/st/stm32mp1/bl2_plat_setup.c",
        "patchSetId": 6
      },
      "lineNbr": 472,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2021-12-13T11:12:31Z",
      "side": 1,
      "message": "\u003e My main concern was about the 0 value. Does it means index 0, and is valid, or is it an invalid unfilled register? So should we have the upper bits of the register set with a magic number, and check this magic number, just to know that this index 0 is valid?\n\nYes, i understand what you were implying by using magic number. So, we do have bank 0 as a valid bank number. But I think there should not be a scenario where the default, reset value gets passed on. In case of an error, the plat_fwu_get_boot_idx function should return some value like -1. In that case, the following assert would fail.",
      "parentUuid": "95616a8e_f5121ae3",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b27acaa7_4912f3b9",
        "filename": "plat/st/stm32mp1/bl2_plat_setup.c",
        "patchSetId": 6
      },
      "lineNbr": 472,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2021-12-13T16:06:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "606c57cd_4e7cf4bc",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2315c610_ccc0d109",
        "filename": "plat/st/stm32mp1/include/boot_api.h",
        "patchSetId": 6
      },
      "lineNbr": 124,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2021-12-13T10:19:40Z",
      "side": 1,
      "message": "Please, do not modify this file, as it is the ROM code interface.\nIdeally this should go in plat/st/stm32mp1/stm32mp1_private.c, after the following patch is merged:\nhttps://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12988\n\nFor the register number, you should use 21, and name it TAMP_BOOT_COUNTER_BACKUP_REG_ID",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c2f342c_ac8da5c9",
        "filename": "plat/st/stm32mp1/include/boot_api.h",
        "patchSetId": 6
      },
      "lineNbr": 124,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2021-12-13T11:07:45Z",
      "side": 1,
      "message": "\u003e Please, do not modify this file, as it is the ROM code interface.\n\nOkay. I wasn\u0027t aware of this. The header file does not seem to have any comment to this effect. Also, the file has been modified earlier.\n\n\u003e Ideally this should go in plat/st/stm32mp1/stm32mp1_private.c, after the following patch is merged:\n\u003e https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12988\n\nOkay.\n\n\u003e \n\u003e For the register number, you should use 21, and name it TAMP_BOOT_COUNTER_BACKUP_REG_ID\n\nI think the register 21 is currently being used as a boot counter. A separate hitherto unused register would be needed to pass the boot index.",
      "parentUuid": "2315c610_ccc0d109",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d7ededb_c630f401",
        "filename": "plat/st/stm32mp1/include/boot_api.h",
        "patchSetId": 6
      },
      "lineNbr": 124,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2021-12-13T16:06:07Z",
      "side": 1,
      "message": "\u003e \u003e Please, do not modify this file, as it is the ROM code interface.\n\u003e \n\u003e Okay. I wasn\u0027t aware of this. The header file does not seem to have any comment to this effect. Also, the file has been modified earlier.\n\u003e \nYes, I agree it is not very clear. I cleaned some of the part not needed, and only took the features that were used in TF-A. I\u0027ll add a comment at the beginning of the file for this. \n\n\u003e \u003e Ideally this should go in plat/st/stm32mp1/stm32mp1_private.c, after the following patch is merged:\n\u003e \u003e https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12988\n\u003e \n\u003e Okay.\n\u003e \n\u003e \u003e \n\u003e \u003e For the register number, you should use 21, and name it TAMP_BOOT_COUNTER_BACKUP_REG_ID\n\u003e \n\u003e I think the register 21 is currently being used as a boot counter. A separate hitherto unused register would be needed to pass the boot index.\n\nWe discussed internally about that, and we\u0027d still prefer using register 21. We want to keep as much free backup registers as possible for the customers. Bootcount feature is not used in our kernel, and is used in U-Boot just for failed boot. This is then redundant with what is in FWU metadata. And  Patrick (ST U-Boot maintainer) doesn\u0027t see the case where both would be enabled at the same time.",
      "parentUuid": "3c2f342c_ac8da5c9",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdae15f8_a8afb7dd",
        "filename": "plat/st/stm32mp1/include/boot_api.h",
        "patchSetId": 6
      },
      "lineNbr": 124,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2021-12-14T07:18:20Z",
      "side": 1,
      "message": "\u003e \u003e \u003e Please, do not modify this file, as it is the ROM code interface.\n\u003e \u003e \n\u003e \u003e Okay. I wasn\u0027t aware of this. The header file does not seem to have any comment to this effect. Also, the file has been modified earlier.\n\u003e \u003e \n\u003e Yes, I agree it is not very clear. I cleaned some of the part not needed, and only took the features that were used in TF-A. I\u0027ll add a comment at the beginning of the file for this. \n\nOkay. I will move the definition as per your suggestion.\n\n\u003e \n\u003e \u003e \u003e Ideally this should go in plat/st/stm32mp1/stm32mp1_private.c, after the following patch is merged:\n\u003e \u003e \u003e https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12988\n\u003e \u003e \n\u003e \u003e Okay.\n\u003e \u003e \n\u003e \u003e \u003e \n\u003e \u003e \u003e For the register number, you should use 21, and name it TAMP_BOOT_COUNTER_BACKUP_REG_ID\n\u003e \u003e \n\u003e \u003e I think the register 21 is currently being used as a boot counter. A separate hitherto unused register would be needed to pass the boot index.\n\u003e \n\u003e We discussed internally about that, and we\u0027d still prefer using register 21. We want to keep as much free backup registers as possible for the customers. Bootcount feature is not used in our kernel, and is used in U-Boot just for failed boot. This is then redundant with what is in FWU metadata. And  Patrick (ST U-Boot maintainer) doesn\u0027t see the case where both would be enabled at the same time.\n\nOkay. Thanks for the explanation. So now that your patches are in flight, should i wait for them to get merged before sending the next version?",
      "parentUuid": "9d7ededb_c630f401",
      "revId": "b59b64865d8c4b3441b1867bc1a061cad8e59c23",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}