{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d9791df1_c10bdf2b",
        "filename": "plat/rockchip/rk3399/drivers/dram/suspend.c",
        "patchSetId": 1
      },
      "lineNbr": 791,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2021-04-13T22:08:30Z",
      "side": 1,
      "message": "Please don\u0027t just globally remove this for all platforms just because it didn\u0027t work for yours. We should try to figure out what the problem was for you and fix it, and if we can\u0027t do that we should make this configurable in a way that solves everyone\u0027s use case.\n\nThe way I think this works is that rockchip_soc_sys_pwr_dm_suspend() stores the old watchdog settings (including whether it was enabled or not) on the way down into suspend. Then here, very early in resume (before DRAM is up where we stored those settings), pmusram_enable_watchdog() unconditionally enables the watchdog and programs it to 8 seconds (which is useful in case anything hangs during DRAM resume). If all goes well, we should finish DRAM resume and get back into rockchip_soc_sys_pwr_dm_resume() long before those 8 seconds have passed, which will restore the previously stored watchdog settings (i.e. just disable it if it was previously disabled).\n\nIs it maybe possible that when you tested this you did something that prevented it from reaching rockchip_soc_sys_pwr_dm_resume() in time? Maybe put an extra delay or a lot of debugging output in somewhere that could have slowed it down too long?",
      "revId": "0ff42b17c6a71cd4cb0ca6a93a3cace744bf7ec8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "839f7782_7ad005e8",
        "filename": "plat/rockchip/rk3399/drivers/dram/suspend.c",
        "patchSetId": 1
      },
      "lineNbr": 837,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2021-04-13T22:08:30Z",
      "side": 1,
      "message": "(Gotta be honest, I know it\u0027s hard to do this without support from Rockchip and I understand it\u0027s better than LPDDR4 not working at all, but this doesn\u0027t look right at all. You\u0027re basically skipping the whole training step and then just running the controller with god knows what settings. Maybe this worked a few times in your test environment when you just suspend a device and resume it again a few seconds later, but I don\u0027t think it could really be reliable long-term when you suspend a device in one environment and resume it in another days later. Perhaps you comparing with the training code in U-Boot could help you figure out what is missing here?)",
      "revId": "0ff42b17c6a71cd4cb0ca6a93a3cace744bf7ec8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}