{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "442f12d0_ad0c705d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-26T16:43:03Z",
      "side": 1,
      "message": "Interesting, how confident are we that this works reliably? I guess the DRAM *controller* will be reset in both cases, it\u0027s just that the DRAM array itself will be unaffected by a pure SoC reset. Do we have any confirmation that a DRAM controller re-init does not affect the DRAM content?",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fc3b8cf_4706c78e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-28T22:11:45Z",
      "side": 1,
      "message": "The DRAM chip won\u0027t be in self-refresh mode when the SoC is reset (unless DRAM pad hold is enabled by default, and if pad hold drives self-refresh mode -- this might be worth checking), so you are relying on controller re-init completing before the cells drain. It would definitely be possible for crust to put the DRAM controller in self-refresh before triggering the watchdog, if needed.\n\nAs far as I know, the only destructive part of the DRAM init sequence is the pattern we write to detect the DRAM size.\n\nThat said, we should still implement PSCI_SYSTEM_RESET2 even without this specific motivation.",
      "parentUuid": "442f12d0_ad0c705d",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7bb9b79_ba964b4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-25T16:15:05Z",
      "side": 1,
      "message": "Thanks for implementing this. With the two comments resolved, this should be good to merge.",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bed16fc_6d97b58a",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-25T16:15:05Z",
      "side": 1,
      "message": "You need to check is_vendor and reset_type. This function only implements PSCI_RESET2_SYSTEM_WARM_RESET, so it should reject all other reset types. See css_system_reset2 for an example.",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc478f1b_87f783e5",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-28T22:11:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9bed16fc_6d97b58a",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4533e556_4bfe923f",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-26T16:43:03Z",
      "side": 1,
      "message": "Printing this error number is not meaningful, since you just set it. Look at the normal reset function above, and let \"ret\" receive the error number from the SCPI call. Then return the PSCI error code directly.",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42be8307_06752d3a",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-25T16:15:05Z",
      "side": 1,
      "message": "The documentation for the .system_reset2 hook says \"On success this function will not return.\" So this needs to call psci_power_down_wfi() in the success case.",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bd02cc9_42410d1f",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-28T22:11:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42be8307_06752d3a",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}