{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "442f12d0_ad0c705d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-26T16:43:03Z",
      "side": 1,
      "message": "Interesting, how confident are we that this works reliably? I guess the DRAM *controller* will be reset in both cases, it\u0027s just that the DRAM array itself will be unaffected by a pure SoC reset. Do we have any confirmation that a DRAM controller re-init does not affect the DRAM content?",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fc3b8cf_4706c78e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-28T22:11:45Z",
      "side": 1,
      "message": "The DRAM chip won\u0027t be in self-refresh mode when the SoC is reset (unless DRAM pad hold is enabled by default, and if pad hold drives self-refresh mode -- this might be worth checking), so you are relying on controller re-init completing before the cells drain. It would definitely be possible for crust to put the DRAM controller in self-refresh before triggering the watchdog, if needed.\n\nAs far as I know, the only destructive part of the DRAM init sequence is the pattern we write to detect the DRAM size.\n\nThat said, we should still implement PSCI_SYSTEM_RESET2 even without this specific motivation.",
      "parentUuid": "442f12d0_ad0c705d",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "804481fb_bec9edb8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-28T22:17:07Z",
      "side": 1,
      "message": "Yeah, I was already under the impression that preserving the DRAM content is more a lucky side effect rather than intentional.\nBut ACK for that this doesn\u0027t really affect this code (it\u0027s more on crust\u0027s plate, I guess). I was just curious, since I believe you (Samuel) brought this issue up a while ago, on the U-Boot patch.",
      "parentUuid": "3fc3b8cf_4706c78e",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f045d354_16ae3173",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1001087
      },
      "writtenOn": "2023-07-29T05:10:29Z",
      "side": 1,
      "message": "I\u0027ve used following tests in u-boot to check DRAM content after warm reset. U-boot was built with PSCI support.\n\n1) Boot into u-boot shell\n```\nsetexpr start 50000000\nsetexpr len   69000000\nsetexpr wrlen ${len} / 4\nmw ${start} deadbeef ${wrlen}\nreset -w\n```\n\n2) After warm reboot check DRAM content in u-boot shell\n```\nsetexpr start 50000000\nsetexpr len   69000000\nsetexpr end   ${start} + ${len}\nsetexpr step  100000\nsetexpr addr  ${start}\nwhile itest ${addr} \u003c ${end}; do \ncrc32 ${addr} ${step}\nsetexpr addr  ${addr} + ${step}\ndone\n```\n\nCheck modified blocks\n```\ncat serial.log | grep -a -v \u002795b418c5\u0027 | grep -a -i crc32\ncrc32 for 50000000 ... 500fffff \u003d\u003d\u003e 4c402aaa\ncrc32 for 80000000 ... 800fffff \u003d\u003d\u003e 86591e45\n```\n50000000 - 50002000 and 80000000 -80000020 these blocks are modified after warm reset. IIRC content of these blocks is changed after DDR init already.\n\nAdditionally on A64 with 2G of RAM words at following addresses were modified with\n\u0027aa55aa55\u0027 value by u-boot:\n     - 50000000\n     - 60000000\n     - 84000000\n     - 88000000\n     - 90000000\n     - A0000000\n     - A0000200\nPatch to fix that in u-boot is waiting for review.",
      "parentUuid": "442f12d0_ad0c705d",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a898343d_9f953c23",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-31T11:49:22Z",
      "side": 1,
      "message": "Alright, that looks indeed like the controller re-init keeps the DRAM content alive. In any case having this warm reset sounds useful, so as mentioned before: this patch is fine regardless.",
      "parentUuid": "f045d354_16ae3173",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7bb9b79_ba964b4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-25T16:15:05Z",
      "side": 1,
      "message": "Thanks for implementing this. With the two comments resolved, this should be good to merge.",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bed16fc_6d97b58a",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-25T16:15:05Z",
      "side": 1,
      "message": "You need to check is_vendor and reset_type. This function only implements PSCI_RESET2_SYSTEM_WARM_RESET, so it should reject all other reset types. See css_system_reset2 for an example.",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc478f1b_87f783e5",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-28T22:11:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9bed16fc_6d97b58a",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3631ec8_28b9c8ec",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1001087
      },
      "writtenOn": "2023-07-29T05:10:29Z",
      "side": 1,
      "message": "Thanks, updated. I\u0027ve used different return codes.\nAccording to porting-guide  if the ``reset_type`` is not supported, the\nfunction must return ``PSCI_E_NOT_SUPPORTED``. For architectural\nresets, all failures must return ``PSCI_E_INVALID_PARAMETERS``.",
      "parentUuid": "9bed16fc_6d97b58a",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88a483d3_dbd56766",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-31T11:49:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a3631ec8_28b9c8ec",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4533e556_4bfe923f",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-26T16:43:03Z",
      "side": 1,
      "message": "Printing this error number is not meaningful, since you just set it. Look at the normal reset function above, and let \"ret\" receive the error number from the SCPI call. Then return the PSCI error code directly.",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d516f76b_a2cb48ba",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1001087
      },
      "writtenOn": "2023-07-29T05:10:29Z",
      "side": 1,
      "message": "Thanks for catching that. Updated code.",
      "parentUuid": "4533e556_4bfe923f",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28d38b24_33946450",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-31T11:49:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d516f76b_a2cb48ba",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42be8307_06752d3a",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-25T16:15:05Z",
      "side": 1,
      "message": "The documentation for the .system_reset2 hook says \"On success this function will not return.\" So this needs to call psci_power_down_wfi() in the success case.",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bd02cc9_42410d1f",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000126
      },
      "writtenOn": "2023-07-28T22:11:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42be8307_06752d3a",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "124eefa6_9501344f",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1001087
      },
      "writtenOn": "2023-07-29T05:10:29Z",
      "side": 1,
      "message": "Fixed",
      "parentUuid": "42be8307_06752d3a",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2998d7ed_c06d7172",
        "filename": "plat/allwinner/common/sunxi_scpi_pm.c",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-07-31T11:49:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "124eefa6_9501344f",
      "revId": "0b09b76f567fc12244718bc56b97155640a9689c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}