{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "44a62da9_2110fb5c",
        "filename": "lib/extensions/trf/aarch32/trf.c",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-08-23T15:20:40Z",
      "side": 1,
      "message": "return in a void function seems odd.\n\nHow about \n\nif (trf_supported()) [\n   ....\n}",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 9
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09ee6a76_2bb4fa3e",
        "filename": "lib/extensions/trf/aarch32/trf.c",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-08-23T15:43:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "44a62da9_2110fb5c",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 9
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c11198fe_3f1b243c",
        "filename": "lib/extensions/trf/aarch64/trf.c",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-08-23T15:20:40Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 9
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c269539c_7d2334c5",
        "filename": "lib/extensions/trf/aarch64/trf.c",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-08-23T15:43:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c11198fe_3f1b243c",
      "range": {
        "startLine": 27,
        "startChar": 2,
        "endLine": 27,
        "endChar": 9
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68ff259d_cd4b0ac3",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-08-23T15:20:40Z",
      "side": 1,
      "message": "should there be two tabs to maintain alignment? Also, in the past there was an argument around code size by Andre for the GIC patches. The same argument applies here, doesn\u0027t it?",
      "range": {
        "startLine": 376,
        "startChar": 0,
        "endLine": 376,
        "endChar": 22
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44730d6e_1ea36eff",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-08-23T15:43:28Z",
      "side": 1,
      "message": "Let me fix the alignment. \nI enabled this option by default as the code covered under this option is not large enough (handling only a few trap registers). This approach is followed by some existing extensions also (for e.g. SVE.). \nIf some platforms worrying about the code size then this option can be disabled in the respective platform.mk file, right?",
      "parentUuid": "68ff259d_cd4b0ac3",
      "range": {
        "startLine": 376,
        "startChar": 0,
        "endLine": 376,
        "endChar": 22
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "819b4760_a0865b06",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2021-08-23T16:16:30Z",
      "side": 1,
      "message": "One can argue that platforms needing this feature can also enable it, if required. So we can keep the feature disabled by default.\n\nI have no issues either way. But we need to finalize the approach and then follow it for all features.",
      "parentUuid": "44730d6e_1ea36eff",
      "range": {
        "startLine": 376,
        "startChar": 0,
        "endLine": 376,
        "endChar": 22
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6c56f44_a88a28c6",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-08-23T18:08:32Z",
      "side": 1,
      "message": "In general, I believe we enable most features from NS side if the feature exist (unless there is any specific reason otherwise).\nIt is better to enable the feature by default and let the platform disable it if they wish for any specific reason.\n\nLet me discuss with this approach internally. If it turns out other way to do it then will post one more patch to disable these options by default.",
      "parentUuid": "819b4760_a0865b06",
      "range": {
        "startLine": 376,
        "startChar": 0,
        "endLine": 376,
        "endChar": 22
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dd27fba_e93d08a4",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2021-08-24T13:32:13Z",
      "side": 1,
      "message": "We came to below conclusion after discussing this internally:\n\nLet\u0027s disable the feature flag by default and let the platform decide to enable it. \nSome platforms may be sensitive to code size (even for few bytes) and don\u0027t need this pointless code for the execution if their CPU cores do not implement this feature.\nAs per Andre, the long-term implementation goal would be the CPU should enable automatically all the features that it comes with after its enablement. \n\nLet me update the patch series to disable all introduced build options by default. Let me know otherwise if you have a different opinion. Thanks!",
      "parentUuid": "a6c56f44_a88a28c6",
      "range": {
        "startLine": 376,
        "startChar": 0,
        "endLine": 376,
        "endChar": 22
      },
      "revId": "a701772040053afbf1cb21b567bb8ff04b28219a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}