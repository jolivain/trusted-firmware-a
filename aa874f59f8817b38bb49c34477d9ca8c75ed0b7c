{
  "comments": [
    {
      "key": {
        "uuid": "b00971ee_5962271b",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 69,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-02T08:46:51Z",
      "side": 1,
      "message": "Which affinity level is this about? max_cpu suggests it\u0027s Aff1, so shouldn\u0027t this be x1 then?",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ee76501_05fd37dd",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 69,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-02T11:33:37Z",
      "side": 1,
      "message": "You are right, I had x0 and x1 swapped.",
      "parentUuid": "b00971ee_5962271b",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5058f186_ff03b441",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-02T08:46:51Z",
      "side": 1,
      "message": "Why do you add 1 to the current value here? Shouldn\u0027t you just write the current value (x0/x1)?",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82fe4c6a_5a8dc8d0",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-02T11:33:37Z",
      "side": 1,
      "message": "The first draft that I wrote for this function kept the count rather than a max value. I guess I skipped that part when I refactored. Thanks for spotting it.",
      "parentUuid": "5058f186_ff03b441",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7bf21e7_f5a38e0c",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 82,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-02T08:46:51Z",
      "side": 1,
      "message": "Related to the comment above, I think this should be x0 then.",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5fee34a_f2af0d3d",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 82,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-02T11:33:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7bf21e7_f5a38e0c",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48355d84_669ba9bd",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-02T08:46:51Z",
      "side": 1,
      "message": "Still having the dmb here looks awkward. What is the memory operation after this barrier that we want to force an order on? Can you add a comment here explaining that?",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03ff3a3a_81baf0b4",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-02T11:33:37Z",
      "side": 1,
      "message": "The first patchset didn\u0027t include a barrier here as I never though it was necessary. A discussion on https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/4125/1/plat/arm/board/arm_fpga/aarch64/fpga_helpers.S#60 suggested that it was, so I added it although I still am not quite sure about it, so I was awaiting for more feedback on this.",
      "parentUuid": "48355d84_669ba9bd",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ec5891d_6eec8eaa",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-02T11:45:30Z",
      "side": 1,
      "message": "So first I thought it\u0027s not needed, at least not there, but I think there might be a case with  the memory accesses in spin_lock: we don\u0027t want to reorder that. But I am not sure if the sevl/wfe/casa already introduce some barrier here. Also: while \"sy\" is always a safe bet, I think you only need read/r-w and inner shareable, so \"dmb ishld\".\nAnd in any case it\u0027s complicated enough to warrant a comment on what this is ordering.",
      "parentUuid": "03ff3a3a_81baf0b4",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d4db6db_7e3f08ea",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-02T15:46:09Z",
      "side": 1,
      "message": "Agree with the comment about not using sy. You can use ish instead. ishld is not sufficient. The problem is we are trying to invent a spin lock here without using load acquire/store release. So, you really have to implement an arm v7 style spin lock here and ensure you have all the ordering guarantees that it provides. You need to ensure that all loads AND stores after line 125(after acquire occurred, acquire sematincs) occur only after b.ne 1b resolves architecturally to not taken and not before, and the way to do that is through a DMB ISH.",
      "parentUuid": "1ec5891d_6eec8eaa",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2517b99_a55a298b",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 136,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-02T08:46:51Z",
      "side": 1,
      "message": "Do we need this function? Wouldn\u0027t it be easier to generate the MPIDR value once, then explicitly use the respective ubfx instead of each call? It looks a bit awkward to have that function always called with a constant argument, then having basically a switch/case statement in the implementation below.",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fd30f25_034053d0",
        "filename": "plat/arm/board/arm_fpga/aarch64/fpga_helpers.S",
        "patchSetId": 13
      },
      "lineNbr": 136,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-02T11:33:37Z",
      "side": 1,
      "message": "Yes, you are all right. I removed it and I refactored the code.",
      "parentUuid": "f2517b99_a55a298b",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c79d9dc_314fccb1",
        "filename": "plat/arm/board/arm_fpga/fpga_bl31_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 46,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-07-02T08:46:51Z",
      "side": 1,
      "message": "Again, what is the memory operation that you want to order against? If you want to make sure the sev() isn\u0027t called before, you will probably need a DSB instead.",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "225ff415_b91897ef",
        "filename": "plat/arm/board/arm_fpga/fpga_bl31_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 46,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-07-02T11:33:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c79d9dc_314fccb1",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a71aec49_4b325043",
        "filename": "plat/arm/board/arm_fpga/fpga_bl31_setup.c",
        "patchSetId": 13
      },
      "lineNbr": 46,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-07-02T15:46:09Z",
      "side": 1,
      "message": "Thanks for pointing this out. It does two things. One it ensures that the write to secondary_core_spinlock is visible to all observers, for which dmbish would have been sufficient. But you do need a DSB to ensure SEV is not reordered before.",
      "parentUuid": "225ff415_b91897ef",
      "revId": "aa874f59f8817b38bb49c34477d9ca8c75ed0b7c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}