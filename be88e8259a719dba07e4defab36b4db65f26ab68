{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1982fda0_c87bbffa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-08-18T12:52:36Z",
      "side": 1,
      "message": "I wonder, most of the RAS oriented testing in TF-A CI relies on SError injection and none (to my knowledge) on Group0 interrupts qualified as RAS interrupt.\n1. is this specific to NV platforms to handle RAS errors through G0 interrupts? Isn\u0027t the SError signal used in those scenarios?\n2. If SError is handling, does it require a similar change around HANDLE_EA_FIRST option to trap SError at EL3 while normal world runs, but not while SEL1/0 runs (that would rather be trapped by SPMC and panic)?\n3. In light of 1., would it require adding RAS related tests using G0 interrupts?\n\nApologies if my questions look naive, I\u0027m discovering RAS handling quite a bit.",
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76d42b96_60c5450c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-08-18T12:55:16Z",
      "side": 1,
      "message": "*correction bullet 2\n2. If SError handling is required, is a similar change around HANDLE_EA_FIRST option required to trap SError at EL3 while normal world runs, but not while SEL1/0 runs (that would rather be trapped by SPMC and panic)?\nI have a change along those lines if this helps.",
      "parentUuid": "1982fda0_c87bbffa",
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2897c95c_93b04d91",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-08-22T04:24:20Z",
      "side": 1,
      "message": "For #1, complex SOCs have many errors that can only be reported by interrupts and may not translate to SErrors. I\u0027ve seen this in non NV SoCs as well and is not uncommon on server SoCs.\nFor #2, ideally yes, but in our design we have accepted that SErrors occurring during secure world execution is treated like a double fault and we are accepting of panic in SPMC. On Server SoCs, execution is expected to be almost always in normal world\nFor #3, same issue as espi. What G0 interrupt could i use on FVP? Happy to add a test where i have G0 interrupt routed to SEL1/EL0 in presence of SPMC. Thinking i could re-use the spm-mm interrupts.\n\nlet me know your thoughts.",
      "parentUuid": "76d42b96_60c5450c",
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b96d67af_569dd896",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-08-22T08:13:04Z",
      "side": 1,
      "message": "Ack #1.\nAck #2, presently when HANDLE_EA_EL3_FIRST\u003d1 execution traps to EL3 whichever running normal/secure(/realm!) world: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/lib/el3_runtime/aarch64/context_mgmt.c. The fix would be to dispatch this condition from setup_context_common to setup_ns_context (trap to EL3) and setup_realm_context/setup_secure_context (no trap to EL3). Anyways this is beyond the current change.\nOn #3.: it\u0027s not an immediate query wrt current change, more a general brainstorm on the test coverage. On FVP the trusted watchdog is able to generate secure interrupts. Tf-a-tests SPMC/secure interrupts tests configure them as Group1S. I\u0027m thinking we could have a dedicated test configuring those secure interrupts to Group0 specifically cover those cases. I\u0027m not sure about what spm-mm uses but worth a look.\nPlease resolve if you agree with above.",
      "parentUuid": "2897c95c_93b04d91",
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc24f5f9_65e372cc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-08-22T19:55:38Z",
      "side": 1,
      "message": "Olivier, for #2, great point. i thought the architecture when SPMC was present SEAs and SEIs are trapped to SPMC correct? If yes, i think the fix you are tlaking about is required. We do plan to have RAS_EXTENSIONS enabled, which means HANDLE_EA_EL3_FIRST has to be set (per the docs), and would trap to EL3. We have logic to know this occured in secure world and die but to keep it clean, it would be best to do what you said. Would you be opposed to me providing a patch for this?\n\nAck on #3. Let me explore spmm and G0 interrupt separately. Definitely need to add test for this.\n\nResolving.",
      "parentUuid": "b96d67af_569dd896",
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "096c8b60_24fe4d7d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-08-23T08:44:01Z",
      "side": 1,
      "message": "I think many of the build options in TF-A related to RAS handling need to be changed for it to work well with SPMC. I would suggest that instead of retrofitting new behavior to HANDLE_EA_EL3_FIRST, it would be cleaner to deprecate that flag and introduce something new to fit with the Firmware First model envisaged with SPM.",
      "parentUuid": "bc24f5f9_65e372cc",
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1447fb4_6d6176e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-08-26T18:17:18Z",
      "side": 1,
      "message": "Hi Soby, i agree. However, we need to redo that with CCA in mind as well. As a general rule of thumb, it appears that error handling (outside say GPT fault like things) dont fall in the purview of EL3 any more but some legacy platforms may still need to do such things. This seems to be a larger converstaion that we can perhaps debate about on the ml. For example, EHF doesnt really make sense anymore in a CCA + SPMC world, and similarly the whole RAS extensions lib does not belong in EL3 in those scenarios and need to be delegated to RMM or SPMC...\nNot proposing we make those changes, but what you are asking for appears to be of fairly large scope. le tme kniw if im misunderstanding.",
      "parentUuid": "096c8b60_24fe4d7d",
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcb31d51_5bb87efb",
        "filename": "include/bl31/interrupt_mgmt.h",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-08-18T12:52:36Z",
      "side": 1,
      "message": "nit: full stop",
      "range": {
        "startLine": 113,
        "startChar": 65,
        "endLine": 113,
        "endChar": 73
      },
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4034e751_cdc410a0",
        "filename": "include/bl31/interrupt_mgmt.h",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-08-22T22:23:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcb31d51_5bb87efb",
      "range": {
        "startLine": 113,
        "startChar": 65,
        "endLine": 113,
        "endChar": 73
      },
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c275ae3_2b854826",
        "filename": "include/bl31/interrupt_mgmt.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-08-18T12:52:36Z",
      "side": 1,
      "message": "This case actually covers 3 scenarios:\na. !EL3_EXCEPTION_HANDLING / SPMC not present\nb. EL3_EXCEPTION_HANDLING / SPMC is present\nc. !EL3_EXCEPTION_HANDLING / SPMC is present\n\na. is the legacy before SPMC existed.\nb. is the newly introduced scenario in context of EHF/RAS described by this comment.\nc. is the existing SPMC scenario we used so far.\n\nIs scenario c. still valid?\nShould a. and c. be documented here?\n\nShould https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/docs/getting_started/build-options.rst#n462 be amended?",
      "range": {
        "startLine": 119,
        "startChar": 3,
        "endLine": 122,
        "endChar": 21
      },
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a863ed87_0ed581b4",
        "filename": "include/bl31/interrupt_mgmt.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-08-22T04:24:20Z",
      "side": 1,
      "message": "Olivier, not sure i follow. The only change in behavior from what was previously there is when both SPD_spmd is defined and SPMC_SPM_AT_SEL2 is 1. in all other cases, the behavior is exactly the same as before.\nwhy would scenario C be invalid? SPMC can be present regardless of whether el3_EXCEPTION_HANDLING is defined or not, which is the purpose of this patch.\nI can add comments and changes to the doc to the effect of the new scenario, but all other scenarios remain exactly the same, so im not sure what you want me to document..",
      "parentUuid": "4c275ae3_2b854826",
      "range": {
        "startLine": 119,
        "startChar": 3,
        "endLine": 122,
        "endChar": 21
      },
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9749f958_a8d9536b",
        "filename": "include/bl31/interrupt_mgmt.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-08-22T08:13:04Z",
      "side": 1,
      "message": "\u003e in all other cases, the behavior is exactly the same as before.\nYes, agree. Apologies if this wasn\u0027t clear, and this is a nitpick. I\u0027m alluding to that comment added line 120 seems to suggest \u0027SPMC at S-EL2\u0027 is the most common condition to land here, whereas this code path is exercised by the vast majority of test cases when EL3_EXCEPTION_HANDLING\u003d0 (and SPMC not present case a.). So ideally the comment might be amended to mention this latter case.\n\u003e why would scenario C be invalid? SPMC can be present regardless of whether el3_EXCEPTION_HANDLING is defined or not, which is the purpose of this patch.\nAck.",
      "parentUuid": "a863ed87_0ed581b4",
      "range": {
        "startLine": 119,
        "startChar": 3,
        "endLine": 122,
        "endChar": 21
      },
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52ef1588_cf39667b",
        "filename": "include/bl31/interrupt_mgmt.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2022-08-22T22:23:45Z",
      "side": 1,
      "message": "Understood. Updated comment and docs.",
      "parentUuid": "9749f958_a8d9536b",
      "range": {
        "startLine": 119,
        "startChar": 3,
        "endLine": 122,
        "endChar": 21
      },
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f0016ad_6fae3c89",
        "filename": "include/bl31/interrupt_mgmt.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-08-23T06:43:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52ef1588_cf39667b",
      "range": {
        "startLine": 119,
        "startChar": 3,
        "endLine": 122,
        "endChar": 21
      },
      "revId": "be88e8259a719dba07e4defab36b4db65f26ab68",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}