{
  "comments": [
    {
      "key": {
        "uuid": "4d7091ac_44c3f9ee",
        "filename": "plat/arm/css/sgi/aarch64/sgi_helper.S",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-01-14T22:40:30Z",
      "side": 1,
      "message": "You can\u0027t directly get MAX_PE_PER_CHIP for a given Chip, ideally it should be\ncalculated in hierarchy.\nChipId -\u003e ClusterId -\u003e CPUId -\u003e PE\nSo formula should look lik\n((ChipId * MAX_CLUSTERS_PER_CHIP + ClusterId) *\n MAX_CPUS_PER_CLUSTER * MAX_PE_PER_CPU) +\n (CPUId * MAX_PE_PER_CPU) + ThreadId\n\nYou may refer to n1sdp impelementation",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 29
      },
      "revId": "9d75e305d104222fb33c0c0da242a563f38c6122",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c868b068_ca55f460",
        "filename": "plat/arm/css/sgi/aarch64/sgi_helper.S",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2020-01-15T04:35:50Z",
      "side": 1,
      "message": "CSS_SGI_MAX_PE_PER_CHIP is defined as a macro by the platform. Any technical reason why a platform cannot define this macro and use it? I understand that there are many ways of implementing this. But let\u0027s leave it upto the platform to choose the implementation that suits it best.",
      "parentUuid": "4d7091ac_44c3f9ee",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 29
      },
      "revId": "9d75e305d104222fb33c0c0da242a563f38c6122",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c7c493d_1792e972",
        "filename": "plat/arm/css/sgi/aarch64/sgi_helper.S",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-01-15T12:09:29Z",
      "side": 1,
      "message": "I agree that platform can choose to implement it in whatever way it wants to, even MAX_PE_PER_CLUSTER can be defined directly instead of using MAX_CPU_PER_CLUSTER and MAX_PE_PER_CPU to calculate it.\n\nThere is no technical reason as such but it will make the code more cleaner and reusable.\n\nFor example, You do not have to define RD_N1_EDGE_MAX_PE(and similary for other platform)  at all instead you can use PLAT_CORE_COUNT(which is a standard way to define max number of PE\u0027s)\nYou can define PLAT_CORE_COUNT as  CHIP_COUNT * CLUSTER_PER_CHIP * CORE_PER_CLUSTER * PE_PER_CPU.\n\nAnother example is when you change cpu from multi-threaded to a single threaded with current code you need to modify both MAX_PE_PER_CPU as well as MAX_PE_PER_CHIP while with suggested change you just need to modify MAX_PE_PER_CPU.\n\nPlease let me know the reason why you need CSS_SGI_MAX_PE_PER_CHIP? does it solves any special purpose ??",
      "parentUuid": "c868b068_ca55f460",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 29
      },
      "revId": "9d75e305d104222fb33c0c0da242a563f38c6122",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a23d94f_c2b033a1",
        "filename": "plat/arm/css/sgi/aarch64/sgi_helper.S",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2020-01-16T04:41:47Z",
      "side": 1,
      "message": "\u003e I agree that platform can choose to implement it in whatever way it\n \u003e wants to, even MAX_PE_PER_CLUSTER can be defined directly instead\n \u003e of using MAX_CPU_PER_CLUSTER and MAX_PE_PER_CPU to calculate it.\n\n\nWhen writing code, it is general practice to derive a value of a macro from one or more macros that are already defined.\n\n\n \u003e \n \u003e There is no technical reason as such but it will make the code more\n \u003e cleaner and reusable.\n \u003e \n\n\nThis patch works for single-chip (SGI-575, RD-N1-Edge, RD-Daniel), multi-threaded single-chip (RD-E1-Edge), dual-chip (RD-N1-Edge-X2) and quad-chip (RD-Daniel-XLR). So this is fully reusable across different platform configurations.\n\n\n \u003e For example, You do not have to define RD_N1_EDGE_MAX_PE(and\n \u003e similary for other platform)  at all instead you can use\n \u003e PLAT_CORE_COUNT(which is a standard way to define max number of\n \u003e PE\u0027s)\n\n\nPlease specify where is RD_N1_EDGE_MAX_PE is defined now. Searched TF source but did not find PLAT_CORE_COUNT as standard macro. Or not sure if I understood your comment.\n\n\n \u003e You can define PLAT_CORE_COUNT as  CHIP_COUNT * CLUSTER_PER_CHIP *\n \u003e CORE_PER_CLUSTER * PE_PER_CPU.\n \u003e \n \u003e Another example is when you change cpu from multi-threaded to a\n \u003e single threaded with current code you need to modify both\n \u003e MAX_PE_PER_CPU as well as MAX_PE_PER_CHIP while with suggested\n \u003e change you just need to modify MAX_PE_PER_CPU.\n\n\nThese macros are platform defined and added when a new board is introduced (defined only once). Existing upstreamed platforms do not change from multi-thread to single-thread.\n\n\n \u003e \n \u003e Please let me know the reason why you need CSS_SGI_MAX_PE_PER_CHIP?\n \u003e does it solves any special purpose ??\n\n\nThis is documented as comment in the file which this patch updates. Please have a look at the comment that explains how CSS_SGI_MAX_PE_PER_CHIP is being used.",
      "parentUuid": "6c7c493d_1792e972",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 29
      },
      "revId": "9d75e305d104222fb33c0c0da242a563f38c6122",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}