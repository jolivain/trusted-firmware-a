{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5ed5fea5_51428915",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-07-11T13:48:45Z",
      "side": 1,
      "message": "Could you provide some background information? We\u0027re doubling the size of the stack, which seems like a lot. Any specific code which needs such a high stack memory usage?",
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efadffc0_f5381abf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-07-11T19:19:35Z",
      "side": 1,
      "message": "We have increased stack size to accommodate mbedTSL support in BL31.",
      "parentUuid": "5ed5fea5_51428915",
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72ace8ea_72d26a41",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-07-13T11:30:55Z",
      "side": 1,
      "message": "Ah yes, that makes sense! Still, it might be worth adding a short sentence in the commit message,",
      "parentUuid": "efadffc0_f5381abf",
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3326864_696238a7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-07-15T08:26:18Z",
      "side": 1,
      "message": "Update the commit message to provide proper reasoning behind the increment of stack size.",
      "parentUuid": "72ace8ea_72d26a41",
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c904912_d234fb9f",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-07-11T13:48:45Z",
      "side": 1,
      "message": "If I am not mistaken, this way of increasing the stack will impact all CPUs. Say, I\u0027ve got an 8-core platform, we\u0027ll reserve 8 * 0x800 extra bytes for DRTM support right now. My understanding is that DRTM implementation is handled purely by the boot CPU (as all other CPUs are guaranteed to be powered off). Based on that, could we increase only the boot CPU\u0027s stack and get 7 * 0x800 bytes back?",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 254,
        "endChar": 26
      },
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a7e485a_03de888d",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-07-11T19:19:35Z",
      "side": 1,
      "message": "This is good point! Yes, DRTM implementation runs on single CPU so ideally stack size increment is needed only for single/boot CPU. Is there any specific code in our TF-A to achieve this?",
      "parentUuid": "2c904912_d234fb9f",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 254,
        "endChar": 26
      },
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acf1cb83_064fc93e",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-07-13T11:30:55Z",
      "side": 1,
      "message": "Unfortunately I am not aware of any specific code to tune the primary CPU stack independently of secondary stacks. We might have to design something from scratch.  Given the foreseen gain in memory footprint, I think it\u0027s worth investigating.",
      "parentUuid": "9a7e485a_03de888d",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 254,
        "endChar": 26
      },
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f2c0306_40f74b8c",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-07-13T11:57:43Z",
      "side": 1,
      "message": "I also did not see any existing mechanism in the code. Considering it has to be written from scratch, I think we should take this as a separate task.",
      "parentUuid": "acf1cb83_064fc93e",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 254,
        "endChar": 26
      },
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ab9ee7b_4b4ee200",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-07-18T07:31:28Z",
      "side": 1,
      "message": "I understand the worry about increasing the RAM footprint, on the other hand 1 page reserved for core stacks doesn\u0027t look unrealistic, given the complexity introduced by the DRTM sw stack (e.g. uses mBEDLTS). Also this might scale \u0027better\u0027 if willing to implement stack guard pages some day. I\u0027m not sure providing an asymmetric core stack space for primary vs secondary core is the most error prone design choice, e.g. when it comes for an early core startup code to compute its own stack address.",
      "parentUuid": "3f2c0306_40f74b8c",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 254,
        "endChar": 26
      },
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4f9075b_f557aa0a",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2022-07-18T18:27:58Z",
      "side": 1,
      "message": "Agree with Olivier. At this stage it is difficult to have a implementation to distinguish between primary and secondary cores specially when primary can be chosen randomly during each launch.",
      "parentUuid": "5ab9ee7b_4b4ee200",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 254,
        "endChar": 26
      },
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "734f17ec_ee029826",
        "filename": "plat/arm/board/fvp/include/platform_def.h",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-07-20T14:10:51Z",
      "side": 1,
      "message": "OK, let\u0027s put that on the list of future improvements and let\u0027s carry on with the current approach for the time being.\n\nI agree with you Olivier that we\u0027ll need to carefully review the stack setup code to remove any assumption about all stacks being the same size but still this sounds achievable to me.\n\nAs per my understanding, DRTM is mostly used on infra. platforms, which typically have many cores. Although 1 page does not sound like a lot for a stack, it adds up if you\u0027ve got 100 cores...",
      "parentUuid": "b4f9075b_f557aa0a",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 254,
        "endChar": 26
      },
      "revId": "8ce78c4e85e20e42ef8420c36724f30bbc163565",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}