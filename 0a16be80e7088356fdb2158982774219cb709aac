{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e68f0120_0200ba83",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1000798
      },
      "writtenOn": "2022-11-25T12:01:19Z",
      "side": 1,
      "message": "will it better to save original direct req src_id and use that for validation in response?\nhafnium follows the same approach, it saves src_id in runtime model",
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6da57675_48ac4e02",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-11-29T10:03:08Z",
      "side": 1,
      "message": "Yep that\u0027s a good point, I\u0027ll take a look and try to add something similar.",
      "parentUuid": "e68f0120_0200ba83",
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1443b2f_60b8b42d",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-11-30T10:17:23Z",
      "side": 1,
      "message": "This expression is heavy to read with all these parenthesis and ! at the beginning... I wonder if something like bellow would suffice, and would simplify?\n\nif ((secure_origin \u0026\u0026 src !\u003d spmc_get_current_sp_ctx()-\u003esp_id) || \n    (!secure_origin \u0026\u0026 !ffa_is_normal_world_id(src_id))) \n{ ... }",
      "range": {
        "startLine": 344,
        "startChar": 5,
        "endLine": 345,
        "endChar": 58
      },
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef44847_15ae683a",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-11-30T11:05:05Z",
      "side": 1,
      "message": "Sure, shall update this if that\u0027s easier to read.",
      "parentUuid": "d1443b2f_60b8b42d",
      "range": {
        "startLine": 344,
        "startChar": 5,
        "endLine": 345,
        "endChar": 58
      },
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d5fa7c8_7e1a7f5c",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1000798
      },
      "writtenOn": "2022-11-25T12:01:19Z",
      "side": 1,
      "message": "should we just return INVALID_PARAMETERS here, if des_id is spoofed? spec also says we should just return error",
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ce77a77_e0a474e2",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-11-29T10:03:08Z",
      "side": 1,
      "message": "The problem is that the handler in the LSP is not expecting a return code. I.e.from its perspective the response is the end/return of the function and there is no context to reenter and handle the error.\nThe thinking behind this was that if we have an entity in EL3 is not doing what it\u0027s supposed to do, then something quite serious is wrong and the best option would be to panic.\n\nWhat do you reckon?",
      "parentUuid": "1d5fa7c8_7e1a7f5c",
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fdc2e4f_7dd429ca",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-11-30T10:17:23Z",
      "side": 1,
      "message": "Thinking about this...\nI think Shruti\u0027s point is fare.\n\nI understood what you are saying @Marc. Would it better to have a panic inside the logical partition in that case?\n\nHaving this in a common area of code opens up to the risk Shruti mentioned... Granted we\u0027d still have a panic at EL3, but at least would be out of the code path between LP and non-LP endpoints?",
      "parentUuid": "5ce77a77_e0a474e2",
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c486be53_ed6fffbe",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1000290
      },
      "writtenOn": "2022-11-30T11:05:05Z",
      "side": 1,
      "message": "\u003e Would it better to have a panic inside the logical partition in that case?\nHmm.. ideally yes, however this change came from finding a mistake I\u0027d made in the LSP response. So I think that the SPMC needs to be responsible for performing this final check similar to how it would validate any other direct response.\n\n\u003e Having this in a common area of code opens up to the risk Shruti mentioned... Granted we\u0027d still have a panic at EL3, but at least would be out of the code path between LP and non-LP endpoints?\nI might be missing some design concept, however what would be the benefit of moving the panic location between the two entities if they both reside in EL3? My thinking here was that the panic is clear in its location and would hopefully be easy to debug the root cause.\n\nI\u0027m now trying to think whether I can refactor this flow further to remove the assumption that the LSP will respond directly to an SP. Therefore I\u0027m wondering if there is scope for moving the panic location to an exit/validation function if that would be preferred?",
      "parentUuid": "0fdc2e4f_7dd429ca",
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7d5cefe_35a27f83",
        "filename": "services/std_svc/spm/el3_spmc/spmc_main.c",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-04-24T10:01:37Z",
      "side": 1,
      "message": "Hi Marc,\nSorry for the late response.\nThe LSP is not part of the core implementation of this SPM solution. Whoever uses the SPM (IIUC) might provide its own solutions for a LSP, but in the general would be looking to use the SPM as is. So the LSP implementation seems more likely to change, and can be refactored to cater for other flows of error handling. The SPM is the core part of the system, and tampering with it would affect other components in the system.\nGranted that the architecture doesn\u0027t permit enforcing encapsulation/sandboxing the same S-EL2 implementation does, but at least would keep this implementation choicer coherent with other SPM implementations.",
      "parentUuid": "c486be53_ed6fffbe",
      "revId": "0a16be80e7088356fdb2158982774219cb709aac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}