{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5511e1b4_0bbe170a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2023-02-28T07:59:23Z",
      "side": 1,
      "message": "All CI+2 tests passed [ https://ci.trustedfirmware.org/job/tf-a-gerrit-tforg-l2/763/ ]",
      "revId": "ff491036603c34bd80137f5fd43878eae5585197",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "729e9f12_6ac2ca32",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 6
      },
      "lineNbr": 504,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2023-03-01T17:31:38Z",
      "side": 1,
      "message": "Hi,\n\nIMO, this makes a difficult choice of having to select brbe_enable from compilation flags and \nreading cpu reg, if we want to disable them then it may lead compilation errors or forcing to have dummy implementation of functions\n\n\nTrying to understand:\nWhy not enable it by default removing the compiler flag `ENABLE_BRBE_FOR_NS` and make it available based on outcome from `read_feat_brbe_id_field` ?",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 504,
        "endChar": 2
      },
      "revId": "ff491036603c34bd80137f5fd43878eae5585197",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a4af026_84d82bcc",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 6
      },
      "lineNbr": 504,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-03-01T18:18:30Z",
      "side": 1,
      "message": "\u003e may lead compilation errors or forcing to have dummy implementation of functions\nNot necessarily, because the compiler optimises the whole call away, and the symbol never makes it into the object file. Unless you compile with -O0, that is, which is a bit annoying, and indeed might force us to have stub functions. Meh.\n\n\u003e Why not enable it by default ....\nBecause this increases the memory footprint. Outside of the FVP world, a certain build only runs on a well known implementation, which either has or does not have the feature. For instance for a Juno (ARMv8.0), we don\u0027t need *any* of those extra features - and never will. Some platforms are very tight in their SRAM already, so cannot afford any extra instructions.",
      "parentUuid": "729e9f12_6ac2ca32",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 504,
        "endChar": 2
      },
      "revId": "ff491036603c34bd80137f5fd43878eae5585197",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0c02c19_7e27aec2",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 6
      },
      "lineNbr": 504,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2023-03-01T18:32:11Z",
      "side": 1,
      "message": "Thanks Andre for clarifying,\n\nIf memory foot print is is a concern then build flags to compile-out\nfunction call might have been a better choice rather than using build flags to decide run time?\n\nsince with debug builds with no optimisation might force us to have dummy implementation as in here:\nhttps://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/19803/1",
      "parentUuid": "4a4af026_84d82bcc",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 504,
        "endChar": 2
      },
      "revId": "ff491036603c34bd80137f5fd43878eae5585197",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}