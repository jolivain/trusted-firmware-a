{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "298f3da4_dd67219c",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-01-05T13:44:25Z",
      "side": 1,
      "message": "just to notify, there is an other patch, to clarify the description being used for Feature Detection mechanism under review. Please have a look and make changes as applicable.\nhttps://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/25653",
      "range": {
        "startLine": 313,
        "startChar": 5,
        "endLine": 313,
        "endChar": 25
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90601be8_a83fbf8c",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-08T21:05:48Z",
      "side": 1,
      "message": "Considering its still under review will have a watch on that if that\u0027s final and gets merged will update accordingly to avoid any doc build breakage for now.",
      "parentUuid": "298f3da4_dd67219c",
      "range": {
        "startLine": 313,
        "startChar": 5,
        "endLine": 313,
        "endChar": 25
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2a4dd2b_5f101d65",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-08T09:10:48Z",
      "side": 1,
      "message": "can this not move to CREATE_FEATURE_FUNCS?",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89340e6f_04bc648f",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-08T21:05:48Z",
      "side": 1,
      "message": "we have different levels of MTE compared to no mte so using vers\nto have \u0027read_func() \u003e\u003d (idvalue)\u0027 \n\n[..]\n\n/* Memory Tagging Extension is not implemented */\n#define MTE_UNIMPLEMENTED\tU(0)\n/* FEAT_MTE: MTE instructions accessible at EL0 are implemented */\n#define MTE_IMPLEMENTED_EL0\tU(1)\n/* FEAT_MTE2: Full MTE is implemented */\n#define MTE_IMPLEMENTED_ELX\tU(2)\n/*\n * FEAT_MTE3: MTE is implemented with support for\n * asymmetric Tag Check Fault handling\n */\n#define MTE_IMPLEMENTED_ASY\tU(3)\n\n[..]",
      "parentUuid": "f2a4dd2b_5f101d65",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "976c4f68_a89eda8a",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-09T08:45:46Z",
      "side": 1,
      "message": "sure, which is exactly what the CREATE_FEATURE_FUNCS macro is for, no? I\u0027m saying this because you can get rid of the get_armv8_5_mte_support() and have it be the standard nomenclature",
      "parentUuid": "89340e6f_04bc648f",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4743b9e4_2a24cdaa",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-11T19:54:22Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "976c4f68_a89eda8a",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6da49cfe_bfcaadb1",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-01-05T13:44:25Z",
      "side": 1,
      "message": "do we need the #if, when we already the helper c funtion ?\nis_feat_mte_supported() ? here",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59370869_de6f1db6",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-08T21:05:48Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6da49cfe_bfcaadb1",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "754129cc_29870844",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-01-03T12:35:40Z",
      "side": 1,
      "message": "braces around \u0027if\u0027",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48b50ee2_fe709d48",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-08T21:05:48Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "754129cc_29870844",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cebff82_447ef72f",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-01-03T12:35:40Z",
      "side": 1,
      "message": "I understand the reasoning behind your addition, but I\u0027m questioning whether it\u0027s necessary to maintain this, considering you\u0027ve already removed ``CTX_INCLUDE_MTE_REGS`` from both the documentation and the source code.\nIMO, platforms should embrace the new flag and adjust their build scripts once this patch is merged.",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4c75e2a_17e18193",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-08T09:10:48Z",
      "side": 1,
      "message": "that is correct as long as this is upstream. However, in the downstream not having this will immediately break the platform. TC is like this and this already happened with MPAM, luckily that flag has no functionality. So please keep this for a release or two (ideally proper deprecation process)",
      "parentUuid": "7cebff82_447ef72f",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d82302e_6ff8b537",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-08T21:05:48Z",
      "side": 1,
      "message": "Hi Manish,\n\nYes I had similar comments to Boyan\u0027s to ensure downstream is broken we need this for sometime.",
      "parentUuid": "a4c75e2a_17e18193",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5f810aa_ab2908b4",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-11T19:54:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d82302e_6ff8b537",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc59fb5c_6e4302d2",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-01-14T00:49:27Z",
      "side": 1,
      "message": "As I understand it, the issue appears to be confined to the downstream TC platform. If any downstream platforms wish to adopt this patch, I recommend updating their build scripts to incorporate the new build option. While I acknowledge that this change is benign, perpetuating this practice could establish it as a standard, necessitating ongoing support for future deprecated build flags in a similar manner. \nIs it feasible for the downstream TC platform to modify its build script once this patch has been consumed?\n\nOur current deprecation policy covers platforms[1], drivers[2], and interfaces[3], but there is currently no defined policy for deprecated build options. I\u0027m uncertain about the value of supporting it unless there are compelling reasons to do so.\n\n[1]: https://trustedfirmware-a.readthedocs.io/en/latest/plat/index.html#deprecated-platforms\n[2]: https://trustedfirmware-a.readthedocs.io/en/latest/about/release-information.html#removal-of-deprecated-interfaces\n[3]: https://trustedfirmware-a.readthedocs.io/en/latest/about/release-information.html#removal-of-deprecated-drivers",
      "parentUuid": "e5f810aa_ab2908b4",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9a38880_5df05da2",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-15T09:42:46Z",
      "side": 1,
      "message": "\u003e Is it feasible for the downstream TC platform to modify its build script once this patch has been consumed?\n\nIt\u0027s not about feasibility, it\u0027s about discoverability. Now that I\u0027ve caught that this is happening, fixing it is trivial. But I could have very well NOT have read this patch in review and it could have been missed. At that point things might keep working but without MTE, leading to a defect down the road with no clear way of preventing it.\n\n\u003e perpetuating this practice could establish it as a standard, necessitating ongoing support for future deprecated build flags in a similar manner.\n\nThis practice has been perpetuated for a while now - see ENABLE_FEAT_MPAM, ENABLE_SPE_FOR_NS, ENABLE_SVE_FOR_NS. While I was in the team we wanted to default SVE and SPE to 0 (similar change to this IMO) but the discussion ended at \"we shouldn\u0027t break downstream if we can help it\" and they were kept at 2. The migration to FEAT_DETECT did result in some breakage but the decision was to send a notification to the mailing list.\n\nLeaving whether this is a standard or not aside, it should be. Upstream breakage is unnecessary friction downstream and some policy (be it a mailing list notification or formal deprecation or something else entirely) should be followed. I\u0027m not saying not to do this, but I am saying to do it gradually so there\u0027s a chance to adapt.",
      "parentUuid": "cc59fb5c_6e4302d2",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "214d4305_9ebffdfc",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-01-15T13:17:36Z",
      "side": 1,
      "message": "\u003e This practice has been perpetuated for a while now - see ENABLE_FEAT_MPAM, ENABLE_SPE_FOR_NS, ENABLE_SVE_FOR_NS. While I was in the team we wanted to default SVE and SPE to 0 (similar change to this IMO) but the discussion ended at \"we shouldn\u0027t break downstream if we can help it\" and they were kept at 2. The migration to FEAT_DETECT did result in some breakage but the decision was to send a notification to the mailing list.\n\nIIUC, this patch focuses on renaming the build option from CTX_INCLUDE_MTE_REGS to ENABLE_FEAT_MTE, without altering its default behaviour (which remains set to 0). It is good to include a cautious note in the commit message, advising downstream platforms to adopt this new flag. Additionally, following conventional commit guidelines, it\u0027s suggested to label this as a BREAKING CHANGE. This must be enough to remove this warning. \nMy only concern is that if we retain this warning and various platforms begin adopting the new flag, then soon it will become dead code. There is no monitoring for the deprecated options for TF-A in the documentation. i.e. when it was deprecated and when to remove it. I don\u0027t see any need for this atleast for the current use case.\n\nTo ensure wider communication, we should send an email via the mailing list to notify all platform owners about this modification. JFYI, similar renaming has been undertaken in the past [1].\n\n[1]: https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/19276",
      "parentUuid": "a9a38880_5df05da2",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ca9b813_58d51df3",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-15T15:57:51Z",
      "side": 1,
      "message": "Sure, posting to the list would be fine, I just want to minimise disruption which this would cause until the flag is upstream",
      "parentUuid": "214d4305_9ebffdfc",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3f4ed7d_bd480c12",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-24T09:47:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ca9b813_58d51df3",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec644ff_2e99efad",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-08T09:10:48Z",
      "side": 1,
      "message": "nit: is this else needed?",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f447a1b2_16d5b230",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-08T21:05:48Z",
      "side": 1,
      "message": "IIUC, `is_feat_mte_supported` is available in arch32 then we should ensure `ENABLE_FEAT_MTE` is initialized to \u00270\u0027. \n\nso we ensure meet this macro expansion correctly:\n\n[..]\nif ((guard) \u003d\u003d FEAT_STATE_DISABLED)\n[...]",
      "parentUuid": "bec644ff_2e99efad",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c138d61b_1bd26037",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-09T08:45:46Z",
      "side": 1,
      "message": "then why not unconditionally default it to 0? The whole thing becomes \nENABLE_FEAT_MTE\t\t        ?\u003d\t0\nifeq (${ARCH},aarch32)\n        ifneq ($(or $(ENABLE_FEAT_MTE),0),0)\n               $(error ENABLE_FEAT_MTE is not supported for AArch32)\n        endif\nendif\n\nwith fewer lines",
      "parentUuid": "f447a1b2_16d5b230",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ecd1dd8_0f911dcc",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000923
      },
      "writtenOn": "2024-01-09T17:30:31Z",
      "side": 1,
      "message": "[...]\nENABLE_FEAT_MTE ?\u003d 0\nifeq (${ARCH},aarch32)\nifneq ($(or $(ENABLE_FEAT_MTE),0),0)\n[...]\n\nIf we set it to zero in first place how is it valid to compare against not zero later?",
      "parentUuid": "c138d61b_1bd26037",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc26fc0c_c27276c7",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-10T08:21:33Z",
      "side": 1,
      "message": "?\u003d only sets the variable if it hasn\u0027t been previously set so this should work as expected. :\u003d will also not set the variable if it was defined on the commandline so even that could be valid in limited circumstances.",
      "parentUuid": "3ecd1dd8_0f911dcc",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a64c856_a8c925b8",
        "filename": "make_helpers/arch_features.mk",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2024-01-23T10:25:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc26fc0c_c27276c7",
      "revId": "f14b18353b0bf3f9d21b27ad35d63c956821b2d6",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}