{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6d20c7b4_68508ad5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 9,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-12-18T13:04:06Z",
      "side": 1,
      "message": "For a feature...",
      "revId": "41d13233713b79a0c761fc2c314acd228dd508ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "119f8669_42ba4944",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-12-18T13:04:06Z",
      "side": 1,
      "message": "these words in brackets are confusing. I think they refer to the 1st part of the sentence \"Lower ELs generally use ID registers to check if a feature is present or not...\", but it sounds like it\u0027s referring to the 2nd part of the sentence. Also, readers will have no idea what feature detection mechanism you\u0027re referring to. How about:\n\"Lower ELs generally use ID registers or a feature detection mechanism to check if a feature is present or not before using it. EL3 Firmware uses a feature build macro to enable a feature for use by lower ELs.\"",
      "range": {
        "startLine": 13,
        "startChar": 17,
        "endLine": 14,
        "endChar": 20
      },
      "revId": "41d13233713b79a0c761fc2c314acd228dd508ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c56e2da9_534726d6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 16,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-12-18T13:04:06Z",
      "side": 1,
      "message": "This doesn\u0027t read well. Suggest:\n\"If a lower EL accesses a system register for a feature that EL3 FW is unaware of, EL3 traps the access and panics.\"",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 56
      },
      "revId": "41d13233713b79a0c761fc2c314acd228dd508ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d1c1992_b35084ad",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 9
      },
      "lineNbr": 380,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-12-18T13:04:06Z",
      "side": 1,
      "message": "Don\u0027t we want this enabled by default? Actually, do we want this on unconditionally? Under what circumstances should it be disabled? Saving a bit of code size doesn\u0027t seem like a strong reason to disable.",
      "revId": "41d13233713b79a0c761fc2c314acd228dd508ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "774bb39b_bea171bf",
        "filename": "make_helpers/defaults.mk",
        "patchSetId": 9
      },
      "lineNbr": 380,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2024-01-08T09:27:14Z",
      "side": 1,
      "message": "I agree that this should be default behaviour. I kept it under macro just as a starting point (not to impact few existing CIs which rely on the fact that lower EL exception will be caught in EL3). I will change this to default choice with modification to existing CI script as well.",
      "parentUuid": "8d1c1992_b35084ad",
      "revId": "41d13233713b79a0c761fc2c314acd228dd508ce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}