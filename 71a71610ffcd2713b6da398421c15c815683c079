{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6703134b_a9a5ecb7",
        "filename": "include/arch/aarch64/arch.h",
        "patchSetId": 9
      },
      "lineNbr": 315,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-05-31T09:05:49Z",
      "side": 1,
      "message": "This should be 0x2 as per Arm ARM.",
      "range": {
        "startLine": 315,
        "startChar": 53,
        "endLine": 315,
        "endChar": 54
      },
      "revId": "71a71610ffcd2713b6da398421c15c815683c079",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9558b27b_7021702b",
        "filename": "include/arch/aarch64/arch.h",
        "patchSetId": 9
      },
      "lineNbr": 315,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-05-31T10:11:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6703134b_a9a5ecb7",
      "range": {
        "startLine": 315,
        "startChar": 53,
        "endLine": 315,
        "endChar": 54
      },
      "revId": "71a71610ffcd2713b6da398421c15c815683c079",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ee461a9_fe8b13cf",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 9
      },
      "lineNbr": 685,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-05-31T09:05:49Z",
      "side": 1,
      "message": "The function in this file are a higher level abstraction than read accessors. The other examples above are actually helpers for higher level is_feat__xx_supported(). Perhaps these can move the xlat table file where this functionality is needed.",
      "revId": "71a71610ffcd2713b6da398421c15c815683c079",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e740923_27c59ee2",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 9
      },
      "lineNbr": 685,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2023-05-31T09:18:29Z",
      "side": 1,
      "message": "Both exist, you are right about the is_feat__xx_supported() functions, but they in turn depend on a read_feat_xxx_id_field() function. Some features do not have a compile flag so they can do away with the is_feat__xx_supported() functions. There is precedent for this: read_feat_sme_fa64_id_field(). This is the intended and correct place to put these as it gives a feature library for tf-a.",
      "parentUuid": "1ee461a9_fe8b13cf",
      "revId": "71a71610ffcd2713b6da398421c15c815683c079",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9209ccb7_c2ba3fdf",
        "filename": "include/arch/aarch64/arch_features.h",
        "patchSetId": 9
      },
      "lineNbr": 685,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-05-31T10:00:33Z",
      "side": 1,
      "message": "We should keep all those feature test functions in here. I have actually a patch https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/20621 that simplifies the creation of those functions, and that would rely on all of them being here.",
      "parentUuid": "1e740923_27c59ee2",
      "revId": "71a71610ffcd2713b6da398421c15c815683c079",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8a65153_8e8e2f53",
        "filename": "lib/xlat_tables_v2/aarch64/xlat_tables_arch.c",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-05-31T10:00:33Z",
      "side": 1,
      "message": "I don\u0027t think we should enumerate the currently supported bits. The ID registers guarantee compatibility, so we should just do a \"\u003e\u003d\" comparison. The negative encoding needs some attention here, though.",
      "revId": "71a71610ffcd2713b6da398421c15c815683c079",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "052df2e1_98549a00",
        "filename": "lib/xlat_tables_v2/aarch64/xlat_tables_arch.c",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-05-31T10:11:02Z",
      "side": 1,
      "message": "Actually, I thought the same as you, but because of the negative encoding and given the fact that there are only two bits supported here, I think the code was straighter forward this way. If it were more bits, then yes, I would agree than a \"\u003e\u003d\" comparison + the handling of the negative special case would have been more appropriate.",
      "parentUuid": "c8a65153_8e8e2f53",
      "revId": "71a71610ffcd2713b6da398421c15c815683c079",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18c9be94_8e01ec33",
        "filename": "lib/xlat_tables_v2/aarch64/xlat_tables_arch.c",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-05-31T11:07:28Z",
      "side": 1,
      "message": "But that\u0027s the whole point of this scheme: there might be new bits in the future, and then you need to revisit this code again. For a *user* of this feature (which xlat2 is), there is no need to be strict about what you support: you are supposed to use the \"\u003e\u003d\" comparison. The ARM ARM explicitly says so in section D19.1.3.\n\nI\u0027d say you do:\nreturn (tgranx \u003e\u003d ID_AA64MMFR0_EL1_TGRAN4_SUPPORTED) \u0026\u0026 (tgranx \u003c 8);",
      "parentUuid": "052df2e1_98549a00",
      "revId": "71a71610ffcd2713b6da398421c15c815683c079",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}