{
  "comments": [
    {
      "key": {
        "uuid": "adbd7afd_8b68d988",
        "filename": "drivers/arm/gic/v3/gicrv3_helpers.c",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-02-25T11:46:53Z",
      "side": 1,
      "message": "Comment mentions that this function is to clear the bit, but the function seems to be to set the bit?\nIn addition to that, wouldn\u0027t the call to gicr_write_icpendr0() set the rest of bits to 0? Is this the intended behavior?",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 166,
        "endChar": 1
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "954fdb7e_0fb88ed7",
        "filename": "drivers/arm/gic/v3/gicrv3_helpers.c",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-02-27T13:35:26Z",
      "side": 1,
      "message": "GICR_ICPENDR0, Interrupt Clear-Pending Register 0\n...\nClear_pending_bit\u003cx\u003e, bit [x], for x \u003d 0 to 31\nRemoves the pending state from interrupt number x. Reads and writes have the following behavior:\n0b0 If read, indicates that the corresponding interrupt is not pending.\nIf written, has no effect.\n0b1 If read, indicates that the corresponding interrupt is pending, or active and pending.\nIf written, changes the state of the corresponding interrupt from pending to inactive, or\nfrom active and pending to active.",
      "parentUuid": "adbd7afd_8b68d988",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 166,
        "endChar": 1
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "784ab114_baea95b1",
        "filename": "drivers/arm/gic/v3/gicv3_private.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-02-25T13:09:14Z",
      "side": 1,
      "message": "I am unwary of macros which define variable outside the parameter list. Makes the macro less re-usable. prefer to define this macro as \n\n#define\tCALC_BIT_NUM(REG, id)\tid \u0026 ((1U \u003c\u003c REG##_SHIFT) - 1U)\n\n#define\tGICD_OFFSET(REG, id)  GICD_##REG + ((id \u003e\u003e REG##_SHIFT) \u003c\u003c 2)\n\nSo the below macros become :\n\n#define GICD_READ(REG, base, id)\t\t\t\\\n\tdo {\t\t\t\t\t\t\\\n\t\tunsigned int offset \u003d GICD_OFFSET(REG, id);\t\t\\\n\t\treturn mmio_read_32(base + offset);\t\\\n\t} while (false)\n\nor even :\n\n#define GICD_READ(REG, base, id)    mmio_read_32(base + GICD_OFFSET(REG, id))",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 55
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b597895_530ca10c",
        "filename": "drivers/arm/gic/v3/gicv3_private.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-02-25T13:09:51Z",
      "side": 1,
      "message": "*wary",
      "parentUuid": "784ab114_baea95b1",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 55
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "190de8c0_5fc72cea",
        "filename": "drivers/arm/gic/v3/gicv3_private.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-02-25T14:03:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0b597895_530ca10c",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 55
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca2bcc9b_1b5f8123",
        "filename": "drivers/arm/gic/v3/gicv3_private.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-02-25T13:09:14Z",
      "side": 1,
      "message": "needs arguments to be wrapped by ().",
      "range": {
        "startLine": 33,
        "startChar": 36,
        "endLine": 33,
        "endChar": 38
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "881d6cc6_d55414c0",
        "filename": "drivers/arm/gic/v3/gicv3_private.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-02-25T14:03:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca2bcc9b_1b5f8123",
      "range": {
        "startLine": 33,
        "startChar": 36,
        "endLine": 33,
        "endChar": 38
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edf40bf2_149e3d88",
        "filename": "drivers/arm/gic/v3/gicv3_private.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-02-25T11:46:53Z",
      "side": 1,
      "message": "The comment says \"Get\" whilst the function is a set.",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 96,
        "endChar": 16
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3623ef15_71858932",
        "filename": "drivers/arm/gic/v3/gicv3_private.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-02-25T13:09:14Z",
      "side": 1,
      "message": "This can be done within the helper function rather than a macro. As long as the read and write accessors are implemented, the generic helps in utils_def.h can used to define the function. For example :\n\nunsigned int gicd_get_igrpmodr(uintptr_t base, unsigned int id)\n{\n\tunsigned int bit_num \u003d CALC_BIT_NUM(IGRPMODR, id);\n\tunsigned int reg_val \u003d GICD_READ(IGRPMODR, base, id);\n\n\treturn (reg_val \u003e\u003e bit_num) \u0026 0x1U;\n}\n\nI suspect you will also need variants for setting 2 bits as well. As long the basic accessors do the abstraction of int_id which is what you need, then the rest need not be hidden in macros. Also less custom macros is good for readability IMO.",
      "parentUuid": "edf40bf2_149e3d88",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 96,
        "endChar": 16
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "176ab33c_216265ee",
        "filename": "drivers/arm/gic/v3/gicv3_private.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-02-25T14:03:27Z",
      "side": 1,
      "message": "Yes, the comments for GICD_SET/GET_BIT are misplaced. Thanks, Javier.",
      "parentUuid": "3623ef15_71858932",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 96,
        "endChar": 16
      },
      "revId": "4ae8273081f3c4899ffb3624841f18067fdf5e86",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}