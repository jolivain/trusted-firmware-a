{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5ecf604a_3849ee1e",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-07-19T08:33:22Z",
      "side": 1,
      "message": "I\u0027m wondering if we can move these two checks to before the call to ``rmmd_setup``, instead of handling them within the function itself. \nIf we want to run the same software on platforms with RMM loaded, without RME feature, or with RME feature available but RMM is not loaded, it would be better to perform these checks at runtime using a function ``is_rmm_available`` or something similar and then call ``rmmd_setup`` accordingly. I might be overlooking the reason these checks were originally added to this function. What do you think?",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 218,
        "endChar": 2
      },
      "revId": "dfae9d5e6910321b5c230bd301b2af481ead1506",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4afae12_37d57ffe",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-07-19T14:34:41Z",
      "side": 1,
      "message": "I dont see the benefit of adding the checks before rmmd_setup(). If we add the checks outside, then that would be a departure from the way other functions are implemented. e.g. spmd_setup()",
      "parentUuid": "5ecf604a_3849ee1e",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 218,
        "endChar": 2
      },
      "revId": "dfae9d5e6910321b5c230bd301b2af481ead1506",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "791575b2_72b61e14",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2024-07-19T15:46:16Z",
      "side": 1,
      "message": "Ack,hereâ€™s my understanding and queries-\nI was initially wondering as to why the ``rmmd-setup`` function needs to be invoked when the RMM image is not loaded or the RME feature is unavailable. However, I understand that this approach differs from how we implemented ``spmd_setup`` invocation.\n\nBut what happens if there is a real failure in the ``rmmd-setup`` function when the RMM is loaded? Is it acceptable to continue in that case? We might need to handle the return value cautiously. For example, ``rmmd_setup`` could return a unique status \u0027skip\u0027 (indicating that the setup is being skipped because the RMM image is not loaded or the RME feature is not available) and then proceed. In all other failure cases, it should stop the boot process (i.e. when the RMM is loaded and the RME feature is available) right?",
      "parentUuid": "b4afae12_37d57ffe",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 218,
        "endChar": 2
      },
      "revId": "dfae9d5e6910321b5c230bd301b2af481ead1506",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "440cc51b_64392491",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-07-19T15:51:15Z",
      "side": 1,
      "message": "RMM or RMMD init failures are captured in the rmm_boot_failed flag and all future interaction with RMM is skipped, if this flag is false. We set it to true only after the init completes successfully. So, any failure during RMM boot will be treated as is RMM image is not present.",
      "parentUuid": "791575b2_72b61e14",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 218,
        "endChar": 2
      },
      "revId": "dfae9d5e6910321b5c230bd301b2af481ead1506",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5325d11_6f0a9e40",
        "filename": "services/std_svc/rmmd/rmmd_main.c",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-07-19T16:00:51Z",
      "side": 1,
      "message": "Correction - \"all future interaction with RMM is skipped, if this flag is true.\"",
      "parentUuid": "440cc51b_64392491",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 218,
        "endChar": 2
      },
      "revId": "dfae9d5e6910321b5c230bd301b2af481ead1506",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}