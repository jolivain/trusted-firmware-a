{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4849820d_137b79a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-07-06T11:17:16Z",
      "side": 1,
      "message": "\u003e Patch Set 8: Verified-1\n\u003e \n\u003e Build Failed \n\u003e \n\u003e https://jenkins.oss.arm.com/job/tf-gerrit-tforg-l2/2552/ : This Jenkins server is not publicly accessible. A core maintainer will let you know if this CI failure is blocking the merge of this patch.\n\nLooks like still there is one genuine failure [1] (same mentioned by Joanna previously) for test-config: spm-l2-boot-tests/fvp-default,fvp-spm-sve,fvp-default-sve:fvp-spm.sve+amu\n\n[1]: https://jenkins.oss.arm.com/job/tf-worker/3079509/artifact/run/uart0_full.txt/*view*/",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2334ffd_694bc983",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000686
      },
      "writtenOn": "2022-07-06T11:22:23Z",
      "side": 1,
      "message": "I\u0027m guessing either the test has some VL assumptions in it or there\u0027s a preexisting bug with larger vector lengths but without visibility of the actual test it\u0027s hard to comment. ",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e63f7cc0_55cf25b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000049
      },
      "writtenOn": "2022-07-06T13:11:36Z",
      "side": 1,
      "message": "Maksim, can you help on this fvp-spm.sve+amu test failure was it a test you added? Also seen in the latest OpenCI run below?\n\nThe second fvp-spm+romlib failure disappeared. When looking into that it seemed like the test was not getting the expected \"Finished\" text on the UART log so kept retrying every minute for a while before timing out. Was looking infra related on that one so I think we can ignore.",
      "parentUuid": "e2334ffd_694bc983",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "521080eb_842a3787",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2022-07-06T14:22:50Z",
      "side": 1,
      "message": "Looking into it.",
      "parentUuid": "e63f7cc0_55cf25b0",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b538b8d2_fbfbd48d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000049
      },
      "writtenOn": "2022-07-06T14:40:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "521080eb_842a3787",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9eff38f_a71043d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-07-07T13:38:20Z",
      "side": 1,
      "message": "We need a bit more thinking about this.\nThere must be a system wide contract for firmware on the implemented vector length e.g. there is a possible threat that one (S/R)EL2 manager component uses a lower vector length than NS EL2. There is no discovery for the max. vector length atm and buffers are often statically allocated in the firmware space. All firmware components may not afford the large space required for saving/restoring the SVE context (multiplied by the number of cores).\nThe initial design was that EL3 sets this contract for all lower ELs that is there is no data leak possible because all lower ELs are aligned on the max. size.\nThere are different solutions to this,\n-Either fix Hafnium to statically allocate buffers required for a 2048b vector length with the static RAM cost it implies.\n-Or supply the vector length value on a platform basis. Default to 2048b but can be overridden for specific components on the TF-A command line. SPM tests would run with this override to 512b.\n\n",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a038a41c_60db13d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-07-07T13:38:20Z",
      "side": 1,
      "message": "It fails for the good reason that SEL2 doesn\u0027t support more than a 512b vector length:\nhttps://git.trustedfirmware.org/hafnium/hafnium.git/tree/src/arch/aarch64/inc/hf/arch/sve.h#n12",
      "parentUuid": "b538b8d2_fbfbd48d",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cf0ca8a_dfaca343",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-07-07T13:43:23Z",
      "side": 1,
      "message": "TF-a-tests / SPM tests have this assumption as well:\nhttps://git.trustedfirmware.org/TF-A/tf-a-tests.git/tree/include/runtime_services/spm_common.h#n102",
      "parentUuid": "a038a41c_60db13d4",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fac8ae3_0f173392",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000686
      },
      "writtenOn": "2022-07-07T13:46:59Z",
      "side": 1,
      "message": "We could make this a build time configuration (either in the same way you currently have to manually turn on SVE support, which is itself a bit problematic, or with a default of 2048)? People building for use with firmware that has limitations could then override things to meet their needs and people just doing general architecture work wouldn\u0027t be impacted.\n\nIf excessive memory usage is a concern the current 512 bit allocation is already giving 50% overhead compared to most physical implementations.",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42e520ca_96144aaa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2022-07-07T13:51:34Z",
      "side": 1,
      "message": "Yes so I had this change at hand:\n\n diff --git a/Makefile b/Makefile\n index ee5e2e7a8..6ceec5310 100644\n --- a/Makefile\n +++ b/Makefile\n @@ -1085,6 +1085,7 @@ $(eval $(call assert_numerics,\\\n          RAS_EXTENSION \\\n          TWED_DELAY \\\n          ENABLE_FEAT_TWED \\\n +        SVE_VECTOR_LEN \\\n  )))\n  \n  ifdef KEY_SIZE\n @@ -1209,6 +1210,10 @@ $(eval $(call add_defines,\\\n          ENABLE_FEAT_TWED \\\n  )))\n  \n +ifeq ($(ENABLE_SVE_FOR_NS),1)\n +$(eval $(call add_define,SVE_VECTOR_LEN))\n +endif\n +\n  ifeq (${SANITIZE_UB},trap)\n          $(eval $(call add_define,MONITOR_TRAPS))\n  endif\n diff --git a/lib/extensions/sve/sve.c b/lib/extensions/sve/sve.c\n index aa8904b9b..d7aa98827 100644\n --- a/lib/extensions/sve/sve.c\n +++ b/lib/extensions/sve/sve.c\n @@ -28,6 +28,7 @@ static bool sve_supported(void)\n  void sve_enable(cpu_context_t *context)\n  {\n          u_register_t cptr_el3;\n +       uint32_t zcr_el3_len;\n  \n         if (!sve_supported()) {\n                 return;\n @@ -40,8 +41,10 @@ void sve_enable(cpu_context_t *context)\n         write_ctx_reg(get_el3state_ctx(context), CTX_CPTR_EL3, cptr_el3);\n  \n         /* Restrict maximum SVE vector length (SVE_VECTOR_LENGTH+1) * 128. */\n -       write_ctx_reg(get_el3state_ctx(context), CTX_ZCR_EL3,\n -               (ZCR_EL3_LEN_MASK \u0026 CONVERT_SVE_LENGTH(512)));\n +       zcr_el3_len \u003d ZCR_EL3_LEN_MASK \u0026 CONVERT_SVE_LENGTH(SVE_VECTOR_LEN);\n +       write_ctx_reg(get_el3state_ctx(context), CTX_ZCR_EL3, zcr_el3_len);\n +       NOTICE(\"SVE_VECTOR_LEN\u003d%u ZCR_EL3.LEN\u003d%x\\n\",\n +               SVE_VECTOR_LEN, zcr_el3_len);\n  }\n  \n  void sve_disable(cpu_context_t *context)\n diff --git a/make_helpers/defaults.mk b/make_helpers/defaults.mk\n index fab6bf6da..fa6940a25 100644\n --- a/make_helpers/defaults.mk\n +++ b/make_helpers/defaults.mk\n @@ -367,6 +367,9 @@ AMU_RESTRICT_COUNTERS               :\u003d 0\n  \n  # Enable SVE for non-secure world by default\n  ENABLE_SVE_FOR_NS              :\u003d 1\n +\n +SVE_VECTOR_LEN                 :\u003d 2048\n +\n  # SVE is only supported on AArch64 so disable it on AArch32.\n  ifeq (${ARCH},aarch32)\n         override ENABLE_SVE_FOR_NS      :\u003d 0",
      "parentUuid": "8fac8ae3_0f173392",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da360bc9_20f1def9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000686
      },
      "writtenOn": "2022-07-07T14:10:05Z",
      "side": 1,
      "message": "The tests should probably just be fixed to support up to the architecture limit, only testing a subset seems like a landmine waiting to happen and it\u0027s obviously an error in the test to explode on larger vector lengths. The resource consumption concerns that might apply to firmware intended to run in normal operation don\u0027t apply to tests.\n\nActually, looking at the tests now I\u0027m not clear that they work for any vector length other than 512 bits - do they work on current hardware with 128 or 256 bit VLs? AFAICT they memset() a buffer allocated for 512 bit vectors to a value, load the registers from that buffer, do a call and then read the registers back into a second buffer and do a memcmp() based on a compile time selected vector size. That should fail in the vector length is not 512 bits since the read will only read as much data as is in the registers and leave the remainder of the read buffer uninitialised.",
      "parentUuid": "8cf0ca8a_dfaca343",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d995fb9e_22b8369c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000686
      },
      "writtenOn": "2022-07-07T14:10:05Z",
      "side": 1,
      "message": "One other thing to note here is that this will need solving at some point - there is one 512 bit implementation already,",
      "parentUuid": "8fac8ae3_0f173392",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f769ee0d_c5a47031",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000686
      },
      "writtenOn": "2022-07-07T15:23:12Z",
      "side": 1,
      "message": "https://review.trustedfirmware.org/c/TF-A/tf-a-tests/+/15850",
      "revId": "443072c51c182db7e8420ee57d054ac9e5a23248",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}