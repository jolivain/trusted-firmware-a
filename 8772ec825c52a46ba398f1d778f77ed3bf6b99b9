{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "52aeb565_948e358e",
        "filename": "plat/st/common/bl2_io_storage.c",
        "patchSetId": 9
      },
      "lineNbr": 496,
      "author": {
        "id": 1000144
      },
      "writtenOn": "2022-01-12T08:31:38Z",
      "side": 1,
      "message": "My fear with this is an incorrect FIP (meaning issue in loaded binaries) will end with an infinite loop as you still go with the active-\u003eindex.\nYou said that no mechanism but we have watchdog on the platform which must be used and the boot info (now only printed) will allow to avoid such issue.\nI\u0027m OK with the Auth failure that is not saved, but the watchdog is a present known reason that can be used to get the correct boot index.\nWhat about the TRIAL state that must be used to avoid NV counter to be updated?",
      "range": {
        "startLine": 487,
        "startChar": 0,
        "endLine": 496,
        "endChar": 3
      },
      "revId": "8772ec825c52a46ba398f1d778f77ed3bf6b99b9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9ba5dd0_93714e64",
        "filename": "plat/st/common/bl2_io_storage.c",
        "patchSetId": 9
      },
      "lineNbr": 496,
      "author": {
        "id": 1000144
      },
      "writtenOn": "2022-01-14T07:36:30Z",
      "side": 1,
      "message": "As per internal discussion, the watchdog can be treated in another later patch here.\nYesterday tech forum talk about the NV counter, seems to be on going, you can discard this comment.",
      "parentUuid": "52aeb565_948e358e",
      "range": {
        "startLine": 487,
        "startChar": 0,
        "endLine": 496,
        "endChar": 3
      },
      "revId": "8772ec825c52a46ba398f1d778f77ed3bf6b99b9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fb0cf94_3dbc310c",
        "filename": "plat/st/common/bl2_io_storage.c",
        "patchSetId": 9
      },
      "lineNbr": 527,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-01-14T13:26:22Z",
      "side": 1,
      "message": "Following discussion from https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/12576/comment/e78b32be_679150d0/,\nI think this function should be plat_fwu_get_active_index() (or even fwu_get_active_index()).",
      "range": {
        "startLine": 527,
        "startChar": 0,
        "endLine": 527,
        "endChar": 36
      },
      "revId": "8772ec825c52a46ba398f1d778f77ed3bf6b99b9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0ebbfd8_ae6ed063",
        "filename": "plat/st/common/bl2_io_storage.c",
        "patchSetId": 9
      },
      "lineNbr": 527,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2022-01-17T06:10:02Z",
      "side": 1,
      "message": "I have replied on that discussion on why the function was named plat_fwu_get_boot_idx. Please let me know if you are fine with the reasoning that I provided.",
      "parentUuid": "8fb0cf94_3dbc310c",
      "range": {
        "startLine": 527,
        "startChar": 0,
        "endLine": 527,
        "endChar": 36
      },
      "revId": "8772ec825c52a46ba398f1d778f77ed3bf6b99b9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f7a3ea1_83d9fe03",
        "filename": "plat/st/common/bl2_io_storage.c",
        "patchSetId": 9
      },
      "lineNbr": 536,
      "author": {
        "id": 1000144
      },
      "writtenOn": "2022-01-12T08:09:08Z",
      "side": 1,
      "message": "Your loop seems strange here. If the NR_OF_IMAGES_IN_FW_BANK is \u003e1, the first image checked is not FIP, you are going to panic.\nI think this is not the expected behavior.",
      "range": {
        "startLine": 530,
        "startChar": 1,
        "endLine": 536,
        "endChar": 3
      },
      "revId": "8772ec825c52a46ba398f1d778f77ed3bf6b99b9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c75810f_301903cc",
        "filename": "plat/st/common/bl2_io_storage.c",
        "patchSetId": 9
      },
      "lineNbr": 536,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-01-14T13:26:22Z",
      "side": 1,
      "message": "The image found will always be a FIP image (more precisely a fwu update-able image).\nYou can see it is found from the UUID read from meatadata. This UUID is expected to relate to our update-able FIP image unless what metadata are corrupted and BL2 can use the info (but try a revert to previous_active_index).\n\nUpon such failure, maybe the code could decide straight to fallback to the previous_active_index bank. But I understand your implementation here expects panic() to trigger a reboot (possibly though a HW watchdog) and that at reboot, BL2 will decide to use previous_active_index. Such implementation is currently missing. Maybe in a next change (boot_idx (after line 527) would be loaded with metadata-\u003eprevious_active_index upon return code of a platform specific stm32mp1_reboot_on_watchdog() or like function).",
      "parentUuid": "1f7a3ea1_83d9fe03",
      "range": {
        "startLine": 530,
        "startChar": 1,
        "endLine": 536,
        "endChar": 3
      },
      "revId": "8772ec825c52a46ba398f1d778f77ed3bf6b99b9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5468aedf_25980b65",
        "filename": "plat/st/common/bl2_io_storage.c",
        "patchSetId": 9
      },
      "lineNbr": 536,
      "author": {
        "id": 1000661
      },
      "writtenOn": "2022-01-17T06:10:02Z",
      "side": 1,
      "message": "Yes, this should be the behaviour once watchdog support is implemented. For now, the platform will simply hang.",
      "parentUuid": "3c75810f_301903cc",
      "range": {
        "startLine": 530,
        "startChar": 1,
        "endLine": 536,
        "endChar": 3
      },
      "revId": "8772ec825c52a46ba398f1d778f77ed3bf6b99b9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}