{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d604aadd_408cd719",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T14:44:33Z",
      "side": 1,
      "message": "Just curious: What\u0027s the motivation for this patch? Is it only to increase compliance with RFC 8250 (which in itself is a good thing!), or did you also find issues in practice? If it\u0027s the latter, could these issues be exploited in any way to undermine the security of the firmware?\n\nAlso, where is this requirement spelled out in RFC 8250? I could not find it...",
      "revId": "40a4c676dc30abfa7992b376bd18e9699665e2a8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccf89a7f_2e28db4e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-01T18:51:25Z",
      "side": 1,
      "message": "\u003e Just curious: What\u0027s the motivation for this patch? Is it only to increase compliance with RFC 8250 (which in itself is a good thing!), or did you also find issues in practice?\n\nIt’s a combination of RFC5280 compliance and wanting to reject malformed input early, so as to reduce the likelihood that future code stumbles over it.\n\n\u003e If it\u0027s the latter, could these issues be exploited in any way to undermine the security of the firmware?\n\nNone of the issues I found could be exploited.\n\n\u003e Also, where is this requirement spelled out in RFC 8250? I could not find it...\n\nIt is “if present, version MUST be v3” in RFC5280 §4.1.",
      "parentUuid": "d604aadd_408cd719",
      "revId": "40a4c676dc30abfa7992b376bd18e9699665e2a8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de6a8109_d60c2a84",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-07T14:31:07Z",
      "side": 1,
      "message": "\u003e \u003e Just curious: What\u0027s the motivation for this patch? Is it only to increase compliance with RFC 8250 (which in itself is a good thing!), or did you also find issues in practice?\n\u003e \n\u003e It’s a combination of RFC5280 compliance and wanting to reject malformed input early, so as to reduce the likelihood that future code stumbles over it.\n\nFair enough.\n\n\u003e \u003e If it\u0027s the latter, could these issues be exploited in any way to undermine the security of the firmware?\n\u003e \n\u003e None of the issues I found could be exploited.\n\nThat\u0027s good to hear!\n\n\u003e \u003e Also, where is this requirement spelled out in RFC 8250? I could not find it...\n\u003e \n\u003e It is “if present, version MUST be v3” in RFC5280 §4.1.\n\nThank you but I believe that this sentence justifies your previous patch (fix(auth): Only accept v3 X.509 certificates) rather than the present one. I was asking about the place where the RFC says that \"The extensions must use all remaining bytes in the TBSCertificate\".\n\nI suppose this might just be because the \"Extensions\" field is the last one in a TBSCertificate sequence, and the ASN.1 grammar does not allow for any padding between fields, as everything is assumed to be consecutive in the absence of a header/top-level metadata?",
      "parentUuid": "ccf89a7f_2e28db4e",
      "revId": "40a4c676dc30abfa7992b376bd18e9699665e2a8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e00a4df_0a17a4ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-07T17:47:44Z",
      "side": 1,
      "message": "\u003e \u003e \u003e If it\u0027s the latter, could these issues be exploited in any way to undermine the security of the firmware?\n\u003e \u003e \n\u003e \u003e None of the issues I found could be exploited.\n\u003e \n\u003e That\u0027s good to hear!\n\nThanks!  The ASN.1 code seems to be of pretty good quality.  I was concerned that there was a buffer overflow somewhere (NXP had had such a problem in the past) and was glad to find that there was not any.\n\n\u003e I suppose this might just be because the \"Extensions\" field is the last one in a TBSCertificate sequence, and the ASN.1 grammar does not allow for any padding between fields, as everything is assumed to be consecutive in the absence of a header/top-level metadata?\n\nPretty much.  DER does not allow padding in general, but the ends of constructed tags are the only places where it must be checked for explicitly.  C’s lack of lambdas/closures makes this error-prone.",
      "parentUuid": "ccf89a7f_2e28db4e",
      "revId": "40a4c676dc30abfa7992b376bd18e9699665e2a8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f6d79be_3e15d1ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-08T12:58:01Z",
      "side": 1,
      "message": "\u003e \u003e \u003e \u003e If it\u0027s the latter, could these issues be exploited in any way to undermine the security of the firmware?\n\u003e \u003e \u003e \n\u003e \u003e \u003e None of the issues I found could be exploited.\n\u003e \u003e \n\u003e \u003e That\u0027s good to hear!\n\u003e \n\u003e Thanks!  The ASN.1 code seems to be of pretty good quality.  I was concerned that there was a buffer overflow somewhere (NXP had had such a problem in the past) and was glad to find that there was not any.\n\nYes, although this code could do with some refactoring IMO, as I find it hard to keep track of the various \u0027p\u0027 and \u0027end\u0027 pointers getting updated throughout cert_parse() but at least it seems to check all corner cases we should care about.\n\n\u003e \u003e I suppose this might just be because the \"Extensions\" field is the last one in a TBSCertificate sequence, and the ASN.1 grammar does not allow for any padding between fields, as everything is assumed to be consecutive in the absence of a header/top-level metadata?\n\u003e \n\u003e Pretty much.  DER does not allow padding in general, but the ends of constructed tags are the only places where it must be checked for explicitly.  C’s lack of lambdas/closures makes this error-prone.\n\nOK thanks. Still, even in C, I think we could make it less error-prone by having the right helper functions to deal with this, rather than duplicating the code for all ends of constructed tags. But that\u0027s a task for another day.",
      "parentUuid": "9e00a4df_0a17a4ce",
      "revId": "40a4c676dc30abfa7992b376bd18e9699665e2a8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3497a9ef_f36a9be0",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 310,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-01T14:44:33Z",
      "side": 1,
      "message": "Please enclose each of the conditions in parentheses, like so:\n\n if ((ret !\u003d 0) || (len !\u003d end - p))\n\nThis is to follow MISRA guidelines, which TF-A project endeavours to obey.",
      "range": {
        "startLine": 310,
        "startChar": 1,
        "endLine": 310,
        "endChar": 32
      },
      "revId": "40a4c676dc30abfa7992b376bd18e9699665e2a8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f97785aa_741d664d",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 310,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-12-07T14:32:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3497a9ef_f36a9be0",
      "range": {
        "startLine": 310,
        "startChar": 1,
        "endLine": 310,
        "endChar": 32
      },
      "revId": "40a4c676dc30abfa7992b376bd18e9699665e2a8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc63a5db_38d9f8b2",
        "filename": "drivers/auth/mbedtls/mbedtls_x509_parser.c",
        "patchSetId": 4
      },
      "lineNbr": 310,
      "author": {
        "id": 1000935
      },
      "writtenOn": "2022-12-07T17:47:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3497a9ef_f36a9be0",
      "range": {
        "startLine": 310,
        "startChar": 1,
        "endLine": 310,
        "endChar": 32
      },
      "revId": "40a4c676dc30abfa7992b376bd18e9699665e2a8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}