{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "188bbc16_5fbdde1c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2024-01-24T16:08:15Z",
      "side": 1,
      "message": "I can see why this mistake happened. Its because its not intuitive to update asm version of the makefile when a c source file is being added.\nCould you move lines 7 through 34 into a common file named libc_common.mk and then add it to both libc_asm.mk as well as libc.mk?\n\nThis will make sure such a mistake does not repeat in the future.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 59
      },
      "revId": "a1b3f4f4bb627d9e4935ec036b51ee09cf401265",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91d61260_62f1ab2d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2024-01-30T11:17:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "188bbc16_5fbdde1c",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 59
      },
      "revId": "a1b3f4f4bb627d9e4935ec036b51ee09cf401265",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f02a5f3_bb02f1b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-01-24T12:05:14Z",
      "side": 1,
      "message": "How come we did not detect this issue before then? Is it because, despite using `OVERRIDE_LIBC\u003d1`, Arm and Tegra platforms ports do not use the `memcpy_s()` function? Or is it because we have a test gap in the OpenCI?",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 42
      },
      "revId": "a1b3f4f4bb627d9e4935ec036b51ee09cf401265",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8c9cc1d_e9ca167c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2024-01-24T12:40:49Z",
      "side": 1,
      "message": "\u003e Arm and Tegra platforms ports do not use the memcpy_s() function?\n\nI believe so. I realized this by trying to use memcpy_s on FVP:\nhttps://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/25886/7/plat/arm/common/fconf/arm_fconf_sp.c#78\n\nBy greping I\u0027m seeing this:\n\n    make_helpers/defaults.mk:OVERRIDE_LIBC\t\t\t:\u003d 0\n    plat/nvidia/tegra/platform.mk:OVERRIDE_LIBC\t\t :\u003d\t1\n    plat/arm/common/arm_common.mk:OVERRIDE_LIBC\t\t\t:\u003d\t1\n    \nmeaning only Arm platforms and one Tegra platform force use the libc implementation allowing asm versions of libc functions (actually this is a rather partial asm implementation as only memset is concerned).\n    \nMoreover, only Intel platform invokes memcpy_s:\n\n    ./plat/intel/soc/common/socfpga_ros.c:\tmemcpy_s(\u0026spt_data, SPT_SIZE, spt_ptr, SPT_SIZE);\n\nI\u0027m not sure how this platform code can build though as memcpy_s may not be defined. Perhaps it\u0027s just dead code?",
      "parentUuid": "5f02a5f3_bb02f1b1",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 42
      },
      "revId": "a1b3f4f4bb627d9e4935ec036b51ee09cf401265",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "537d4ba1_8c655f82",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2024-01-24T12:44:23Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure how this platform code can build though as memcpy_s may not be defined. Perhaps it\u0027s just dead code?\n\nActually on second thought, provided Intel has OVERRIDE_LIBC\u003d0 then memcpy_s is defined in the C-only version of the libc implementation (lib/libc/libc.mk). So should be able to build eventually.",
      "parentUuid": "e8c9cc1d_e9ca167c",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 42
      },
      "revId": "a1b3f4f4bb627d9e4935ec036b51ee09cf401265",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f83f22a3_88cfa7b2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-01-24T13:14:43Z",
      "side": 1,
      "message": "Right, I think I got it.\n\n* Tegra platform makefile forcefully sets `OVERRIDE_LIBC` but it does not pull `socfpga_ros.c` thus it does not use `memcpy_s()`.\n\n* Agilex and Agilex5 platforms do not override `OVERRIDE_LIBC`, which means they get the default value (`OVERRIDE_LIBC\u003d0`) and use the C-only version of the libc. Thus, they can use `memcpy_s()`, which they do from `socfpga_ros.c`.\n\nSo all is fine and this does not unveil any test gap in Intel build configs in the CI.",
      "parentUuid": "537d4ba1_8c655f82",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 42
      },
      "revId": "a1b3f4f4bb627d9e4935ec036b51ee09cf401265",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea731ee3_d7f61afb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2024-01-24T12:05:14Z",
      "side": 1,
      "message": "The code changes look good to me but I\u0027d like to clarify the testing side of things before approving the patch.",
      "revId": "a1b3f4f4bb627d9e4935ec036b51ee09cf401265",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}