{
  "comments": [
    {
      "key": {
        "uuid": "c5df72d8_a4c2ceb7",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-06T12:00:28Z",
      "side": 1,
      "message": "Maybe you\u0027ve missed it but I had left the following comment in https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/5146/1/plat/arm/common/fconf/arm_fconf_sp.c:\n\n---8\u003c---\nThe changes in this file introduce a lot of #if defined(ARM_COT_dualroot), making the code more difficult to read. Can we not write the code in some other way that would alleviate this issue?\n---8\u003c---\n\nIs it not possible?\n\nMy gut feeling is that we might be able to keep the core of the function body free of #if defined(ARM_COT_dualroot) if we change some of the variables initializations at the beginning of the file. E.g. we could have sip_start/sip_end and plat_start/plat_end defined unconditionally. For the dualroot CoT, their values would be:\n\n sip_start \u003d SP_PKG1_ID;\n sip_end \u003d sip_start + MAX_SP_IDS / 2;\n plat_start \u003d SP_PKG5_ID;\n plat_end \u003d plat_start + MAX_SP_IDS / 2;\n\nRegardless of the CoT, we\u0027d have:\n\n unsigned int sip_index \u003d 0;\n unsigned int plat_index \u003d 0;\n bool is_plat_owned \u003d false;\n\nThe checks at line 58 then become if (sip_index \u003d\u003d sip_end) { ERROR(...)\nAnd so on... I haven\u0027t completely thought it through TBH.\n\nIn the future, we might have more than 2 owners/signing domains so it would be nice if this code was implemented in a scalable way.",
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d05a28c9_738da124",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-08-10T23:36:44Z",
      "side": 1,
      "message": "I have removed usage of ARM_COT_dualroot and it should be functional but problem may arise when we have owner field present(in dt) but build is done for Single CoT. Ideally owner field should be *DONT CARE* in this scenario.\nI will do some boundry tests and see the behaviour.",
      "parentUuid": "c5df72d8_a4c2ceb7",
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "005d52fe_8f7e6dab",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-11T12:53:28Z",
      "side": 1,
      "message": "OK I see. So I guess the issue would appear when:\n* we\u0027re using the single root CoT (as you say)\n* the owner field is present (as you say)\n* and it indicates that this is a platform owner SP.\n\nRight?\n\nIn this case, what would be the consequences on the code below? I am struggling to picture it right now...",
      "parentUuid": "d05a28c9_738da124",
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4482a466_39e81b8b",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-08-11T15:18:49Z",
      "side": 1,
      "message": "Consider the scenario where there are two partitions 1st owned by \"SiP\" and 2nd owned by \"Plat\"\nIn Single CoT build case the SP pakages will be built with following index \nSP_PKG1 and SP_PKG2 and Image ids should be \"34\" and \"35\" but at run time Image id(sp_mem_param array) and policy index will be \"34\" and \"38\".\n\nI think its unavoidable to not use ARM_COT_dualroot, atleast to avoid reading \"owner\" field.\nWe can get rid of it once we have a mechanism to add SP info in \"fvp_tb_fw_config.dts\" directly based on sp_layout.json info at build time and not adding owner field based on CoT. There is a script in development which does this.",
      "parentUuid": "005d52fe_8f7e6dab",
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fa1b8ac_702e990f",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-12T07:24:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4482a466_39e81b8b",
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bea0590e_08f591a7",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-06T12:00:28Z",
      "side": 1,
      "message": "Should this be done only when the \"owner\" property is found in the DTB file?\n\nAlso, this is checking \"Plat\" VS anything else. Would it be better to check \"Plat\" VS \"SiP\", and anything else is flagged with an error message?",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "788ecfca_0f3d0676",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-08-10T23:36:44Z",
      "side": 1,
      "message": "\"owner\" is an optional field and should matter only if built for dualroot CoT.\nEven if this field is absent its not an error scenario.\nSince \"Plat\" is a special case that is why i checked it that way but if you really want to keep it explicit then we need to have \"Plat\" vs \"SiP\" vs \"Empty\" vs \"Anything Else\".",
      "parentUuid": "bea0590e_08f591a7",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51cb6402_e0e1bd7f",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-11T12:53:28Z",
      "side": 1,
      "message": "It is an optional field indeed but if it\u0027s not present, what should be the default owner? (in the case of the dualroot CoT) \n\nRight now, I believe it will default to belonging to the SiP (because arm_sp is stored in the BSS so it\u0027s initialized to 0 and the string comparison with \"Plat\" will always fail) but the code could be more explicit about it IMO. One way to do that would be to check the presence of the field in the DTB, either via the return code of fdtw_read_string() or by checking that the owner string is empty. I personally prefer the former, as it seems more explicit to me, does not rely on fdtw_read_string() not modifying its argument on error, and also avoids a function call/pointer dereference (at the expense of using an extra register for the return code of fdtw_read_string() probably).",
      "parentUuid": "788ecfca_0f3d0676",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35040c86_f38119c8",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2020-08-11T15:18:49Z",
      "side": 1,
      "message": "The default owner will be SiP.\n\nThe return code of fdtw_read_string() is not explicit, it returns \"-1\" in failure cases(absence of field or overflow). So possibly we can\u0027t make any decision based on its return value.\n\nwith the new change \"arm_sp.owner[index]\" will be  empty if Single CoT or it is actully empty making owner fallback to SiP and works fine in all scenarios.\n\n#if defined(ARM_COT_dualroot)\n                /* Owner is an optional field, no need to catch error */\n                fdtw_read_string(dtb, sp_node, \"owner\",\n                                arm_sp.owner[index], ARM_SP_OWNER_NAME_LEN);\n#endif\n                /* If owner is empty mark it as SiP owned */\n                if ((strcmp(arm_sp.owner[index], \"SiP\") \u003d\u003d 0) ||\n                    (strcmp(arm_sp.owner[index], \"\") \u003d\u003d 0)) {\n                        is_plat_owned \u003d false;\n                } else if (strcmp(arm_sp.owner[index], \"Plat\") \u003d\u003d 0) {\n                        is_plat_owned \u003d true;\n                } else {\n                        ERROR(\"FCONF: Invalid SP owner\\n\");\n                        return -1;\n                }",
      "parentUuid": "51cb6402_e0e1bd7f",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "768c7c3e_b6aa93ee",
        "filename": "plat/arm/common/fconf/arm_fconf_sp.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2020-08-12T07:24:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "35040c86_f38119c8",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "995bdf7de8a4c2e30aebc12cc99721793e738b36",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}