{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d362f935_8763b220",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-04T21:12:48Z",
      "side": 1,
      "message": "Is it make sense to put this whole implementation under ENABLE_FEAT_DIT flag as below?\n\n  #if ENABLE_FEAT_DIT\n  #if ENABLE_ASSERTIONS\n\tmrs\tx0, id_aa64pfr0_el1\n\tubfx\tx0, x0, #ID_AA64PFR0_DIT_SHIFT, #ID_AA64PFR0_DIT_LENGTH\n\tcmp\tx0, #ID_AA64PFR0_DIT_SUPPORTED\n\tASM_ASSERT(eq)\n  #endif /* ENABLE_ASSERTIONS */\n\tmov\tx0, #DIT_BIT\n\tmsr\tDIT, x0\n  #endif /* ENABLE_FEAT_DIT */\n\nIt helps to compile out this whole implementation when \u0027ENABLE_FEAT_DIT\u0027 flag is disabled.",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 258,
        "endChar": 6
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37944899_2531cbce",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2022-01-06T11:37:43Z",
      "side": 1,
      "message": "This check is intended to make sure that the ENABLE_FEAT_DIT flag and feature bit match. So when ENABLE_FEAT_DIT \u003d\u003d 1 the DIT feature bit also equals 1 and also that when ENABLE_FEAT_DIT \u003d\u003d 0 the DIT feature bit equals 0 which is why I still do a check even when ENABLE_FEAT_DIT !\u003d 0.\nI think this is important as if the dit feature bit \u003d 1 the firmware needs to support this so also equal 1",
      "parentUuid": "d362f935_8763b220",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 258,
        "endChar": 6
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b54c19cb_e0c39c2c",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-07T10:45:47Z",
      "side": 1,
      "message": "Okay,thanks! but ensuring correct dit bit value in the id register when ENABLE_FEAT_DIT\u003d0 looks overkill operation to me. \nWhen ENABLE_FEAT_DIT\u003d1, it makes sense to check the hardware supports it or not because all later system registers accesses are guarded under this flag, unintentionally having ENABLE_FEAT_DIT\u003d1 leads to an unexpected behaviour.\nWhy it is must to enable the feature when it is architecturally supported? is there any security threat?",
      "parentUuid": "37944899_2531cbce",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 258,
        "endChar": 6
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b32e8cf_a788f9d7",
        "filename": "include/arch/aarch64/el3_common_macros.S",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2022-01-10T11:13:21Z",
      "side": 1,
      "message": "I think you\u0027re right. I\u0027ve changed it to your suggestion in the latest change. Thanks",
      "parentUuid": "b54c19cb_e0c39c2c",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 258,
        "endChar": 6
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4958937a_eac80e37",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 9
      },
      "lineNbr": 796,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-04T21:12:48Z",
      "side": 1,
      "message": "It looks odd placing this macro in the save routine (where various registers get saved to the stack). \n\u0027set_unset_pstate_bits\u0027 is kind of workaround to set the non-set PSTATE bits, can it get called from each EL3 entry (by converting this macro to function)?",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 796,
        "endChar": 22
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb7c7324_d4eb5566",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 9
      },
      "lineNbr": 796,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2022-01-06T11:37:43Z",
      "side": 1,
      "message": "This is what I originally did however in internal review I got this comment from Soby so changed it. \n\"calling this explicitly seems a bit of a maintenance hazard as we need to ensure this function is called for any new entry point we define to EL3. \nIf this can be done as part of an essential routine (like save_gp_pmcr_pauth_regs), that is less of a burden for maintenance. not sure this can be incorporated in that.\"\n\nI do understand both concerns but I\u0027m not sure what a middle ground could be.",
      "parentUuid": "4958937a_eac80e37",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 796,
        "endChar": 22
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae0aa82_cd74bd3c",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 9
      },
      "lineNbr": 796,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-07T10:45:47Z",
      "side": 1,
      "message": "I too don\u0027t have any strong opinion, but indeed agree on that the maintenance point. I thought it is just misuse of \u0027save_gp_pmcr_pauth_regs\u0027 function for setting unset pstate bits.",
      "parentUuid": "fb7c7324_d4eb5566",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 796,
        "endChar": 22
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e7e34d7_7f9cf682",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 9
      },
      "lineNbr": 796,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2022-01-10T11:47:38Z",
      "side": 1,
      "message": "It\u0027s a good point, I\u0027ll try see if I can find a better option although from an initial look I don\u0027t think there are any other \"essential routines\" than save_gp_pmcr_pauth_regs",
      "parentUuid": "3ae0aa82_cd74bd3c",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 796,
        "endChar": 22
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f9750be_73677927",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 9
      },
      "lineNbr": 796,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2022-01-10T15:23:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5e7e34d7_7f9cf682",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 796,
        "endChar": 22
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73bc51c9_75126527",
        "filename": "lib/el3_runtime/aarch64/context.S",
        "patchSetId": 9
      },
      "lineNbr": 796,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2022-01-13T16:40:14Z",
      "side": 1,
      "message": "I\u0027ve push a change to create a new function to wrap both the save_gp... function and the set_unset_pstate version. I think this will help with maintenance in the future and splits set_unset_pstate out of the save_gp... function. Please let me know what you think",
      "parentUuid": "7f9750be_73677927",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 796,
        "endChar": 22
      },
      "revId": "84f08ee71455325f01ab6b2d50dbe27237c66f97",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}