{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f93381dd_cea3a9a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-25T14:52:03Z",
      "side": 1,
      "message": "I haven\u0027t checked the generated code but changes look sensible.",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b1aa761_4563fff4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-25T14:55:53Z",
      "side": 1,
      "message": "Some thoughts on whether these regs need to be saved and restored in the first place. But this patch need not do anything. Something for TF-A team to discuss.",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77fc1428_d2c086e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-11-25T17:23:52Z",
      "side": 1,
      "message": "So that\u0027s the old code:\n   0:   d53c318d        mrs     x13, s3_4_c3_c1_4\n   4:   d53c31ce        mrs     x14, s3_4_c3_c1_6\n   8:   a916380d        stp     x13, x14, [x0, #352]\n   c:   d53c31af        mrs     x15, s3_4_c3_c1_5\n  10:   d53c11d0        mrs     x16, s3_4_c1_c1_6\n  14:   a917400f        stp     x15, x16, [x0, #368]\n  18:   d53c1189        mrs     x9, s3_4_c1_c1_4\n  1c:   d53c11aa        mrs     x10, s3_4_c1_c1_5\n  20:   a9182809        stp     x9, x10, [x0, #384]\n  24:   d65f03c0        ret\n\nThat\u0027s the new code for ENABLE_FEAT_FGT\u003d2:\n  44:   d5380700        mrs     x0, id_aa64mmfr0_el1\n  48:   f2480c1f        tst     x0, #0xf00000000000000\n  4c:   54000200        b.eq    8c \u003ccm_el2_sysregs_context_save+0x8c\u003e  // b.none\n  50:   d53c3180        mrs     x0, s3_4_c3_c1_4\n  54:   f900b260        str     x0, [x19, #352]\n  58:   d5380400        mrs     x0, id_aa64pfr0_el1\n  5c:   f2540c1f        tst     x0, #0xf00000000000\n  60:   54000060        b.eq    6c \u003ccm_el2_sysregs_context_save+0x6c\u003e  // b.none\n  64:   d53c31c0        mrs     x0, s3_4_c3_c1_6\n  68:   f900b660        str     x0, [x19, #360]\n  6c:   d53c31a0        mrs     x0, s3_4_c3_c1_5\n  70:   f900ba60        str     x0, [x19, #368]\n  74:   d53c11c0        mrs     x0, s3_4_c1_c1_6\n  78:   f900be60        str     x0, [x19, #376]\n  7c:   d53c1180        mrs     x0, s3_4_c1_c1_4\n  80:   f900c260        str     x0, [x19, #384]\n  84:   d53c11a0        mrs     x0, s3_4_c1_c1_5\n  88:   f900c660        str     x0, [x19, #392]\n\nWith ENABLE_FEAT_FGT\u003d1 we just lose the three instructions for the check, for \u003d0 the compilers skips all of that, just like with the #if before.\n\nSo yes, it\u0027s slightly bigger, because it doesn\u0027t use stp, but otherwise it\u0027s the same.",
      "parentUuid": "f93381dd_cea3a9a5",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b494aad9_66a78abf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-30T13:06:10Z",
      "side": 1,
      "message": "ok,  that\u0027s not too bad and seems like a small price to pay for Compiled code.\n\nJust a thought, would another macro like\n\nWRITE_CTX_PAR(reg1, reg2)\n\n/* verify offsets of reg1 and reg2 and ensure they are adjacent using offsetof etc */\n\nwrite_ctx_reg_pair(ctx, CTX_REG1, read_reg1(), read_reg2())\n\nthe write ctx_reg_apr can probably do a 128 bit write, and this would enable compiler to generate `stp` instructions.",
      "parentUuid": "77fc1428_d2c086e1",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b935646_380e2e67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-11-30T14:24:51Z",
      "side": 1,
      "message": "Maybe, but this is clearly an optimisation. I am not sure if stp is really better in any way, it\u0027s just the canonical way of doing registers saves/restores in assembly. I guess modern CPUs would just merge the writes anyway (write streaming), so all you save is a bit on code size and cache utilisation.\n\nI think this overly clever \"second-guessing the compiler\" on what\u0027s best for a core might lead to more problems that it solves. The fragile spread of register usage in the current assembly code is one example: register renaming solves this problems entirely in hardware.\n\nSo I am happy to do that in a separate patch, but ideally only if the advantage of this code is backed up by numbers, to justify complicating the code.",
      "parentUuid": "b494aad9_66a78abf",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9c0b898_f336c42a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-01T10:26:23Z",
      "side": 1,
      "message": "OK, I am not too convinced either that `stp` has any real world advantage, I agree the current patch is good to be merged. (hence the CR + 1) ;).",
      "parentUuid": "5b935646_380e2e67",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59938f51_428bdaf9",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 796,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-25T14:52:03Z",
      "side": 1,
      "message": "nit: these can go into arch_helpers.h",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99d64e19_6d14bfde",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 796,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-11-25T17:23:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "59938f51_428bdaf9",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e54ad8_676edbd9",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 803,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-25T14:55:53Z",
      "side": 1,
      "message": "The Secure world (and RMM doesn\u0027t use FEAT_FGT), so it is possible to think of a case that registers need not be saved and restored at all. We just need to ensure SPMD and RMMD sets up appropriate trap enable for this feature so there will be a panic in case there  is some access and can be fixed up appropriately.",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21fc7cab_48607845",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 803,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2022-11-25T17:23:52Z",
      "side": 1,
      "message": "Yes, but as you mention, the optimisation is a separate issue. Now that we have it in C, this can be more cleanly done on top, I think.\nI have another patch to cover the case of missed enablement, that panics in early boot if the feature is not compiled in, but the CPU has it. Will push it as part of v2.",
      "parentUuid": "10e54ad8_676edbd9",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8eb9e94_dc83a04e",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 2
      },
      "lineNbr": 803,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-30T13:06:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "21fc7cab_48607845",
      "revId": "c2255f02ea861a1ca42339468942f94a1c2920af",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}