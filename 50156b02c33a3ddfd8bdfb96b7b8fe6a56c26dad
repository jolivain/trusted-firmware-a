{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ada31a4e_5ce588be",
        "filename": "common/feat_check.c",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-30T11:38:57Z",
      "side": 1,
      "message": "This would be painful to maintain and review. IMO, it is better to encode the know version in the existing version check. That would be more reader friendly.\n\nIe. during boot phase, instead of check against non-zero value for a feature, it can be a range check. There is an optimization at context_save and restore, wherein the range check can be replaced with a more efficient check (either a flag which is set at boot time or a non_zero check of ID reg).",
      "revId": "50156b02c33a3ddfd8bdfb96b7b8fe6a56c26dad",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e050d4a_8486e3c0",
        "filename": "common/feat_check.c",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2023-01-30T15:11:16Z",
      "side": 1,
      "message": "But the fragility of a range check is the whole reason for this exercise: it is far more painful to figure out those subtle upgrades in the feature field using the existing code. This check here is pretty clear and direct in what it does.\nI agree it\u0027s not easy to review, though it is pretty mechanic and becomes much easier after you checked one register (been there, done that ...)\nI would argue against the maintainability problem: The error message is pretty clear in where the problem is exactly: It tells the register name and the bit position. It takes only a few minutes to check the ARM ARM for what has been added, and then increase the number in this check.\nAnd since this is a debug check, which needs explicit enablement, it should not affect regular users, so it\u0027s not fatal to them. This could be run as part of some CI, though, with the newest models and QEMU, which would help to spot any issues early.",
      "parentUuid": "ada31a4e_5ce588be",
      "revId": "50156b02c33a3ddfd8bdfb96b7b8fe6a56c26dad",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}