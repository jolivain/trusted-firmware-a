{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0cb02078_d38751d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1001067
      },
      "writtenOn": "2023-08-24T19:47:43Z",
      "side": 1,
      "message": "Failure caused by known ci issue otherwise patch behaved as expected, http://ci.trustedfirmware.org/job/tf-a-gerrit-tforg-l2/1254/",
      "revId": "8acead0732434c688744ac4011362948f544d177",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de64e84f_3d82f101",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-08-24T20:14:05Z",
      "side": 1,
      "message": "nit: I wonder why we need this guard everywhere to capture timestamps. To avoid #ifdefry, it is better to resolve PMF_CAPTURE_TIMESTAMP to none when runtime instrumentation is disabled. What do you think?",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 34
      },
      "revId": "8acead0732434c688744ac4011362948f544d177",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52aba22b_9bd92bbb",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1001067
      },
      "writtenOn": "2023-08-29T18:00:07Z",
      "side": 1,
      "message": "Working on removing the guard",
      "parentUuid": "de64e84f_3d82f101",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 34
      },
      "revId": "8acead0732434c688744ac4011362948f544d177",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6822bd06_46dff124",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1001067
      },
      "writtenOn": "2023-08-29T23:19:37Z",
      "side": 1,
      "message": "I found that removing the guard results in timestamps being captured if runtime_instrumentation is set to 0 or 1, as the MAKEFILE sets enable_pmf to 1.",
      "parentUuid": "52aba22b_9bd92bbb",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 34
      },
      "revId": "8acead0732434c688744ac4011362948f544d177",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa05a262_a3cabc1b",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-08-30T07:55:52Z",
      "side": 1,
      "message": "Understood, thanks! I\u0027m fine with this approach then.\nIn this case, I still believe a wrapper define could be used to guard this implementation (considering this API usage is no longer limited to PSCI, but appears in boot flow and for some other measurements later on), so it would be best to avoid #ifdery. The wrapper define should be introduced as follows IMO:\n\n #if ENABLE_RUNTIME_INSTRUMENTATION\n #define PMF_RUNTIME_CAPTURE_TIMESTAMP(_name, _tid, _flags) PMF_CAPTURE_TIMESTAMP(_name, _tid, \n _flags)\n #else \n #define PMF_RUNTIME_CAPTURE_TIMESTAMP(_name, _tid, _flags) \n #endif\n\nThen users directly call PMF_RUNTIME_CAPTURE_TIMESTAMP(...) without guarding it.\n\nAlso, I feel this comment[1] need to be improvised after the usage of this flag.\nMay be change it to \"for example, to instrument PSCI, boot stages\"\n\nLet me know what do you think?\n\n[1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/docs/getting_started/build-options.rst#n444",
      "parentUuid": "6822bd06_46dff124",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 34
      },
      "revId": "8acead0732434c688744ac4011362948f544d177",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "407fb59b_2b87c310",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-08-30T08:02:36Z",
      "side": 1,
      "message": "\u003e Understood, thanks! I\u0027m fine with this approach then.\nIt is fine to leave this version as it is. It would be better to introduce a separate patch if you are fine with the above suggestion.",
      "parentUuid": "fa05a262_a3cabc1b",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 34
      },
      "revId": "8acead0732434c688744ac4011362948f544d177",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfef2312_22a5f596",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1001067
      },
      "writtenOn": "2023-08-30T16:27:45Z",
      "side": 1,
      "message": "Thank you for this alternate solution, Ill try it out and see if I can add it as a future patch.",
      "parentUuid": "407fb59b_2b87c310",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 34
      },
      "revId": "8acead0732434c688744ac4011362948f544d177",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb916e40_e46b9d8c",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-09-11T12:57:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bfef2312_22a5f596",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 34
      },
      "revId": "8acead0732434c688744ac4011362948f544d177",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}