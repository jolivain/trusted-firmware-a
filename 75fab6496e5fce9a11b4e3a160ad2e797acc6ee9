{
  "comments": [
    {
      "key": {
        "uuid": "083c2589_60275c01",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-09-14T11:16:14Z",
      "side": 1,
      "message": "AArch64 also has uint128_t type. Why not use it? Did you check that compiler generates STP instructions?",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6895987_e777a535",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-09-14T11:39:48Z",
      "side": 1,
      "message": "Does this work on AArch32? Also, as mentioned, this is not meant to reach 110% of the maximum possible performance, just to fix the blatant performance problems with byte writes, while staying simple and reviewable.\nI don\u0027t know (and don\u0027t want to know!) if stp actually improves performance, to me that sounds like a silicon implementation detail (the load/store subsystem detecting stores to subsequent memory locations and optimising internally).",
      "parentUuid": "083c2589_60275c01",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8645bdd_a94d9bea",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-09-14T11:16:14Z",
      "side": 1,
      "message": "MISRA Rule 7.2 violation",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "798a3678_d7d332ea",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-09-14T11:39:48Z",
      "side": 1,
      "message": "What does that mean? 0U?",
      "parentUuid": "b8645bdd_a94d9bea",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e62a4b99_c8bfff73",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-09-14T11:16:14Z",
      "side": 1,
      "message": "MISRA 14.4 Rule violation",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c17872d_6c42bee2",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-09-14T11:39:48Z",
      "side": 1,
      "message": "What does that mean? Is that about 7U? Or shall this be (sizeof(uint64_t) - 1)?\nDo we have some macro or otherwise best practice construct for checking alignment?",
      "parentUuid": "e62a4b99_c8bfff73",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51698003_657a3a01",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-09-14T11:16:14Z",
      "side": 1,
      "message": "why (void *) here?",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4c7fe8c_8596950b",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-09-14T11:39:48Z",
      "side": 1,
      "message": "No particular reason, makes this more robust against changing the type of either pointers. If something (MISRA?) complains, happy to change this to (uint64_t *), if this is what you were wondering about.",
      "parentUuid": "51698003_657a3a01",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a0da186_c024414c",
        "filename": "lib/libc/memset.c",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-09-14T11:16:14Z",
      "side": 1,
      "message": "the same",
      "revId": "75fab6496e5fce9a11b4e3a160ad2e797acc6ee9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}