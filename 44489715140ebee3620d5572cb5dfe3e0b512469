{
  "comments": [
    {
      "key": {
        "uuid": "330b8cb9_ab8b76cc",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 996,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-26T16:32:47Z",
      "side": 1,
      "message": "I am not convinced that this loop will work for all platforms. IIUC, it wont work if a platform has holes in the CPU topology.\n\ne.g. Image a platform where we have 2 CPUs per cluster. So psci_plat_core_count \u003d 4, where MPIDR \u003d 0x0, 0x1, 0x100, 0x101. plat_my_core_pos() might return 0, 1, 4, 5.",
      "range": {
        "startLine": 996,
        "startChar": 1,
        "endLine": 996,
        "endChar": 51
      },
      "revId": "44489715140ebee3620d5572cb5dfe3e0b512469",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7b9187f_4a36ddd9",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 996,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-08-27T05:07:18Z",
      "side": 1,
      "message": "psci_cpu_pd_nodes[0] left most leaf node to psci_cpu_pd_nodes[psci_plat_core_count - 1] the right most leaf node should cover all the cores. it might have unused entries(for holes).\nBut that does not affect the logic.\n\nOne should be able to index into cpu_pd_nodes[] from mpidr. Platform need to deal with it. It might mean dummy cpu_pd nodes in the tree for the holes Or one has to handle such that mpidr indexes to the right cpu pd nodes.\n\nThe example MPIDR you mentioned can return\n(num_cpus_for_this_cluster * aff_lel1) + cpuid  ie plat_my_core_pos() can return 0, 1, 2, 3",
      "parentUuid": "330b8cb9_ab8b76cc",
      "range": {
        "startLine": 996,
        "startChar": 1,
        "endLine": 996,
        "endChar": 51
      },
      "revId": "44489715140ebee3620d5572cb5dfe3e0b512469",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac52813f_3d1a6464",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 996,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-27T15:09:09Z",
      "side": 1,
      "message": "Yes and this code assumes that platforms do the right thing. That needs to be fixed in this change. We cannot assume that platforms will always use the expected CPU numbering.",
      "parentUuid": "d7b9187f_4a36ddd9",
      "range": {
        "startLine": 996,
        "startChar": 1,
        "endLine": 996,
        "endChar": 51
      },
      "revId": "44489715140ebee3620d5572cb5dfe3e0b512469",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86480131_cf37cea9",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 996,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-08-27T16:01:28Z",
      "side": 1,
      "message": "I think it is independent of the issue of platform not complying  to a requirement.\nWe are traversing the populated cpu pd nodes and checking their validity.\n\nBut PSCI rest of the code has the same requirement from the platforms. I think there are many other things to fail otherwise isn\u0027t it ?\nex: psci_is_last_on_cpu()\n\nThe example you mentioned psci_plat_core_count \u003d 4, where MPIDR \u003d 0x0, 0x1, 0x100, 0x101. plat_my_core_pos() might return 0, 1, 4, 5.\nThe core position /index 5 is exceeding core count so it is not valid.",
      "parentUuid": "ac52813f_3d1a6464",
      "range": {
        "startLine": 996,
        "startChar": 1,
        "endLine": 996,
        "endChar": 51
      },
      "revId": "44489715140ebee3620d5572cb5dfe3e0b512469",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb0941ca_4699d9cc",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 996,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-27T16:06:01Z",
      "side": 1,
      "message": "\u003e The example you mentioned psci_plat_core_count \u003d 4, where MPIDR \u003d 0x0, 0x1, 0x100, 0x101. plat_my_core_pos() might return 0, 1, 4, 5.\nThe core position /index 5 is exceeding core count so it is not valid.\n\nPlease correct me, AFAIU number of CPUs has no bearing on what the logical CPU number should be.",
      "parentUuid": "86480131_cf37cea9",
      "range": {
        "startLine": 996,
        "startChar": 1,
        "endLine": 996,
        "endChar": 51
      },
      "revId": "44489715140ebee3620d5572cb5dfe3e0b512469",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0601b3b_c3bd03e3",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 996,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-08-27T16:16:09Z",
      "side": 1,
      "message": "AFAIU the hard requirement is one should be able to uniquely index into cpu_pd_nodes[] from mpidr. core_pos is the index to the pd_node[]. The onus is on platform.\n\nRegardless in this change we are traversing the entire populated cpu power domain nodes, so\nhow it got populated from the topology is not very relevant relevant.",
      "parentUuid": "fb0941ca_4699d9cc",
      "range": {
        "startLine": 996,
        "startChar": 1,
        "endLine": 996,
        "endChar": 51
      },
      "revId": "44489715140ebee3620d5572cb5dfe3e0b512469",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe3bbef5_762b42cb",
        "filename": "lib/psci/psci_common.c",
        "patchSetId": 3
      },
      "lineNbr": 996,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-27T16:43:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e0601b3b_c3bd03e3",
      "range": {
        "startLine": 996,
        "startChar": 1,
        "endLine": 996,
        "endChar": 51
      },
      "revId": "44489715140ebee3620d5572cb5dfe3e0b512469",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}