{
  "comments": [
    {
      "key": {
        "uuid": "a44b6e7e_bfe3ea92",
        "filename": "plat/arm/board/juno/juno_stack_protector.c",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-10-24T02:24:58Z",
      "side": 1,
      "message": "When will this path execute? IIUC, the if condition will always be true (?)",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "231072df5b39db885e48ecead1bb46753c5dd603",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f010fc94_a15c0997",
        "filename": "plat/arm/board/juno/juno_stack_protector.c",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-10-24T09:30:46Z",
      "side": 1,
      "message": "There is a 32-bit build target for Juno. The old code was hiding this a bit, but was employing a similar strategy (XORing as many values as needed) to cope with that.",
      "parentUuid": "a44b6e7e_bfe3ea92",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "231072df5b39db885e48ecead1bb46753c5dd603",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8ae0e9d_87220104",
        "filename": "plat/arm/board/juno/juno_stack_protector.c",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-01-13T17:22:40Z",
      "side": 1,
      "message": "If it\u0027s a check for a 32-bit build target, could the check be done at build time with \u0027#if\u0027 and friends?\n\nThat would seem clearer than using a runtime check - the sizeof(entropy) part looks at first glance like it\u0027s trying to get the length of the buffer.\n\nIf it needs to be a runtime check, could it be changed to be a more explicit check for 32-bit vs 64-bit?",
      "parentUuid": "f010fc94_a15c0997",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "231072df5b39db885e48ecead1bb46753c5dd603",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "269fef23_fa5a39b8",
        "filename": "plat/arm/board/juno/juno_stack_protector.c",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2021-01-14T13:51:54Z",
      "side": 1,
      "message": "I believe any explicit check for \"32-bit vs 64-bit\" is the wrong approach, most of the times. We actually have u_register_t to abstract from those specifics. *At the moment* we just deal with AArch32 and AArch64, but it gets quite hairy when you start considering ILP32 or CHERI. \nSo we should always look at what we are actually after: In this case it\u0027s a potential mismatch between u_register_t and uint64_t, hence the explicit comparison of those.\n\nSo what I could offer is adding comments, to both point out the 32-bit Juno build target, but also the fact that the get_entropy() interface is 64-bit, so that we need to deal with that. Does that sound OK?",
      "parentUuid": "f8ae0e9d_87220104",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "231072df5b39db885e48ecead1bb46753c5dd603",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68c17c86_b8431ac2",
        "filename": "plat/arm/board/juno/juno_stack_protector.c",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-01-14T14:48:13Z",
      "side": 1,
      "message": "Ah okay\nThat sounds fine\nCould you also compare with sizeof(uint64_t) rather than sizeof(entropy)? That would seem clearer given that you\u0027re concerned about the size of any uint64_t rather than specifically the size of entropy.",
      "parentUuid": "269fef23_fa5a39b8",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "231072df5b39db885e48ecead1bb46753c5dd603",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7af76652_2973cd1c",
        "filename": "plat/arm/board/juno/juno_stack_protector.c",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2021-01-20T15:14:16Z",
      "side": 1,
      "message": "So on a first glance it doesn\u0027t really matter whether you compare sizeof(type_t) or sizeof(variable_name), since both have obviously the same result. But it\u0027s deemed more robust to use the variable name, as the declaration might change, and with it its type. I don\u0027t know if this is written down somewhere, but that\u0027s how I learned to handle those things over the years.\n\nSo if you don\u0027t mind, I would like to keep the check as it:\nThe entropy is in the variable called \"entropy\". If that fits into the return type of the function, we can just return it. So we compare the size of \"entropy\", but since there is no alias for the return type of the function, we use the type name for the other side.",
      "parentUuid": "68c17c86_b8431ac2",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "231072df5b39db885e48ecead1bb46753c5dd603",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f673a9dc_a2a757f7",
        "filename": "plat/arm/board/juno/juno_stack_protector.c",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1000440
      },
      "writtenOn": "2021-01-20T16:58:59Z",
      "side": 1,
      "message": "That seems fair.\nI got a bit confused with another patch at first and thought entropy was a pointer to a buffer. In that case the sizeof(entropy) could like a programming mistake in getting the length (even if it was actually intended).\nFor an integer this is not really an issue, so I\u0027ll go ahead and resolve this.",
      "parentUuid": "7af76652_2973cd1c",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "231072df5b39db885e48ecead1bb46753c5dd603",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}