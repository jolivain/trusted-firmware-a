{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a71a9cfa_e0c3757b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T17:55:49Z",
      "side": 1,
      "message": "Some marvell builds will fail without a change in another repo....\n\nThere is still an external marvell repo that needs a single line fixed in https://github.com/MarvellEmbeddedProcessors/mv-ddr-marvell/blob/master/mv_ddr4_training_leveling.c\n\nHow do we coordinate a fix in that repo?",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd437b50_6ea840d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2021-10-27T18:07:35Z",
      "side": 1,
      "message": "@Konstantin/Pali, could you guys please look into it?",
      "parentUuid": "a71a9cfa_e0c3757b",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f9b7167_86d3338d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T18:14:01Z",
      "side": 1,
      "message": "I see that it is failing on some other errors:\n\nhttps://ci.trustedfirmware.org/job/tf-a-builder/535063/console\n\n11:04:55 plat/common/plat_spmd_manifest.c:9:10: fatal error: intypes.h: No such file or directory\n11:04:55     9 | #include \u003cintypes.h\u003e\n11:04:55       |          ^~~~~~~~~~~\n11:04:55 compilation terminated.\n11:04:55 Makefile:1212: recipe for target \u0027/home/buildslave/workspace/tf-a-builder/trusted-firmware-a/build/fvp/debug/bl31/plat_spmd_manifest.o\u0027 failed\n\n\nhttps://ci.trustedfirmware.org/job/tf-a-builder/535089/console\n\n11:05:31 In file included from drivers/marvell/io_win.c:10:0:\n11:05:31 drivers/marvell/io_win.c: In function \u0027io_win_check\u0027:\n11:05:31 include/common/debug.h:45:28: error: format \u0027%llx\u0027 expects argument of type \u0027long long unsigned int\u0027, but argument 3 has type \u0027uint64_t {aka long unsigned int}\u0027 [-Werror\u003dformat\u003d]\n11:05:31  #define LOG_MARKER_NOTICE  \"\\x14\" /* 20 */",
      "parentUuid": "dd437b50_6ea840d7",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cb4e044_585b57ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T18:32:06Z",
      "side": 1,
      "message": "Those should be fixed in patchset 11.  The one needing a change in external repo is in https://ci.trustedfirmware.org/job/tf-a-builder/535067/console\n\n02:04:56 mv_ddr4_training_leveling.c:252:38: error: format \u0027%llx\u0027 expects argument of type \u0027long long unsigned int\u0027, but argument 2 has type \u0027uint64_t {aka long unsigned int}\u0027 [-Werror\u003dformat\u003d]\n02:04:56     DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));",
      "parentUuid": "4f9b7167_86d3338d",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55280426_e75f5387",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T18:35:50Z",
      "side": 1,
      "message": "Hm... And is this test passing without this your patch?",
      "parentUuid": "4cb4e044_585b57ef",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80dcf3b1_5489998d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T18:41:34Z",
      "side": 1,
      "message": "Yes, it is using the same wrong hard coded printf format specifier for a uint64_t and needs the same change as the rest of this commit to go in at same time.",
      "parentUuid": "55280426_e75f5387",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "278f615d_290000f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T18:50:06Z",
      "side": 1,
      "message": "Well, if test is passing then issue in this patch, not in mv-ddr.\n\nThat mv-ddr is used by current and older versions of TF-A and then also by other projects like U-Boot or A3700-utils. And I have not seen any compile error neither on 32-bit nor 64-bit with those other projects.\n\nSo I do not think that there is some big issue with 64-bit types as other projects would also see this failure too.\n\nAnyway, you cannot change types or formats in mv-ddr. As it would break building of current versions of TF-A (beware that Marvell is using also older versions) and also breakage of other projects like U-Boot or A3700-utils.",
      "parentUuid": "80dcf3b1_5489998d",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fdf3741_d203ecbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T19:00:08Z",
      "side": 1,
      "message": "Sure I can - it is software.  With an intelligent ifdef it would be simple to do.",
      "parentUuid": "278f615d_290000f1",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b69269af_dcb98ff9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T19:07:08Z",
      "side": 1,
      "message": "But what you want to change? I do not quite understand it. mv-ddr is external library used by more projects with no known compile issue. So if some TF-A patch cause compile errors, it is probably issue in TF-A patch... and issue should be fixed in TF-A. That external library is backward and forward compatible. And talking about ifdef sounds like a hack for a bug in one specific project (TF-A). So really, please fix it properly in TF-A without hacks in other projects.",
      "parentUuid": "5fdf3741_d203ecbe",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a793fd7_7794dd2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T19:41:19Z",
      "side": 1,
      "message": "TF-A stdint.h is defining uint64_t to the wrong type right now.  long long is wrong.  Warnings are treated as errors in ATF builds.  So, when correcting uint64_t to correct type (in this commit), the 0x%llx printf format specifier in the marvel code won\u0027t work.  Really, it should be using the proper fixed width format specifiers in inttypes.h and then the code works properly for fixed width format specifiers on 32 and 64 bit machine.  But, since the old code does not have inttypes.h in it for the use of printf format specifiers you\u0027ll need to add a different change in the marvel code.  Please add the following change to the marvel code and we should be able to work around the issue in old and new builds:\n\nReplace line 252 of mv_ddr4_training_leveling.c with:\n\n#include \u003cstdint.\u003e\n\n#if (UINT64_MAX \u003d\u003d ULLONG_MAX)\n/* Use improperly size uint64_t type */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n#else\n/* Use properly size uint64_t type */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", read_pattern_64[edge]));\n#endif",
      "parentUuid": "b69269af_dcb98ff9",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9815aa45_c3814c4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T19:58:15Z",
      "side": 1,
      "message": "\u003e TF-A stdint.h is defining uint64_t to the wrong type right now. long long is wrong.\n\nWhy wrong? I do not see nothing wrong with it.\n\n\u003e #if (UINT64_MAX \u003d\u003d ULLONG_MAX)\n\u003e /* Use improperly size uint64_t type */\n\nThis comment is wrong. On most platform (and maybe all, until there will be native 128-bit platforms) is maximal value represented by 64-bit unsigned type same as the maximal value represented by unsigned long long type.\n\nCurrently I do not have machine where this condition does not match.\n\nSo I really do not understand, how it could be improper size as written in comment for UINT64_MAX \u003d\u003d ULLONG_MAX.\n\nIf this patch expects that UINT64_MAX !\u003d ULLONG_MAX, then this patch is wrong.",
      "parentUuid": "7a793fd7_7794dd2c",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "292635c7_a426096e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T20:19:04Z",
      "side": 1,
      "message": "You\u0027re right - I did the wrong check in the code I gave you.  I think this should be the correct logic.  Worth looking at the discussion in the comments above to understand the issue - especially with Chris Kay.\n\n#include \u003cstdint.h\u003e\n\n#if (UINT64_MAX \u003d\u003d ULONG_MAX)\n/* Use properly defined uint64_t type for LP64 (long)  */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", read_pattern_64[edge]));\n#else\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n#endif",
      "parentUuid": "9815aa45_c3814c4f",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5fa2855_3c56be4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T20:23:02Z",
      "side": 1,
      "message": "Actually, that still won\u0027t change anything in your other cases.  Probably just going to have to go with a cast\n\n#if (UINT64_MAX \u003d\u003d ULONG_MAX)\n/* Use properly defined uint64_t type for LP64 (long)  */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", (long)read_pattern_64[edge]));\n#else\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n#endif",
      "parentUuid": "292635c7_a426096e",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32f45262_4af5f87d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T20:29:02Z",
      "side": 1,
      "message": "I\u0027m probably lost here what is this code trying to do...\n\n\u003e #if (UINT64_MAX \u003d\u003d ULONG_MAX)\n\u003e /* Use properly defined uint64_t type for LP64 (long)  */\n\u003e DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", read_pattern_64[edge]));\n\u003e #else\n\u003e DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n\u003e #endif\n\nMost 64-bit compilers, including gcc aarch64 has long type to be 64-bit wide. Therefore following is truth: UINT64_MAX \u003d ULONG_MAX \u003d ULLONG_MAX\nIIRC 64-bit msvc x86 compiler has long type to be just 32-bit wide.\n\nSo above check for most arm compilers just checks if compiling for 32-bit or 64-bit target. And code path for \"Use properly defined uint64_t type for LP64 (long)\" is always applied for gcc aarch64.",
      "parentUuid": "292635c7_a426096e",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}