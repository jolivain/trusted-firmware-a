{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a71a9cfa_e0c3757b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T17:55:49Z",
      "side": 1,
      "message": "Some marvell builds will fail without a change in another repo....\n\nThere is still an external marvell repo that needs a single line fixed in https://github.com/MarvellEmbeddedProcessors/mv-ddr-marvell/blob/master/mv_ddr4_training_leveling.c\n\nHow do we coordinate a fix in that repo?",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd437b50_6ea840d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2021-10-27T18:07:35Z",
      "side": 1,
      "message": "@Konstantin/Pali, could you guys please look into it?",
      "parentUuid": "a71a9cfa_e0c3757b",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f9b7167_86d3338d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T18:14:01Z",
      "side": 1,
      "message": "I see that it is failing on some other errors:\n\nhttps://ci.trustedfirmware.org/job/tf-a-builder/535063/console\n\n11:04:55 plat/common/plat_spmd_manifest.c:9:10: fatal error: intypes.h: No such file or directory\n11:04:55     9 | #include \u003cintypes.h\u003e\n11:04:55       |          ^~~~~~~~~~~\n11:04:55 compilation terminated.\n11:04:55 Makefile:1212: recipe for target \u0027/home/buildslave/workspace/tf-a-builder/trusted-firmware-a/build/fvp/debug/bl31/plat_spmd_manifest.o\u0027 failed\n\n\nhttps://ci.trustedfirmware.org/job/tf-a-builder/535089/console\n\n11:05:31 In file included from drivers/marvell/io_win.c:10:0:\n11:05:31 drivers/marvell/io_win.c: In function \u0027io_win_check\u0027:\n11:05:31 include/common/debug.h:45:28: error: format \u0027%llx\u0027 expects argument of type \u0027long long unsigned int\u0027, but argument 3 has type \u0027uint64_t {aka long unsigned int}\u0027 [-Werror\u003dformat\u003d]\n11:05:31  #define LOG_MARKER_NOTICE  \"\\x14\" /* 20 */",
      "parentUuid": "dd437b50_6ea840d7",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cb4e044_585b57ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T18:32:06Z",
      "side": 1,
      "message": "Those should be fixed in patchset 11.  The one needing a change in external repo is in https://ci.trustedfirmware.org/job/tf-a-builder/535067/console\n\n02:04:56 mv_ddr4_training_leveling.c:252:38: error: format \u0027%llx\u0027 expects argument of type \u0027long long unsigned int\u0027, but argument 2 has type \u0027uint64_t {aka long unsigned int}\u0027 [-Werror\u003dformat\u003d]\n02:04:56     DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));",
      "parentUuid": "4f9b7167_86d3338d",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55280426_e75f5387",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T18:35:50Z",
      "side": 1,
      "message": "Hm... And is this test passing without this your patch?",
      "parentUuid": "4cb4e044_585b57ef",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80dcf3b1_5489998d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T18:41:34Z",
      "side": 1,
      "message": "Yes, it is using the same wrong hard coded printf format specifier for a uint64_t and needs the same change as the rest of this commit to go in at same time.",
      "parentUuid": "55280426_e75f5387",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "278f615d_290000f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T18:50:06Z",
      "side": 1,
      "message": "Well, if test is passing then issue in this patch, not in mv-ddr.\n\nThat mv-ddr is used by current and older versions of TF-A and then also by other projects like U-Boot or A3700-utils. And I have not seen any compile error neither on 32-bit nor 64-bit with those other projects.\n\nSo I do not think that there is some big issue with 64-bit types as other projects would also see this failure too.\n\nAnyway, you cannot change types or formats in mv-ddr. As it would break building of current versions of TF-A (beware that Marvell is using also older versions) and also breakage of other projects like U-Boot or A3700-utils.",
      "parentUuid": "80dcf3b1_5489998d",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fdf3741_d203ecbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T19:00:08Z",
      "side": 1,
      "message": "Sure I can - it is software.  With an intelligent ifdef it would be simple to do.",
      "parentUuid": "278f615d_290000f1",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b69269af_dcb98ff9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T19:07:08Z",
      "side": 1,
      "message": "But what you want to change? I do not quite understand it. mv-ddr is external library used by more projects with no known compile issue. So if some TF-A patch cause compile errors, it is probably issue in TF-A patch... and issue should be fixed in TF-A. That external library is backward and forward compatible. And talking about ifdef sounds like a hack for a bug in one specific project (TF-A). So really, please fix it properly in TF-A without hacks in other projects.",
      "parentUuid": "5fdf3741_d203ecbe",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a793fd7_7794dd2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T19:41:19Z",
      "side": 1,
      "message": "TF-A stdint.h is defining uint64_t to the wrong type right now.  long long is wrong.  Warnings are treated as errors in ATF builds.  So, when correcting uint64_t to correct type (in this commit), the 0x%llx printf format specifier in the marvel code won\u0027t work.  Really, it should be using the proper fixed width format specifiers in inttypes.h and then the code works properly for fixed width format specifiers on 32 and 64 bit machine.  But, since the old code does not have inttypes.h in it for the use of printf format specifiers you\u0027ll need to add a different change in the marvel code.  Please add the following change to the marvel code and we should be able to work around the issue in old and new builds:\n\nReplace line 252 of mv_ddr4_training_leveling.c with:\n\n#include \u003cstdint.\u003e\n\n#if (UINT64_MAX \u003d\u003d ULLONG_MAX)\n/* Use improperly size uint64_t type */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n#else\n/* Use properly size uint64_t type */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", read_pattern_64[edge]));\n#endif",
      "parentUuid": "b69269af_dcb98ff9",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9815aa45_c3814c4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T19:58:15Z",
      "side": 1,
      "message": "\u003e TF-A stdint.h is defining uint64_t to the wrong type right now. long long is wrong.\n\nWhy wrong? I do not see nothing wrong with it.\n\n\u003e #if (UINT64_MAX \u003d\u003d ULLONG_MAX)\n\u003e /* Use improperly size uint64_t type */\n\nThis comment is wrong. On most platform (and maybe all, until there will be native 128-bit platforms) is maximal value represented by 64-bit unsigned type same as the maximal value represented by unsigned long long type.\n\nCurrently I do not have machine where this condition does not match.\n\nSo I really do not understand, how it could be improper size as written in comment for UINT64_MAX \u003d\u003d ULLONG_MAX.\n\nIf this patch expects that UINT64_MAX !\u003d ULLONG_MAX, then this patch is wrong.",
      "parentUuid": "7a793fd7_7794dd2c",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "292635c7_a426096e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T20:19:04Z",
      "side": 1,
      "message": "You\u0027re right - I did the wrong check in the code I gave you.  I think this should be the correct logic.  Worth looking at the discussion in the comments above to understand the issue - especially with Chris Kay.\n\n#include \u003cstdint.h\u003e\n\n#if (UINT64_MAX \u003d\u003d ULONG_MAX)\n/* Use properly defined uint64_t type for LP64 (long)  */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", read_pattern_64[edge]));\n#else\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n#endif",
      "parentUuid": "9815aa45_c3814c4f",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5fa2855_3c56be4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T20:23:02Z",
      "side": 1,
      "message": "Actually, that still won\u0027t change anything in your other cases.  Probably just going to have to go with a cast\n\n#if (UINT64_MAX \u003d\u003d ULONG_MAX)\n/* Use properly defined uint64_t type for LP64 (long)  */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", (long)read_pattern_64[edge]));\n#else\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n#endif",
      "parentUuid": "292635c7_a426096e",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32f45262_4af5f87d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T20:29:02Z",
      "side": 1,
      "message": "I\u0027m probably lost here what is this code trying to do...\n\n\u003e #if (UINT64_MAX \u003d\u003d ULONG_MAX)\n\u003e /* Use properly defined uint64_t type for LP64 (long)  */\n\u003e DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", read_pattern_64[edge]));\n\u003e #else\n\u003e DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n\u003e #endif\n\nMost 64-bit compilers, including gcc aarch64 has long type to be 64-bit wide. Therefore following is truth: UINT64_MAX \u003d ULONG_MAX \u003d ULLONG_MAX\nIIRC 64-bit msvc x86 compiler has long type to be just 32-bit wide.\n\nSo above check for most arm compilers just checks if compiling for 32-bit or 64-bit target. And code path for \"Use properly defined uint64_t type for LP64 (long)\" is always applied for gcc aarch64.",
      "parentUuid": "292635c7_a426096e",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95405433_ddeb3917",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T20:33:43Z",
      "side": 1,
      "message": "\u003e Probably just going to have to go with a cast\n\nSo it just shows that this patch is either incorrect or hacking something different. It worked without casting and is working without casting in more projects.\n\nAs there is some (maybe hidden?) issue with it, I\u0027m not going to spend more time on it as I do not see motivation for it.",
      "parentUuid": "32f45262_4af5f87d",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4775c6b6_de74d3d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T20:35:52Z",
      "side": 1,
      "message": "Pali, you can read through the comments in the review to understand more.  Basically the problem boils down to ATF was defining uint64_t to long long while GCC defines uint64_t to long.  This causes compiler warnings and is also detected by coverity.  I responded with what I think should fix the issue without the introduction of int_types.h header in your code just after you replied.\n\n#include \u003cstdint.h\u003e\n\n#if (UINT64_MAX \u003d\u003d ULONG_MAX)\n/* Use properly defined uint64_t type for LP64 (long)  */\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16lx\\n\", (long)read_pattern_64[edge]));\n#else\nDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n#endif",
      "parentUuid": "32f45262_4af5f87d",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d1b197c_685a8b6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-27T20:36:52Z",
      "side": 1,
      "message": "I\u0027m marking it with -1 for now as this change is breaking compilation of mvebu platforms with mv-ddr library. Breaking compilation of mvebu platforms is not a good solution. And I do not think that issue is in mv-ddr (mv-ddr is working in other projects and also without this change). Hacking mv-ddr just because of problematic change in TF-A is also not a solution.",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8ee0fa7_56c3b9cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-27T20:41:42Z",
      "side": 1,
      "message": "Well, you\u0027re using the wrong type for a uint64_t printf format specifier.  There is no other solution but to fix your code.",
      "parentUuid": "4d1b197c_685a8b6f",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e294781_79085d99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-10-28T09:45:21Z",
      "side": 1,
      "message": "Hi Pali, I\u0027m not sure I see a better way around this. Our libc currently assumes a different data model than the compilers we support; this opens us up to potential security issues and impacts our ability to analyse the codebase accurately, for which our only resolution is to align these types as expected by the toolchain. In the longer term, we are looking at reorienting the libc around compiler-provided headers to avoid issues like these in the future.\n\nSome of these changes during the transition will inevitably be breaking, but we do stable releases so that we can make these sorts of changes mid-cycle. We coordinate updates to platform code when we do make breaking changes in TF-A, and I think it\u0027s fair to consider this library to be \"platform code\" if it is relying on TF-A implementation details, regardless of whether it lives in the upstream repository or elsewhere.\n\nTo resolve the build failures you could always explicitly cast to ULL, e.g.:\n\n    DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", (unsigned long long)read_pattern_64[edge]));\n\nAnd that should work for both pre and post-fix versions with absolutely minimal changes to your library.",
      "parentUuid": "c8ee0fa7_56c3b9cf",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d335e8cc_26f1977c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-28T11:58:00Z",
      "side": 1,
      "message": "Comparing UINT64_MAX, ULLONG_MAX and ULONG_MAX for equality is nonsense and it just say that your proposed change is broken. Really it is broken, I have explained it in previous comments. UINT64_MAX \u003d\u003d ULLONG_MAX for every sane 64-bit platform and UINT64_MAX \u003d\u003d ULONG_MAX for most 64-bit compilers (visible exceptions are windows x86 compilers).\n\nWell, in TF-A you can do what you want, I have no right to say anything for it, but please do not try to force other projects to use these UINT64_MAX/ULLONG_MAX/ULONG_MAX comparisons nonsenses.\n\nAlso note that mv-ddr is not my library. As I said before this library is used by other projects. So if you want some radical changes, first discuss it with U-Boot people and coordinate any change in this library. Otherwise you are going to break other projects and create a mess again with custom patches for mv-ddr library. Some months ago I have synchronization of mv-ddr code in U-Boot and on github repo and I really do not want to do it again, just because you want to break builds.\n\nAlso to make it clear I\u0027m against UINT64_MAX/ULLONG_MAX/ULONG_MAX comparisons in U-Boot codebase.",
      "parentUuid": "4e294781_79085d99",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff12e8df_daedccb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-10-28T12:41:03Z",
      "side": 1,
      "message": "Hi, sorry, perhaps I\u0027ve not made my suggestion clear. I\u0027m not recommending introducing any preprocessor workarounds, but rather introducing an explicit cast to maintain the validity of these debug print specifiers regardless of the width of `uint64_t`. Just replacing something like this:\n\n    DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n\nWith this:\n\n    DEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", (unsigned long long)read_pattern_64[edge]));\n\nThis would ensure the code continues to build both before and after these changes.\n\nFundamentally, the issue is that this code assumes the underlying type of the fixed-width typedefs - we need to move away from that for the reasons already stated elsewhere in the discussion.",
      "parentUuid": "d335e8cc_26f1977c",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46ff4cc8_244cb4bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-28T14:32:42Z",
      "side": 1,
      "message": "So please send whole patch and not just one line chunks as now I\u0027m totally confused what you are proposing with this change.",
      "parentUuid": "ff12e8df_daedccb0",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ba46bf8_473b40b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-28T17:33:52Z",
      "side": 1,
      "message": "From 3dc3dfafb2d4cb90042df653192335c4ce188d54 Mon Sep 17 00:00:00 2001\nFrom: Scott Branden \u003cscott.branden@broadcom.com\u003e\nDate: Thu, 28 Oct 2021 10:30:33 -0700\nSubject: [PATCH] mv_ddr_4_training: cast uint64_t to unsigned long long\n\nCast uint64_t to unsigned long long to use hard coded llx printf\nformat specifier rather than PRIx64 printf specifier that is supposed\nto be used for uint64_t fixed width data type.\n\nSigned-off-by: Scott Branden \u003cscott.branden@broadcom.com\u003e\n---\n mv_ddr4_training_leveling.c | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/mv_ddr4_training_leveling.c b/mv_ddr4_training_leveling.c\nindex 4c0c0ab..2f6939f 100644\n--- a/mv_ddr4_training_leveling.c\n+++ b/mv_ddr4_training_leveling.c\n@@ -249,7 +249,7 @@ static u8 mv_ddr4_xsb_comp_test(u32 dev_num, u32 subphy_num, u32 if_id,\n \n \t\tDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"xsb comp: if %d bus id %d\\n\", 0, subphy_num));\n \t\tfor (edge \u003d 0; edge \u003c 8; edge++)\n-\t\t\tDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", read_pattern_64[edge]));\n+\t\t\tDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"0x%16llx\\n\", (unsigned long long)read_pattern_64[edge]));\n \t\tDEBUG_LEVELING(DEBUG_LEVEL_INFO, (\"\\n\"));\n \t} else if (MV_DDR_IS_32BIT_IN_64BIT_DRAM_MODE(tm-\u003ebus_act_mask, subphy_max)) {\n \t\tstatus \u003d ddr3_tip_if_write(0, ACCESS_TYPE_MULTICAST, PARAM_NOT_CARE, ODPG_DATA_CTRL_REG,\n-- \n2.33.1",
      "parentUuid": "46ff4cc8_244cb4bd",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d0ca23b_431f0037",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-28T17:46:12Z",
      "side": 1,
      "message": "Ok! If that is all then send a pull request to main repository. Just this change should be fine and safe.",
      "parentUuid": "6ba46bf8_473b40b7",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6abdcfc_9a84104e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000319
      },
      "writtenOn": "2021-10-29T17:34:42Z",
      "side": 1,
      "message": "Hi Pali, thanks for approving the pull request in the marvell repo:\nhttps://github.com/MarvellEmbeddedProcessors/mv-ddr-marvell/pulls\n\nHow long till it is committed?  We need it in for this ATF change to pass the builds (and Manish is looking to have it in for the ATF release first half of Novembert)",
      "parentUuid": "6d0ca23b_431f0037",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f1807da_904b2aba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-29T21:09:04Z",
      "side": 1,
      "message": "\u003e How long till it is committed?\n\nI do not know. Try to ping people for Armada-related patches as suggested here: https://github.com/MarvellEmbeddedProcessors/linux-marvell/issues/20#issuecomment-924807704",
      "parentUuid": "d6abdcfc_9a84104e",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "787ed96e_b9f05dc2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000143
      },
      "writtenOn": "2021-10-29T21:24:48Z",
      "side": 1,
      "message": "Merged it to the master branch.",
      "parentUuid": "9f1807da_904b2aba",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bc6f2c8_b880e754",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000451
      },
      "writtenOn": "2021-10-29T21:32:47Z",
      "side": 1,
      "message": "Perfect!",
      "parentUuid": "787ed96e_b9f05dc2",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d7c80bf_38aaa2c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000102
      },
      "writtenOn": "2021-11-02T15:37:30Z",
      "side": 1,
      "message": "@Scott, number of failures are quite less now, please let us know if you need any help from us.",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2e2f92b_c44ffc03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000049
      },
      "writtenOn": "2021-11-02T15:45:02Z",
      "side": 1,
      "message": "FYI the \"Run Boot Test\" failures are a CI Infrastructure issue with one if the FVP\u0027s. Ignore them.\n\nMainly the \"Run Build Tests\" https://ci.trustedfirmware.org/job/tf-ci-gateway/16408/ are what need looking at.",
      "revId": "2777eb78fc74be114c6b1b8e94ad659a8fbfd0dc",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}