{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "185efd05_d95b8193",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 19,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2024-08-12T16:11:32Z",
      "side": 1,
      "message": "nit: the feature",
      "range": {
        "startLine": 19,
        "startChar": 3,
        "endLine": 19,
        "endChar": 10
      },
      "revId": "3cfb1a2ab07b1ea5f84f4952a7882703a74c8d34",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8858c10_2cc622c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2024-08-12T16:11:32Z",
      "side": 1,
      "message": "Nit otherwise LGTM",
      "revId": "3cfb1a2ab07b1ea5f84f4952a7882703a74c8d34",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1486910_e29c5fb4",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 15
      },
      "lineNbr": 1539,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-08-12T17:05:29Z",
      "side": 1,
      "message": "could this be improvised ?\n\nIs there a possibility to bring this check inside the helper function\n``is_feat_supported`` ? as we evaluate other values inside it.",
      "range": {
        "startLine": 1539,
        "startChar": 0,
        "endLine": 1539,
        "endChar": 52
      },
      "revId": "3cfb1a2ab07b1ea5f84f4952a7882703a74c8d34",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f864f4a_87089fd2",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 15
      },
      "lineNbr": 1539,
      "author": {
        "id": 1000660
      },
      "writtenOn": "2024-08-12T17:06:22Z",
      "side": 1,
      "message": "** ``is_feat_spe_supported``",
      "parentUuid": "b1486910_e29c5fb4",
      "range": {
        "startLine": 1539,
        "startChar": 0,
        "endLine": 1539,
        "endChar": 52
      },
      "revId": "3cfb1a2ab07b1ea5f84f4952a7882703a74c8d34",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9512dd8a_6354161e",
        "filename": "lib/el3_runtime/aarch64/context_mgmt.c",
        "patchSetId": 15
      },
      "lineNbr": 1539,
      "author": {
        "id": 1000108
      },
      "writtenOn": "2024-08-13T08:14:12Z",
      "side": 1,
      "message": "When I reviewed this patch, I had the same question in my head. Eventually, I think it is deliberately written in current way. The reason is if we put the asymmetric checking into `is_feat_spe_supported`, it will be invoked by both the primary CPU and secondary CPUs. On the other hand, we only want to check the asymmetric feature when every core does itself but it is irrelevant to the primary CPU.\n\nThis is my understanding, we would wait for @Manish.Pandy\u0027s response.",
      "parentUuid": "7f864f4a_87089fd2",
      "range": {
        "startLine": 1539,
        "startChar": 0,
        "endLine": 1539,
        "endChar": 52
      },
      "revId": "3cfb1a2ab07b1ea5f84f4952a7882703a74c8d34",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}