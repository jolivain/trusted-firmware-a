{
  "comments": [
    {
      "key": {
        "uuid": "ac7b073c_2586e435",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "`PROJECT_SOURCE_DIR` exists for this purpose: https://cmake.org/cmake/help/v3.0/variable/PROJECT_SOURCE_DIR.html",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa43c662_35b479cd",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-18T14:01:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac7b073c_2586e435",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b213f5a_b5301689",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2020-08-18T20:32:08Z",
      "side": 1,
      "message": "Yes, but the documentation indicates unwanted side effects. \"This is the source directory of the last call to the project() command made in the current directory scope or one of its parents.\"\n* Are you 100% sure this will point to the top of the TF-A tree under all circumstances? \n* The project command is only called at line 100. What will be the value here?\n\nI think if I would add a super project above TF-A then PROJECT_SOURCE_DIR here would refer to the directory of the super project and this the build will break.\n\nFor me using PROJECT_SOURCE_DIR does not seem to be safe. We want a variable which refers to TF-A root under any circumstances.",
      "parentUuid": "aa43c662_35b479cd",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5b1f156_3f2bf239",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-19T10:49:58Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean by it being unsafe - it is quite well-defined. It is precisely equivalent to `set(PROJECT_SOURCE_DIR ...)` at the point of the `project()` call.",
      "parentUuid": "7b213f5a_b5301689",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d58fef1_85d7a327",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-20T13:51:05Z",
      "side": 1,
      "message": "As Chris says, as far as I\u0027m aware in all cases this is functionally equivalent to the previous solution. Thus it\u0027s probably best to use PROJECT_SOURCE_DIR as it is standard CMake. Re: the project() command line being called quite late, PROJECT_SOURCE_DIR still provides a lot of value as it is used whenever any source files are included later on (e.g. in platform.cmake) - in place of where TFA_ROOT_DIR was used before.\nI briefly tested the situation you mentioned - a super project above TF-A which calls project() then add_subdirectory()s TF-A. This still works fine, when TF-A calls project() it sets PROJECT_SOURCE_DIR to the correct path at this scope level.",
      "parentUuid": "c5b1f156_3f2bf239",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3af8e7b_2b258cc3",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "If you add `${TFA_ROOT_DIR}/cmake` to `CMAKE_MODULE_PATH`, you can simply use:\n\n    include(GetTFACMF)",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e392b5d5_2c231a59",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-18T14:01:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3af8e7b_2b258cc3",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 41,
        "endChar": 46
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5f13cae_db6822a1",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "We shouldn\u0027t be setting this explicitly within CMakeLists.txt. `CMAKE_C_COMPILER_ID` exists for this purpose, and is derived from the toolchain file: https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 49
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e1d96ed_749c5a67",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2020-08-18T20:32:08Z",
      "side": 1,
      "message": "Our compiler specific files work different to toolchain files. Also compiler id is not well defined.\n* For example amrclang 6.x comes with two assemblers, and thus supports two different dialects. Shall the two assemblers be covered with the same compiler id? Or a different one?\n* Which documentation is valid for the compiler id if behavior is project specific, CMake or project documentation?\n\nYes, cmake has build in methodology to select the compiler and to communicate the information to build files. But the documentation is not clear, and if the behavior is project specific it generates confusion.",
      "parentUuid": "d5f13cae_db6822a1",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 49
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ce3b7e4_1b906066",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-19T10:49:58Z",
      "side": 1,
      "message": "\u003e For example amrclang 6.x comes with two assemblers, and thus supports two different dialects. Shall the two assemblers be covered with the same compiler id? Or a different one?\n\nI\u0027m unsure of what you mean by armclang coming with two assemblers. An Arm Compiler 6 toolchain file is expected to set `CMAKE_ASM_COMPILER` to `armclang` (as is the behaviour with GCC/Clang):\n\nhttps://github.com/Kitware/CMake/blob/64a7f491ef8ab6f70a77f89c91d1e7e9d549333e/Modules/Compiler/ARMClang-ASM.cmake\n\n`armclang` itself, when parsing assembly files, defaults to Arm\u0027s unified assembly syntax, but an assembly file can always switch back to divided assembly syntax with the `.syntax divided` directive.\n\n\u003e Which documentation is valid for the compiler id if behavior is project specific, CMake or project documentation.\n\nThe compiler identifier should never be project-specific - project-specific toolchain information *has* to come through project-specific means, either by deriving information from the toolchain file, or directly through the toolchain file itself. Not doing so means potentially breaking things like `find_package()` (uses `CMAKE_FIND_ROOT_PATH_MODE_*`), `try_compile()` (`CMAKE_TRY_COMPILE_TARGET_TYPE`), and anything else that derives information from variables expected to have been created by the toolchain machinery.\n\nIf you\u0027re setting variables like `TFA_MY_COMPILER_METADATA` from the toolchain file, that\u0027s perfectly fine and that should be documented by the project, but the compiler identifiers are standardised and many third-party libraries rely on them (e.g. the `Generic` compiler ID for baremetal targets)",
      "parentUuid": "9e1d96ed_749c5a67",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 49
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b72daa50_72bd8623",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "As cache variables, these should be given an adequate namespace (`TFA`?). This allows them to be grouped within the CMake GUI.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c9e6ef1_d55e7ad6",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-18T14:01:18Z",
      "side": 1,
      "message": "Sorry, I\u0027m not sure quite what you mean when you say namespace wrt. cache variables. Does this consist of just prefixing the cache variables with `TFA_` or something like this?",
      "parentUuid": "b72daa50_72bd8623",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "187ef440_23bb8fc0",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2020-08-18T20:32:08Z",
      "side": 1,
      "message": "TF-A is not planning to use the cmake-gui to edit the configuration. Also this setting has an effect on multiple components. So there is no benefit adding a prefix but it may generate confusion. If the variable is prefixed with TF-A will it affect the whole project or just TF-A core?",
      "parentUuid": "8c9e6ef1_d55e7ad6",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e009acdb_4a4ccb23",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-19T10:49:58Z",
      "side": 1,
      "message": "\u003e TF-A is not planning to use the cmake-gui to edit the configuration.\n\nI\u0027m not sure what you mean by \"TF-A is not planning to use the cmake-gui to edit the configuration\"... that\u0027s a choice for the user, and is not something that a well-formed CMake project should ever dictate. Many people will be familiar with CMake\u0027s existing configuration toolchain from using other large-scale CMake projects like LLVM, Boost, OpenCV, etc. so making it impossible to do is going to make things very unergonomic indeed for a lot of people, especially for people who configure their projects through their IDE (like JetBrains IntelliJ/CLion and Visual Studio allow).\n\n\u003e Also this setting has an effect on multiple components. So there is no benefit adding a prefix but it may generate confusion. If the variable is prefixed with TF-A will it affect the whole project or just TF-A core?\n\nI\u0027m not sure I understand what you mean, I\u0027m unsure of how it would namespacing would generate confusion.",
      "parentUuid": "187ef440_23bb8fc0",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dfe3c62_b4edc1fd",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "Why are these being set within the CMakeLists.txt as opposed to dedicated toolchain files, per: https://cmake.org/cmake/help/v3.18/manual/cmake-toolchains.7.html#cross-compiling-toolchain",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 86,
        "endChar": 31
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44fe6fd1_4d4b042f",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "Why are these being set within the CMakeLists.txt as opposed to a dedicated toolchain file per: https://cmake.org/cmake/help/v3.18/manual/cmake-toolchains.7.html#cross-compiling-toolchain\n\nThis is asking for pain if we need to pull in dependencies via `find_package()` at any point, as the search paths and target information are going to be incorrect.",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 86,
        "endChar": 31
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de278470_82b2b8a6",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2020-08-18T20:32:08Z",
      "side": 1,
      "message": "Because this is a bare-metal project and we need more control. For bare-metal projects the standard \"build with any compiler available\" operation is bad.\n\nCan you please explain how and why find_package() is going to misbehave?",
      "parentUuid": "44fe6fd1_4d4b042f",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 86,
        "endChar": 31
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e35bf5e5_b53586c2",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 93,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "Are all of these includes necessary? Can some of them be moved to a more a local scope or removed altogether? This seems like a very large number of top-level dependencies.",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 93,
        "endChar": 29
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2031398_475c3448",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 93,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-18T14:01:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e35bf5e5_b53586c2",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 93,
        "endChar": 29
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed8ce30c_ad223716",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 93,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2020-08-18T20:32:08Z",
      "side": 1,
      "message": "We should use the \"include what you use\" principle, so +1 for this. At the same time this fix may be out of scope for the first version.",
      "parentUuid": "e2031398_475c3448",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 93,
        "endChar": 29
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de60bea9_149931e0",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 93,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-20T13:51:05Z",
      "side": 1,
      "message": "I did make this fix. It is quite hard to validate that it is 100% correct due to the fact that, as far as I can tell, once I include one of these library files in any of the included CMake files below, it becomes available to all of the files included later. So there could be a few missing includes due to the fact this would not error in the current ordering. These situations can hopefully be caught by review/fixed later if they surface.",
      "parentUuid": "ed8ce30c_ad223716",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 93,
        "endChar": 29
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f928bc3_f5fbc474",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 103,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "These can all be set to `${PROJECT_SOURCE_DIR}`.",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 103,
        "endChar": 23
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "052f84c1_5261206d",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 103,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-18T14:01:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f928bc3_f5fbc474",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 103,
        "endChar": 23
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "974114cb_61fb940f",
        "filename": "CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 103,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2020-08-18T20:32:08Z",
      "side": 1,
      "message": "Pls, no! See my comment above about this variable.",
      "parentUuid": "052f84c1_5261206d",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 103,
        "endChar": 23
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8573d842_28246f6e",
        "filename": "cmake/BuildMessage.cmake",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "This is not a portable solution and should be doable with a simple:\n\n    configure_file(\n        \"${CMAKE_CURRENT_SOURCE_DIR}/build_message.c.in\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/build_message.c\")",
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ead861ed_d7a0f958",
        "filename": "cmake/BuildMessage.cmake",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-18T14:01:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8573d842_28246f6e",
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49d23818_5789eb09",
        "filename": "cmake/BuildMessage.cmake",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2020-08-18T20:32:08Z",
      "side": 1,
      "message": "Handling the build message is quite complex. This file shall only be \"configured\" if other files have been changed, but in such case always.\nI can not tell if configur_file() keeps the correct behavior or not. Careful testing is needed.\n\nChris: can you explain you portability concern?",
      "parentUuid": "ead861ed_d7a0f958",
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0a505f2_d0d3310a",
        "filename": "cmake/BuildMessage.cmake",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-19T10:49:58Z",
      "side": 1,
      "message": "The portability concern is that we are directly relying on the shell interpreter to do something that CMake has existing support for.\n\n`configure_file()` is executed on every configuration run, but CMake will only overwrite the file if its content differs from the previous version (to prevent the generated build system from re-building anything that depends on the file if there were no changes).",
      "parentUuid": "49d23818_5789eb09",
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1df2cf50_067baa79",
        "filename": "cmake/BuildMessage.cmake",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2020-08-20T13:51:05Z",
      "side": 1,
      "message": "I would say the configure_file method seems preferable here, given that it is properly supported by CMake and as Chris says likely to be more portable. I would also argue it\u0027s a bit neater. In terms of whether the implementation I have provided fulfils the requirements you set out Gyorgy, I\u0027m not totally sure - I would appreciate some reviews on this part in particular 😊",
      "parentUuid": "d0a505f2_d0d3310a",
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2754832f_fac613f2",
        "filename": "cmake/GetTFACMF.cmake",
        "patchSetId": 8
      },
      "lineNbr": 111,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-08-11T16:31:35Z",
      "side": 1,
      "message": "I must admit that I\u0027m quite concerned by the verbosity that this dependency introduces. The benefit of this custom toolchain manager does not seem to be obvious, and it seems to obscure much of the fundamental CMake logic that most people will be familiar with. Is this truly necessary over simply using well-formed toolchain files passed through `CMAKE_TOOLCHAIN_FILE`: https://cmake.org/cmake/help/latest/variable/CMAKE_TOOLCHAIN_FILE.html",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 111,
        "endChar": 51
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2aa6678_15f9bb2e",
        "filename": "cmake/GetTFACMF.cmake",
        "patchSetId": 8
      },
      "lineNbr": 111,
      "author": {
        "id": 1000018
      },
      "writtenOn": "2020-08-18T20:32:08Z",
      "side": 1,
      "message": "This has much wider scope than the toolchain file. TFACMF (TF-A CMake Framework) is a CMake script library. The intention is to share project independent functionality with other projects like TFTF to avoid code duplication and to spare work.\n\nPlease see my previous response on CMAKE_TOOLCHAIN_FILE file.",
      "parentUuid": "2754832f_fac613f2",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 111,
        "endChar": 51
      },
      "revId": "d706bbf74786999786fda2be6df0a922a893a5f9",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}