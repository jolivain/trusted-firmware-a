{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1a054f9b_dd8a944d",
        "filename": "include/lib/cpus/aarch64/cortex_x3.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-11-15T17:35:44Z",
      "side": 1,
      "message": "I see convention has changed in the TRM. Could you propagate the change across the whole file so it\u0027s consistent? It would also be good if we maintained consistency at least across the cortex X cores. Although I checked the 510 and it also has the new naming, so the change might be widespread and we might be better off sticking to the old naming.",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8daa885b_ce8e63cd",
        "filename": "include/lib/cpus/aarch64/cortex_x3.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-15T21:07:25Z",
      "side": 1,
      "message": "@Boyan Karatotev, \nI see your point. \n\nThe workaround specifically mention \"IMP_CPUPWRCTLR_EL1\" based on updated TRM. SDENs are not updated consistently either for old erratas. And changing names for register not associated with this patch could be done separately as a refactor or so? As you mentioned this may be more widely applicable now for more CPUs.",
      "parentUuid": "1a054f9b_dd8a944d",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa1ed45c_df655194",
        "filename": "include/lib/cpus/aarch64/cortex_x3.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2022-11-16T10:26:20Z",
      "side": 1,
      "message": "I agree with both perspectives here. It makes sense to treat the register names consistently, however, that is probably out of the scope of this patch. A second path to refactor this and other platforms would probably be appropriate.",
      "parentUuid": "8daa885b_ce8e63cd",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac81f7ed_9a2cbaa2",
        "filename": "include/lib/cpus/aarch64/cortex_x3.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-11-16T11:42:50Z",
      "side": 1,
      "message": "Could you then revert the naming change until this patch? Would be good to keep it consistent until then.",
      "parentUuid": "fa1ed45c_df655194",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbba97bb_43c67f01",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-11-15T17:35:44Z",
      "side": 1,
      "message": "These two should be moved out of the #ifdef. See the a77 on a template way we do this.",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a662c353_05f72969",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-15T21:07:25Z",
      "side": 1,
      "message": "Suggest the following:\n1. move the \"mov\tx15, x30\" to the very beginning of the cortex_x3_reset_func to save off link register. A\n2. Also, to be consistent with the usage in other cores use x19(instead of x15) to save the link register unless there is something that constraints it.\n3. bl\tcpu_get_rev_var should be outside and just before the #ifdef as we used the revision info for validating the applicability of the errata for the a given version of the CPU\n4. bl\tcpu_get_rev_var returns revison info rxpx into x0 register which might be better off saved(typically we use \"mov     x18, x0\" after \"bl\tcpu_get_rev_var\"). For the time being , since this is the first errata implemented for this cpu this may be avoided to save couple of mov instructions, but when adding a second errata we will have to use this",
      "parentUuid": "cbba97bb_43c67f01",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c4aa223_e5e980e4",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-15T21:16:39Z",
      "side": 1,
      "message": "Example from A78(lib/cpus/aarch64/cortex_a78.S)    \n\"\nfunc cortex_a78_reset_func\n        mov     x19, x30\n        bl      cpu_get_rev_var\n        mov     x18, x0\n\n#if ERRATA_A78_1688305\n        mov     x0, x18\n        bl      errata_a78_1688305_wa\n#endif\n\n#if ERRATA_A78_1941498\n        mov     x0, x18\n        bl      errata_a78_1941498_wa\n#endif\n   \n\n...\n        ret     x19\nendfunc cortex_a78_reset_func\n\"",
      "parentUuid": "a662c353_05f72969",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e243e8f5_847e8d05",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2022-11-16T10:26:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c4aa223_e5e980e4",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd1124cd_c14504c8",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000883
      },
      "writtenOn": "2022-11-15T17:35:44Z",
      "side": 1,
      "message": "ditto",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99ab2b52_3a192756",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-15T21:07:25Z",
      "side": 1,
      "message": "Can delete and save this instruction using the \"ret \u003creg\u003e\" suggested below.",
      "range": {
        "startLine": 78,
        "startChar": 1,
        "endLine": 78,
        "endChar": 13
      },
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f91ae447_0a91cb65",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2022-11-16T10:26:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99ab2b52_3a192756",
      "range": {
        "startLine": 78,
        "startChar": 1,
        "endLine": 78,
        "endChar": 13
      },
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "104c8f38_3485a3a9",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2022-11-16T10:26:20Z",
      "side": 1,
      "message": "Stashed lr in x19 at the top of the function and returning directly to it.",
      "parentUuid": "dd1124cd_c14504c8",
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bc0a516_431a708b",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2022-11-15T21:07:25Z",
      "side": 1,
      "message": "You can use \"ret x19\" if you replace x15 with x19 in the suggested changes above.",
      "range": {
        "startLine": 82,
        "startChar": 1,
        "endLine": 82,
        "endChar": 4
      },
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fc97bf1_812b50ea",
        "filename": "lib/cpus/aarch64/cortex_x3.S",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000744
      },
      "writtenOn": "2022-11-16T10:26:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6bc0a516_431a708b",
      "range": {
        "startLine": 82,
        "startChar": 1,
        "endLine": 82,
        "endChar": 4
      },
      "revId": "3b593d66d76049e3c14701a6a73c6d3c19e58a28",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}