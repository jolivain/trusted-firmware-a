{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2f89ff6d_1c1b980b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-03-20T08:14:06Z",
      "side": 1,
      "message": "It would be nice with a reference to the specification.",
      "range": {
        "startLine": 10,
        "startChar": 6,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5416373c_8e0f6510",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-04-07T14:59:34Z",
      "side": 1,
      "message": "Hi Jens, this ABI is atm treated as impdef for Hafnium. It may appear in a next iteration of the FF-A specification. When this appears, we can populate a comment with the cross reference originated from spec.",
      "parentUuid": "2f89ff6d_1c1b980b",
      "range": {
        "startLine": 10,
        "startChar": 6,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "219a9757_1d862bf0",
        "filename": "plat/hisilicon/hikey960/hikey960_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-03-21T09:47:07Z",
      "side": 1,
      "message": "May this be moved to this platform change https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/19899 ?",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4114ebfb_bf5657c5",
        "filename": "plat/hisilicon/hikey960/hikey960_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-03-22T22:56:31Z",
      "side": 1,
      "message": "Patch 19899\u0027s scope is FVP platform.I feel it might be bit odd to modify hikey source file in that patch. I have no strong opinion about this. I am happy to move it.",
      "parentUuid": "219a9757_1d862bf0",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4463d94b_cc5cd139",
        "filename": "plat/hisilicon/hikey960/hikey960_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-04-07T15:03:06Z",
      "side": 1,
      "message": "I agree but then why creating a dedicated platform change for FVP, but not Hikey960 and qemu?\nCurrent change relates to \u0027adding support for FFA_EL3_INTR_HANDLE_32 ABI\u0027, but it isn\u0027t generic in that it also adds platform changes for the said platforms?",
      "parentUuid": "4114ebfb_bf5657c5",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0830624_ccc26c07",
        "filename": "plat/hisilicon/hikey960/hikey960_bl31_setup.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-04-10T19:52:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4463d94b_cc5cd139",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24a678b1_8cc2571c",
        "filename": "plat/qemu/common/qemu_common.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-03-21T09:47:07Z",
      "side": 1,
      "message": "May this be moved to this platform change https://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/19899 ?",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60a63bbd_35147218",
        "filename": "plat/qemu/common/qemu_common.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-04-10T19:52:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24a678b1_8cc2571c",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28e8441a_5dfd53c0",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-03-21T07:10:08Z",
      "side": 1,
      "message": "Do we need to check SCR_EL3.FIQ too?",
      "range": {
        "startLine": 1166,
        "startChar": 6,
        "endLine": 1166,
        "endChar": 19
      },
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfc8e145_8743d125",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-03-21T16:46:31Z",
      "side": 1,
      "message": "Food for thought, would it be fair adding a safeguard similarly to how secure interrupts are delegated to SEL2:\nhttps://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/services/std_svc/spmd/spmd_main.c#n233\nThis would permit gating code paths that would resume the SPMC by any other FF-A interface than FFA_SUCCESS (as a return from FFA_EL3_INTR_HANDLE).",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15acacfd_3495295c",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-03-22T22:43:32Z",
      "side": 1,
      "message": "I see that the flag secure_interrupt_ongoing is helping us to enforce the following rule from the spec: \"This function must be used by the SPMC to request the SPMD to resume Normal world execution once the exception has been handled.\"\n\nThis is especially needed because we are leaving EL3 to enter S-EL2 and entering back EL3 to further resume NS-EL2/NS-EL1(which is where the secure G1 interrupt triggered). this flag can help SPMD to catch spurious invocation of FFA_NORMAL_WORLD_RESUME ABI by SPMC when there is no G1 secure interrupt involved.\n\nHowever, I am not seeing such need for Group0 interrupt handling. We entered EL3 through a SMC call and upon success, we resume SPMC. Can you please give an example how safeguarding group0 interrupt handling code paths can help us catch bugs?",
      "parentUuid": "bfc8e145_8743d125",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ded1e536_3b5c3c76",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-03-22T22:43:32Z",
      "side": 1,
      "message": "If SCR_EL3.FIQ was not 0, SPMC would not even enter the fiq_handler[1] that would allow it to invoke FFA_EL3_INTR_HANDLE SMC call. Moreover, if SCR_EL3.FIQ is incorrect, execution would be trapped to fiq handler of EL3 exception handler vector[2], not here. I am wondering if the check would be useful.\n\n[1] https://review.trustedfirmware.org/c/hafnium/hafnium/+/19896/3/src/arch/aarch64/hypervisor/handler.c#1089\n[2] https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/bl31/aarch64/runtime_exceptions.S#n352",
      "parentUuid": "28e8441a_5dfd53c0",
      "range": {
        "startLine": 1166,
        "startChar": 6,
        "endLine": 1166,
        "endChar": 19
      },
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eebdfd49_604d05c6",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-03-23T07:57:42Z",
      "side": 1,
      "message": "The specification says:\nAn invocation of this ABI returns the NOT_SUPPORTED error code in the following scenarios:\n– The ABI is invoked at an unsupported FF-A instance.\n– The ABI is invoked at S-EL1 or S-EL2 and SCR_EL3.FIQ\u003d1.\n\nIf Hafnium can\u0027t misuse that, that\u0027s good, but there\u0027s bound to be more SPMCs out there.",
      "parentUuid": "ded1e536_3b5c3c76",
      "range": {
        "startLine": 1166,
        "startChar": 6,
        "endLine": 1166,
        "endChar": 19
      },
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c2cbd7e_49be5057",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-03-26T20:33:43Z",
      "side": 1,
      "message": "agree with Madhu here.",
      "parentUuid": "15acacfd_3495295c",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12406006_40d01f70",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-03-26T20:33:43Z",
      "side": 1,
      "message": "i dont think we have an SPMD configuration where SCR_EL3.FIQ is one. If SPMD is turned on, by default, we have SCR_EL3.FIQ\u003d0 no?",
      "parentUuid": "eebdfd49_604d05c6",
      "range": {
        "startLine": 1166,
        "startChar": 6,
        "endLine": 1166,
        "endChar": 19
      },
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52b5555a_d6f0e685",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000120
      },
      "writtenOn": "2023-03-27T08:23:59Z",
      "side": 1,
      "message": "Good point. If that\u0027s the case then there\u0027s no need to check anything more here.",
      "parentUuid": "12406006_40d01f70",
      "range": {
        "startLine": 1166,
        "startChar": 6,
        "endLine": 1166,
        "endChar": 19
      },
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0122cca3_0bb347d4",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-04-07T14:59:34Z",
      "side": 1,
      "message": "I\u0027m thinking of EL3 G0 int. handler further delegating the interrupt to normal world by SDEI. If this use case exists, we\u0027re not guarded against the OS SDEI handler emitting a fresh FF-A SMC and enter the SPMD again. It would end up resuming the SPMC with a func id different from FFA_SUCCESS as a result of FFA_EL3_INTR_HANDLE and panic.\nI agree this is convoluted, and would requires more changes like, SPMC must exit in a clean state before calling FFA_EL3_INTR_HANDLE (like done by a NS int. managed exit with current vCPU is parked and \u0027other world vCPU\u0027 context restored).\nWe may ignore this for now. I suspect this problem already exists with other interfaces like PSCI.",
      "parentUuid": "6c2cbd7e_49be5057",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d28d5fb0_80c24277",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2023-04-07T14:59:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52b5555a_d6f0e685",
      "range": {
        "startLine": 1166,
        "startChar": 6,
        "endLine": 1166,
        "endChar": 19
      },
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6cd6b7c_75df87a5",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2023-04-10T15:07:18Z",
      "side": 1,
      "message": "Olivier, this is a great point. In my mind, i had assumed that the EL3 interrupt handler would not go back to the normal world, perhaps we should make that explicit in the platform handler description and expectations.\nEven if we do go back to normal world, the sequence would really be:\nNWd FFA SMC-\u003eSP execution-\u003eGroup0 interrupt-\u003eEL3_FFA_INTR SMC-\u003eSDEI to OS NWd (save secure state, restore NS state)-\u003eSDEI handler calls FFA SMC-\u003e lots of trouble.\nis that what you had in mind?\nI agree, hypothetically if we did this, we\u0027d have to make it look like a NS interrupt pre-empted SP execution and have SPMC make it look like it is entering normal world but then we\u0027d have problems around guarantees we have for masking interrupts or run to completion for SPs (and even that can be worked around with a little bit of effort i think, since group0 interrupt can only occur during SP execution since SPMC has interrupts masked during its execution).\n\nUnresolving comment, so that madhu can make the change to add some comments in description for the plat_ function on expectations to NOT do this? \ni\u0027m thinking this should be a follow up patch to enforce such state changes, but you are right, other paths already exist where this is not enforced. How do we track this tech debt?",
      "parentUuid": "0122cca3_0bb347d4",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "622a6e49_f611d359",
        "filename": "services/std_svc/spmd/spmd_main.c",
        "patchSetId": 2
      },
      "lineNbr": 1166,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2023-04-10T19:52:39Z",
      "side": 1,
      "message": "Okay, I will update the documentation and leave a comment as well.",
      "parentUuid": "f6cd6b7c_75df87a5",
      "revId": "f89ed7cec4afb2169eb83f85b6c7f7c5768bd3f5",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}