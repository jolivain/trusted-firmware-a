{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9b8fe4f7_18de3aef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-14T13:11:31Z",
      "side": 1,
      "message": "migth rephrase:\n for platform attestation token and realm attestation token signing key.",
      "range": {
        "startLine": 7,
        "startChar": 40,
        "endLine": 7,
        "endChar": 69
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "939f850d_466a8959",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-15T17:42:18Z",
      "side": 1,
      "message": "That sentence might be too long. We try to keep it as short and concise as possible.",
      "parentUuid": "9b8fe4f7_18de3aef",
      "range": {
        "startLine": 7,
        "startChar": 40,
        "endLine": 7,
        "endChar": 69
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d937a47_f6ad1531",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-16T08:41:14Z",
      "side": 1,
      "message": "ACK, but a bit of rephrasing would make it clearer. What about this:\n\nfor attest token and signing key SMCs",
      "parentUuid": "939f850d_466a8959",
      "range": {
        "startLine": 7,
        "startChar": 40,
        "endLine": 7,
        "endChar": 69
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f9575f7_667e2b40",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-16T16:24:56Z",
      "side": 1,
      "message": "Ack. I will update it on the next push",
      "parentUuid": "9d937a47_f6ad1531",
      "range": {
        "startLine": 7,
        "startChar": 40,
        "endLine": 7,
        "endChar": 69
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd14d546_1931e1c2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-17T16:01:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f9575f7_667e2b40",
      "range": {
        "startLine": 7,
        "startChar": 40,
        "endLine": 7,
        "endChar": 69
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "141bbd2f_a8bb983b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-17T18:42:40Z",
      "side": 1,
      "message": "I had to rewrite this as the tf-a-commitlint checks fail if the head is \u003e 50 characters.",
      "parentUuid": "cd14d546_1931e1c2",
      "range": {
        "startLine": 7,
        "startChar": 40,
        "endLine": 7,
        "endChar": 69
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34f752c0_faf8bcc4",
        "filename": "include/services/rmmd_svc.h",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-14T13:11:31Z",
      "side": 1,
      "message": "nit: vertical alignment",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 85,
        "endChar": 26
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c982b94_cb5d359d",
        "filename": "include/services/rmmd_svc.h",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-15T17:42:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34f752c0_faf8bcc4",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 85,
        "endChar": 26
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0d82f0d_9317364d",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-14T13:11:31Z",
      "side": 1,
      "message": "nit: next line",
      "range": {
        "startLine": 62,
        "startChar": 68,
        "endLine": 62,
        "endChar": 70
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be90e507_0f972e8f",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-15T17:42:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0d82f0d_9317364d",
      "range": {
        "startLine": 62,
        "startChar": 68,
        "endLine": 62,
        "endChar": 70
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd7bd7c1_a79c00af",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-14T13:11:31Z",
      "side": 1,
      "message": "I think it can be removed and use the buf_pa instead.",
      "range": {
        "startLine": 86,
        "startChar": 1,
        "endLine": 86,
        "endChar": 38
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb6096b3_118be180",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-15T17:42:18Z",
      "side": 1,
      "message": "This is needed, as the call to plat_get_cca_attest_token() uses buf_pa to store the platform token and the hash needs to be passed from a different buffer.",
      "parentUuid": "dd7bd7c1_a79c00af",
      "range": {
        "startLine": 86,
        "startChar": 1,
        "endLine": 86,
        "endChar": 38
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c77e300c_bcb41a72",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-16T08:41:14Z",
      "side": 1,
      "message": "Not necessarily. It is the responsibility of the plat_get_cca_attest_token() implementer to take care of the hash. In most cases, the request will be forwarded to RSS so the hash value will be copied from its original location to another memory location (buffer or register; it depends on the comms interface between EL3 and RSS) before the platform token would overwrite it. \n\nIf EL3 would create the platform token then it still can create a temporary copy of the hash.",
      "parentUuid": "cb6096b3_118be180",
      "range": {
        "startLine": 86,
        "startChar": 1,
        "endLine": 86,
        "endChar": 38
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6083a5c5_514da3bc",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-16T16:24:56Z",
      "side": 1,
      "message": "Yes, you are totally right, but as far as I can remember, we try to avoid inout parameters on function calls. Let me double check anyway, as I might be wrong, and I will change this, then.",
      "parentUuid": "c77e300c_bcb41a72",
      "range": {
        "startLine": 86,
        "startChar": 1,
        "endLine": 86,
        "endChar": 38
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdbaf041_f1722916",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-14T13:11:31Z",
      "side": 1,
      "message": "I think an extra parameter will be needed:\n\n int rmmd_attest_get_signing_key(uint64_t buf_pa, uint64_t *buf_len,\n\t\t\t\tuint64_t ecc_curve, uint64_t pub_key_hash_algo_id)\n\nThis indicates the hash algo used by RMM to compute the hash of the public key (). RSS is going to use this param to validate whether the right public key hash is received in the rmmd_attest_get_platform_token(..) query. The goal is to include only the corresponding public key hash to the platform attestation token, which was previously derived as a response to the rmmd_attest_get_signing_key() query.",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 23
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fe319b6_ab4ad4d3",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-15T17:42:18Z",
      "side": 1,
      "message": "I think we should only add parameters here when we need them, to avoid make the patch too complicated. I guess we can add the parameters later, when needed, in a new patch.\n\nThat said, in rmmd_attest_get_platform_token() we check that challenge_hash_len corresponds to the len of the supported algorithms. Can we use that to derive the algorithm or am I talking about something different here?",
      "parentUuid": "cdbaf041_f1722916",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 23
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c3cb585_19820d05",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-16T08:41:14Z",
      "side": 1,
      "message": "I\u0027m okay if this can be added later.\n\nRMMD just forwards the request to the platform, I think it should not do any cross-checks between the rmmd_attest_get_signing_key() and rmmd_attest_get_platform_token().  The check can be done in the platform layer, in our case in RSS. But you are right the whole point of this new param would be to make RSS able to check that the hash value is sent in rmmd_attest_get_platform_token() is really the hash value of the public key (hashed with the algo, stated previously in rmmd_attest_get_signing_key() call) which corresponds to the private key derived earlier by RSS. This avoids that arbitrary data can be bound to the platform attestation token.",
      "parentUuid": "5fe319b6_ab4ad4d3",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 23
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9efcb057_358ded1b",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-16T16:24:56Z",
      "side": 1,
      "message": "Thanks for the clarification. I will see if I can add the changes to cater for this new argument in the current patchset. RMM patches are very close to merge and I don\u0027t want to risk delaying it, so if the changes are not relatively small we better leave this for when it is needed.",
      "parentUuid": "2c3cb585_19820d05",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 23
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90391b59_58ef7f69",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-14T13:11:31Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 138,
        "startChar": 1,
        "endLine": 139,
        "endChar": 34
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9770391_7ff762de",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2022-06-14T13:11:31Z",
      "side": 1,
      "message": "could be removed",
      "range": {
        "startLine": 145,
        "startChar": 1,
        "endLine": 145,
        "endChar": 24
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d183cd16_68058a82",
        "filename": "services/std_svc/rmmd/rmmd_attest.c",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-06-15T17:42:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9770391_7ff762de",
      "range": {
        "startLine": 145,
        "startChar": 1,
        "endLine": 145,
        "endChar": 24
      },
      "revId": "cfc88dd211bdfb4379376a16bff5291687af5041",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}