{
  "comments": [
    {
      "key": {
        "uuid": "95db68c5_43464a95",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 12
      },
      "lineNbr": 102,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-09-23T10:35:11Z",
      "side": 1,
      "message": "I still don\u0027t get why? This is a legitimate option for anything emulation based (FVP, QEMU, FPGA). And it should be guarded by #if (DEBUG \u003d\u003d 0) then, anyway.\n\nSo I would remove this from this generic code.\nWhat about a *compile time* warning (in a Makefile), for the combination of SUPPORT_UNKNOWN_MPID and !DEBUG? You have it in the FPGA platform.mk, but maybe this should live in some generic Makefile, to catch cases when people get excited about the prospect of this option and enable it for their hardware?\n\nAnd a *runtime* warning *iff* an unknown MPIDR is actually detected would be very useful.",
      "revId": "d9d5234956aad2937793bc5cb6c90770dfbe8196",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b95ff18_5e02350a",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 12
      },
      "lineNbr": 102,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-09-24T09:52:09Z",
      "side": 1,
      "message": "My first attempt was actually a runtime warning iff an unknown MPIDR was detected, however, this is not trivial: The MPIDR detection is one of the first things happening when the CPU is turned on and its runtime is not ready yet. In addition to that, the message would be printed every single time the CPU is turned on and, as we discussed, this is not what we want.\n\nI added this code here for two reasons:  1.- I wanted the message to be printed as soon as possible and this was the earliest location that could guarantee to me that there was a valid runtime and the console was initialized and 2.- This patch works on generic code (cpu_helpers) so if it was\"accidentally\" enabled on other platforms, it should print the warning message.",
      "parentUuid": "95db68c5_43464a95",
      "revId": "d9d5234956aad2937793bc5cb6c90770dfbe8196",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab2d3c27_f142dede",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 12
      },
      "lineNbr": 102,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-09-24T10:23:50Z",
      "side": 1,
      "message": "I understand where you are coming from, that\u0027s why I was thinking about printing some warnings *later*, but still check that we actually use this fallback code.\nSo this location here is probably fine, but it should only print a warning if we actually have an unuspported MPIDR.\nAs sketched in the other reply, either there is a way that you can check which CPU libraries have actually been initialised and are used, or you set a TAINTED flag somewhere in generic.S?",
      "parentUuid": "0b95ff18_5e02350a",
      "revId": "d9d5234956aad2937793bc5cb6c90770dfbe8196",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5954b024_1b2b8971",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 12
      },
      "lineNbr": 102,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-09-24T14:36:33Z",
      "side": 1,
      "message": "I will figure out a way to implement that then",
      "parentUuid": "ab2d3c27_f142dede",
      "revId": "d9d5234956aad2937793bc5cb6c90770dfbe8196",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5c2e1c9_476253d7",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 12
      },
      "lineNbr": 102,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-09-24T16:44:52Z",
      "side": 1,
      "message": "I gave this a thought and it does not seem easy to print a message on early boot when one of the MPIDRs is unsupported.\n\nWe could use a flag to mark when an unknown MPIDR has been detected so the primary CPU could print a message, but this could lead to a WAW dependency if the flag is erased by the primary CPU as part of .bss initialisation after it has been set by a secondary core.\n\nI could use a lock as I did for the topology discovery to avoid that but not sure that would be worthy as it might introduce delays at boot up.",
      "parentUuid": "5954b024_1b2b8971",
      "revId": "d9d5234956aad2937793bc5cb6c90770dfbe8196",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f44f867_9af1d684",
        "filename": "bl31/bl31_main.c",
        "patchSetId": 12
      },
      "lineNbr": 102,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-09-24T16:51:59Z",
      "side": 1,
      "message": "Yeah, it shouldn\u0027t get too complicated.\nWhat if this variable is initialised as \"1\", and you just set it to 2 in generic.S? Shouldn\u0027t that avoid it landing in .BSS? And all we care about is if *at least one* core is affected, so it should not be a problem if multiple cores race about that write.\nCould that work?",
      "parentUuid": "e5c2e1c9_476253d7",
      "revId": "d9d5234956aad2937793bc5cb6c90770dfbe8196",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bb03091_25571500",
        "filename": "plat/arm/board/arm_fpga/platform.mk",
        "patchSetId": 12
      },
      "lineNbr": 78,
      "author": {
        "id": 1000118
      },
      "writtenOn": "2020-09-23T10:35:11Z",
      "side": 1,
      "message": "I would not use this strict wording. For an FPGA model with a not-yet-supported core this is a totally legitimate build option. Can you just change to wording to something like:\n\" ... will run on cores with an unsupported or invalid MPID\"?",
      "revId": "d9d5234956aad2937793bc5cb6c90770dfbe8196",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4af9f04b_a98d0925",
        "filename": "plat/arm/board/arm_fpga/platform.mk",
        "patchSetId": 12
      },
      "lineNbr": 78,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2020-09-24T09:52:09Z",
      "side": 1,
      "message": "ACK and I will move it to a more generic part as you suggested on your other comment",
      "parentUuid": "4bb03091_25571500",
      "revId": "d9d5234956aad2937793bc5cb6c90770dfbe8196",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}