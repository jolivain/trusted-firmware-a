{
  "comments": [
    {
      "key": {
        "uuid": "6eb3737b_928b90d9",
        "filename": "drivers/console/multi_console.c",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-08-07T13:09:31Z",
      "side": 1,
      "message": "This function name violates MISRA C-2012 Rule 21.2, which forbids identifiers to start with an underscore. MISRA considers such identifiers as reserved for the standard library or compiler.\n\nI know this convention is widely used in the Linux kernel code but we are committed to enforce rule 21.2 so we need to find an alternate name for this. I can\u0027t think of a good one right now...",
      "range": {
        "startLine": 73,
        "startChar": 11,
        "endLine": 73,
        "endChar": 25
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce1b4ef6_fab39eed",
        "filename": "drivers/console/multi_console.c",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2019-08-08T02:57:16Z",
      "side": 1,
      "message": "do_putc()? putc_helper()?",
      "parentUuid": "6eb3737b_928b90d9",
      "range": {
        "startLine": 73,
        "startChar": 11,
        "endLine": 73,
        "endChar": 25
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ed84f52_d211388c",
        "filename": "drivers/console/multi_console.c",
        "patchSetId": 6
      },
      "lineNbr": 73,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2019-08-19T08:13:46Z",
      "side": 1,
      "message": "I will rename it to do_putc().",
      "parentUuid": "ce1b4ef6_fab39eed",
      "range": {
        "startLine": 73,
        "startChar": 11,
        "endLine": 73,
        "endChar": 25
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65583d3e_9c515e3d",
        "filename": "drivers/console/multi_console.c",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-08-07T13:09:31Z",
      "side": 1,
      "message": "This violates MISRA C-2012 Rule 10.4:\n\n Essential type of the left hand operand \"c\" (signed) is not the same as that\n of the right operand \"10\"(char).\n\nWe are not committed to enforce rule 10.4 but we encourage new code to comply to it.",
      "range": {
        "startLine": 77,
        "startChar": 6,
        "endLine": 77,
        "endChar": 15
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0f07791_d5830f3d",
        "filename": "drivers/console/multi_console.c",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-08-07T13:09:31Z",
      "side": 1,
      "message": "This violates MISRA C-2012 Rule 10.1 because this is an integer but it is used as a boolean here. Thus, this does not comply to MISRA\u0027s essential types model. This would need to be rewritten as:\n\n if ((c \u003d\u003d \u0027\\n\u0027) \u0026\u0026 ((console-\u003eflags \u0026 CONSOLE_FLAG_TRANSLATE_CRLF) !\u003d 0))\n\nWe are not committed to enforce rule 10.1 but we encourage new code to comply to it.",
      "range": {
        "startLine": 77,
        "startChar": 21,
        "endLine": 77,
        "endChar": 65
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e28c584_35bb58f6",
        "filename": "drivers/console/multi_console.c",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2019-08-08T03:08:02Z",
      "side": 1,
      "message": "I really do not understand your comments.\n\n\u0027\\n\u0027 is (int), not (char).\n\nTry this.\n\n#include \u003cstdio.h\u003e\nint main(void)\n{\n\tprintf(\"%d\\n\", __builtin_types_compatible_p(int, typeof(\u0027\\n\u0027)));\n\tprintf(\"%d\\n\", __builtin_types_compatible_p(char, typeof(\u0027\\n\u0027)));\n\treturn 0;\n}\n\n$ ./a.out\n1\n0\n\n\nBoth sides of (c \u003d\u003d \u0027\\n\u0027) are int. What\u0027s the problem?",
      "parentUuid": "65583d3e_9c515e3d",
      "range": {
        "startLine": 77,
        "startChar": 6,
        "endLine": 77,
        "endChar": 15
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c7342cf_fda663ac",
        "filename": "drivers/console/multi_console.c",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2019-08-19T08:13:46Z",
      "side": 1,
      "message": "I will follow this, but this line will not fit in 80-columns any more.\nIt will wrap it to the next line.",
      "parentUuid": "d0f07791_d5830f3d",
      "range": {
        "startLine": 77,
        "startChar": 21,
        "endLine": 77,
        "endChar": 65
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e9acc1c_6ce5377b",
        "filename": "drivers/console/multi_console.c",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2019-08-19T08:13:46Z",
      "side": 1,
      "message": "I will not change this since Sandrine did not respond.",
      "parentUuid": "6e28c584_35bb58f6",
      "range": {
        "startLine": 77,
        "startChar": 6,
        "endLine": 77,
        "endChar": 15
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab0dc1c3_0c455205",
        "filename": "include/drivers/console.h",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-08-07T11:39:16Z",
      "side": 1,
      "message": "It looks like this comment needs updating, as bit 8 is now allocated in this patch.",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 9
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07c262b4_264353e5",
        "filename": "include/drivers/console.h",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2019-08-07T12:27:14Z",
      "side": 1,
      "message": "OK, I will change it to\n/* Bits 8 to 31 for non-scope use. */",
      "parentUuid": "ab0dc1c3_0c455205",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 9
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9dc3c3a_f90a7de2",
        "filename": "include/drivers/console.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2019-08-07T13:09:31Z",
      "side": 1,
      "message": "This violates MISRA C-2012 Rule 12.2. In MISRA\u0027s essential types model, the essential type of U(1) is \"essentially unsigned char\" so Coverity complains about this literal being shifted by more than its width:\n\n In expression \"1U \u003c\u003c 8\", shifting more than 7 bits, the number of bits in the essential type of\n the left expression, \"1U\", is not allowed. The shift amount is 8.\n\nTo fix this, we would need to express it as:\n\n (UL(1) \u003c\u003c 8)\n\nIn MISRA\u0027s essential types model, the essential type of UL(1) is \"essentially unsigned long\" so a shift by 8 is legal.\n\nWe are committed to enforce rule 12.2 so this needs to be changed please.",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 47
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffed14cf_63db077a",
        "filename": "include/drivers/console.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000060
      },
      "writtenOn": "2019-08-08T02:57:16Z",
      "side": 1,
      "message": "This one really confuses me. I don\u0027t know what a MISRA essential type is, but according to the C standard (ISO C11 6.4.4.1 \"Integer constants\"), the type of the expression \"1U\" should definitely always be \"unsigned int\", and never anything shorter. I don\u0027t see any way how this could be interpreted to overflow an 8-bit value in even the strictest interpretation of C. What exactly is that MISRA warning trying to prevent?\n\nUsing 1UL instead seems wrong here, because that turns it into a 64-bit constant, which would then be implicitly downconverted when you assign it to a uint32_t.",
      "parentUuid": "e9dc3c3a_f90a7de2",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 47
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0292f50_9775d889",
        "filename": "include/drivers/console.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2019-08-08T03:08:02Z",
      "side": 1,
      "message": "I ran the following test code, at least my GCC\nthinks 1U is (unsigned int).\n\n#include \u003cstdio.h\u003e\nint main(void)\n{\n\tprintf(\"%d\\n\", __builtin_types_compatible_p(unsigned int, typeof(1U)));\n\tprintf(\"%d\\n\", __builtin_types_compatible_p(unsigned char, typeof(1U)));\n\treturn 0;\n}\n\n$ ./a.out \n1\n0",
      "parentUuid": "ffed14cf_63db077a",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 47
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dad489f_9a5de653",
        "filename": "include/drivers/console.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2019-08-19T08:13:46Z",
      "side": 1,
      "message": "I will not change this since Sandrine did not respond.",
      "parentUuid": "e0292f50_9775d889",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 47
      },
      "revId": "0eb2ba4c8dd93fe928cde148bc4c68ea570f335f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}