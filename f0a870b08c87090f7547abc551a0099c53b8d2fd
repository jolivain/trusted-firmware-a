{
  "comments": [
    {
      "key": {
        "uuid": "a401c2e9_a10909be",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2020-11-17T14:25:21Z",
      "side": 1,
      "message": "Can you explain to me how this works? To me it looks like we are powering down the cpu given in the arguments but disabling interrupts on the current calling core which may not be the cpu we\u0027ve powered down, I may be missing something though.\n\nAs far as I can tell this seems to work as all invocations of this function are for when cpu is equal to plat_my_core_pos() but in this case we would be safe to use the cpu variable in place of the plat_my_core_pos() function which seems more like how the function should behave. \n\nLet me know if I am missing something",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67b3e76f_03d464ca",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000471
      },
      "writtenOn": "2020-11-18T09:23:41Z",
      "side": 1,
      "message": "For mt8192 mcdi flow, core will close itself.\"cpu\" is indeed equal to plat_my_core_pos().\nWe use plat_my_core_pos() instead of cpu,because the gic cpu interface is banked register.Banked register can only be accessed by corresponding core,we hope to reflect the feature.",
      "parentUuid": "a401c2e9_a10909be",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "915bea1d_acff2061",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2020-11-18T10:04:33Z",
      "side": 1,
      "message": "Ok thanks for the clarification. It sounds to me like there is an assumption that cpu will equal plat_core_pos() in this function. If this is the case what is the need for the cpu variable? It is not present in plat_cpu_pwrdwn_common function for mt8183 which seems to just use plat_core_pos() where a cpu value is needed.\n \nI think either the cpu parameter should be removed or if it is planned that at some point cpu won\u0027t have to equal plat_my_core_pos() (which seems unlikely from your explanation) then at least a check of this assumption should be added in the meantime.",
      "parentUuid": "67b3e76f_03d464ca",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dd74cb1_17473ffc",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000471
      },
      "writtenOn": "2020-11-19T02:38:11Z",
      "side": 1,
      "message": "For 8192,In plat_cpu_pwrdwn_common(),other function use \u0027cpu\u0027.like plat_mt_pm_invoke_no_check.\nUse \u0027cpu\u0027 replace \u0027plat_my_core_pos()\" in gicv3_cpuif_disable is  feasible.Use plat_core_pos() in gicv3_cpuif_disable Just for legibility.\nWhat do you think? Use cpu replace plat_cpu_pwrdwn_common() or check if cpu \u003d\u003d plat_my_core_pos().",
      "parentUuid": "915bea1d_acff2061",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2feb570e_a9963f9b",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2020-11-19T17:22:25Z",
      "side": 1,
      "message": "I\u0027m not keen on having both the cpu argument and plat_core_pos() in the function as I think it causes confuction. As far as I can see there are 2 ways to avoid it:\n1) Either keep the cpu argument and add the check cpu \u003d\u003d plat_my_core_pos() at the top of the function\n2) Remove the cpu argument and just define a cpu variable that is local to the function at the top Eg:\n    unsigned int cpu \u003d plat_my_core_pos();\nand use it throughout\n\nBoth of these help reduce the number of calls to plat_my_core_pos() as well (although the compiler probably does this anyway)\n\nPersonally if cpu is never going to be able to have a value other than plat_my_core_pos() then I prefer the second option.",
      "parentUuid": "6dd74cb1_17473ffc",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "402078af_fbc5d662",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2020-11-20T01:57:43Z",
      "side": 1,
      "message": "In my opinion, I prefer to keep \u0027cpu\u0027 parameter and replace plat_my_core_pos() in xxx_common() function.\n\nxxx_common() are all static functions, i.e. only this module (plat_pm.c) functions can call them, so it\u0027s safe to trust parameters are valid from callers. In fact, most \u0027cpu\u0027 comes from caller also get from plat_my_core_pos(), so I think checking cpu \u003d\u003d plat_my_core_pos() can be omitted.\n\nBy the way, to reduce calling plat_my_core_pos(), using caller\u0027s \u0027cpu\u0027, which may also get from plat_my_core_pos(), is the best way. We don\u0027t need to call the same API again in xxx_common().",
      "parentUuid": "2feb570e_a9963f9b",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e2bf8be_bce1a06a",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2020-11-23T17:32:34Z",
      "side": 1,
      "message": "I have to agree with Daniel: it doesn\u0027t make sense for this function to take the `cpu` parameter at all, as it is not valid to use it with anything but the current core. Any call to this function would therefore always have to be invoked as `plat_cpu_pwrdwn_common(plat_my_core_pos(), ...)`, which I would consider to be a more error-prone alternative when you can simply elide the parameter altogether.\n\nI would strongly recommend removing the `cpu` parameter but, if you must keep it for other reasons, then at a minimum there should be an assertion at the top of the function that `cpu \u003d\u003d plat_my_core_pos()`. After all, assertions exist to identify programmer error, and not to handle incorrect parameters.",
      "parentUuid": "402078af_fbc5d662",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de3dba4b_28992690",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2020-11-25T02:54:14Z",
      "side": 1,
      "message": "I had added assert(cpu \u003d\u003d plat_my_core_pos()) in front of each *_common().",
      "parentUuid": "8e2bf8be_bce1a06a",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c69f6de8_8288108c",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2020-11-25T09:08:55Z",
      "side": 1,
      "message": "I agree with Chris and Daniel. As it was already mentioned, GIC CPU interface registers are banked and will be always accessed by the current CPU.",
      "parentUuid": "de3dba4b_28992690",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80ff9f7b_d871932b",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2020-11-25T09:16:18Z",
      "side": 1,
      "message": "Now \u0027cpu\u0027 is represent the current CPU.",
      "parentUuid": "c69f6de8_8288108c",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c34c3e21_a2f3cda5",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000361
      },
      "writtenOn": "2020-11-25T09:23:39Z",
      "side": 1,
      "message": "Hi Daniel, Chris, Alexei\n\n\u003e PS41, Line 70:\n\u003e I had added assert(cpu \u003d\u003d plat_my_core_pos()) in front of each *_common().\n\nPlease review PS47.",
      "parentUuid": "80ff9f7b_d871932b",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0925acea_65782d34",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 70,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2020-11-25T16:47:19Z",
      "side": 1,
      "message": "Thank you, this looks better to me now",
      "parentUuid": "c34c3e21_a2f3cda5",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e03b714_674d03a2",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 87,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2020-11-17T14:25:21Z",
      "side": 1,
      "message": "does",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9930bd51_99cd56db",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 87,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2020-11-18T03:38:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e03b714_674d03a2",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7307c9c3_93f48cf8",
        "filename": "plat/mediatek/mt8192/plat_pm.c",
        "patchSetId": 41
      },
      "lineNbr": 87,
      "author": {
        "id": 1000467
      },
      "writtenOn": "2020-11-18T10:04:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9930bd51_99cd56db",
      "revId": "f0a870b08c87090f7547abc551a0099c53b8d2fd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}