{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ecf5b552_baf26c46",
        "filename": "plat/qemu/qemu_sbsa/sbsa_sip_svc.c",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-06-03T20:22:45Z",
      "side": 1,
      "message": "Platform_version_major and platform_version_minor (due to static variables initialisation) are set to 0 if the function returns due to an error condition. That will give the NS world the wrong information, Or do you think \u00270\u0027 is an invalid version in this case? \n\nCould we not put the system into \u0027panic\u0027 if the version information could not be retrieved?",
      "revId": "6d41a3364d2454c871c9c11c9d18e97a4ad7f56c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80f79ff5_a83c22af",
        "filename": "plat/qemu/qemu_sbsa/sbsa_sip_svc.c",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2023-06-03T21:29:42Z",
      "side": 1,
      "message": "I think that I should initialize it with 0 to be 100% sure. C language standard does not define that uninitialized variables would be set to 0.\n\nIf we do not have DT then it means that QEMU is really old and we treat it as 0.0 anyway.",
      "parentUuid": "ecf5b552_baf26c46",
      "revId": "6d41a3364d2454c871c9c11c9d18e97a4ad7f56c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5a8dcc4_67d51562",
        "filename": "plat/qemu/qemu_sbsa/sbsa_sip_svc.c",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-06-04T17:02:46Z",
      "side": 1,
      "message": "\u003e I think that I should initialize it with 0 to be 100% sure. C language standard does not define that uninitialized variables would be set to 0.\n\nYes, better initialise then explicitly. \n\n\u003e If we do not have DT then it means that QEMU is really old and we treat it as 0.0 anyway.\nThanks, this makes sense!",
      "parentUuid": "80f79ff5_a83c22af",
      "revId": "6d41a3364d2454c871c9c11c9d18e97a4ad7f56c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f91bae0_d36c016b",
        "filename": "plat/qemu/qemu_sbsa/sbsa_sip_svc.c",
        "patchSetId": 13
      },
      "lineNbr": 81,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-06-03T20:22:45Z",
      "side": 1,
      "message": "Sorry for late comment.\nIt seems that you may not be aware of the standard SMC that provides SOC version and revision [1], Details about this SMC are present in the SMCCC specification [2]. Wouldn\u0027t it be great if you could use it?\n\n[1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/include/services/arm_arch_svc.h#n12\n[2]: https://developer.arm.com/documentation/den0028/latest/ (Section 7.4_",
      "range": {
        "startLine": 81,
        "startChar": 6,
        "endLine": 81,
        "endChar": 21
      },
      "revId": "6d41a3364d2454c871c9c11c9d18e97a4ad7f56c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c84dcf_1d71edbc",
        "filename": "plat/qemu/qemu_sbsa/sbsa_sip_svc.c",
        "patchSetId": 13
      },
      "lineNbr": 81,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2023-06-03T21:29:42Z",
      "side": 1,
      "message": "SMCCC_ARCH_SOC_ID is to identify SoC used by system. we can have different SoC (A57, A72, N1, max) and it is irrelevant which one we have.\n\nAnd we may use the same SoC with different platform versions.",
      "parentUuid": "7f91bae0_d36c016b",
      "range": {
        "startLine": 81,
        "startChar": 6,
        "endLine": 81,
        "endChar": 21
      },
      "revId": "6d41a3364d2454c871c9c11c9d18e97a4ad7f56c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "061c1106_25b6850c",
        "filename": "plat/qemu/qemu_sbsa/sbsa_sip_svc.c",
        "patchSetId": 13
      },
      "lineNbr": 81,
      "author": {
        "id": 1000328
      },
      "writtenOn": "2023-06-04T17:02:46Z",
      "side": 1,
      "message": "\u003e And we may use the same SoC with different platform versions.\n\nCan you please explain with example about this?\n\nMy understanding is there are two parts to SMCCC_ARCH_SOC_ID as per specification:\nSoC Version - A SoC version describes the SoC by providing a SiP-defined ID.\nSoC revision - The SiP defines the SoC revision (major.minor version).\nCan\u0027t SoC revision then be mapped to platform version? \n\nThe TF-A platform code contains a few implementations, for example [1] where Juno SoC-ID is 1 and SoC revision is retrieved via system register. Also, see tegra example [2]\n\n[1]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/arm/board/juno/juno_common.c#n124\n[2]: https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/tree/plat/nvidia/tegra/common/tegra_platform.c#n289",
      "parentUuid": "f6c84dcf_1d71edbc",
      "range": {
        "startLine": 81,
        "startChar": 6,
        "endLine": 81,
        "endChar": 21
      },
      "revId": "6d41a3364d2454c871c9c11c9d18e97a4ad7f56c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}