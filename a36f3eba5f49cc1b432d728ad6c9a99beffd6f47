{
  "comments": [
    {
      "key": {
        "uuid": "2e885cfc_76ab5c95",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-08-19T18:10:32Z",
      "side": 1,
      "message": "update copyright.",
      "range": {
        "startLine": 2,
        "startChar": 16,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af02ae90_b010ff84",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-08-20T06:28:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2e885cfc_76ab5c95",
      "range": {
        "startLine": 2,
        "startChar": 16,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "883dc179_1acc4bc4",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-08-19T18:10:32Z",
      "side": 1,
      "message": "PSCI is not compiled in anything other than BL31, so this is probably redundant.\nAlso dont see psci_stop_other_cores exposed in a header file. Might want to add it to the appropriate header file.",
      "range": {
        "startLine": 22,
        "startChar": 4,
        "endLine": 22,
        "endChar": 14
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2987b06f_93e25322",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000103
      },
      "writtenOn": "2020-08-20T07:27:03Z",
      "side": 1,
      "message": "PSCI can be compiled in BL32, on AARCH32 platforms. This is the case on STM32MP1. I wonder if this series of patches shouldn\u0027t handle this case?",
      "parentUuid": "883dc179_1acc4bc4",
      "range": {
        "startLine": 22,
        "startChar": 4,
        "endLine": 22,
        "endChar": 14
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52764a0f_2a649c9e",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-08-20T15:32:02Z",
      "side": 1,
      "message": "oh! My mistake. I did not know! Thanks for point it out.",
      "parentUuid": "2987b06f_93e25322",
      "range": {
        "startLine": 22,
        "startChar": 4,
        "endLine": 22,
        "endChar": 14
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c58e5a23_54ef28c8",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-08-17T23:44:41Z",
      "side": 1,
      "message": "What is the smc function ID that invokes this function? I mean how can this be invoked from normal world?",
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80ac9efe_f97963ff",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-08-18T06:29:24Z",
      "side": 1,
      "message": "I would use this from within TF-A.\n1- system_reset2 -\u003e plat_sys_reset2 -\u003e try to stop all other cores -\u003e do current core powerdown.\n2- secure watchdog interrupt -\u003e here I might want to stop rest of the cores.\n3- when TF-a panic happens it is probably desired to stop rest of the cores.\nMay be more usages will come in picture.\n\nSince this IPI is higher priority than other NS interrupts and delivered as fiq, It will be able\nto force other cores to come to secure side handler even if some core is stuck with irq locks in NS world.\n\nFrom NS world usage we have \u0027smp_cpu_stop/smp_cpu_crash_stop\u0027 so its not intended to replace them by SMC calls.",
      "parentUuid": "c58e5a23_54ef28c8",
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea9731c7_253fb82e",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T16:00:57Z",
      "side": 1,
      "message": "We should ask this on the mailing list. I feel that this might be used by a platform but is not useful for all of them. So moving this to the platform port looks like the best option.\n\nI dont think (1) is a valid use case. (2) and (3) are platform specific. plat_panic_handler() allows platforms to implement custom behavior for (3).",
      "parentUuid": "80ac9efe_f97963ff",
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "511055bd_b2a3369f",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2020-08-18T16:29:34Z",
      "side": 1,
      "message": "Thanks for the detailed explanation.",
      "parentUuid": "80ac9efe_f97963ff",
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7670757_8c24386a",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-08-19T13:11:28Z",
      "side": 1,
      "message": "\u003e\u003emoving this to the platform port looks like the best option\nIt will be called from platform say from \u0027plat_panic_handler()\u0027 or \u0027plat_xx_reset2()\u0027 or may be a watchdog handler. But the functionality this function implements is not platform dependent.\nIt depends on few psci private functions. So I thought it belongs here.\n\n\u003e\u003e We should ask this on the mailing list.\nI will post in list as well.\n\n\n\u003e\u003eRe, usecase 1) \nIt can be ignored. It is just one of the usage. Most platforms reset is a \"pull-the-plug\" approach and such requirement is not useful.\nSome configurations (eg:brcm smartNIC) need to retain CCN fully functional even when linux/atf goes through a warm reboot and we attempt CCN power channel handshake (P-accept) to do a graceful shutdown.",
      "parentUuid": "511055bd_b2a3369f",
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "724d5c64_7c46b15e",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T05:20:33Z",
      "side": 1,
      "message": "IIUC, this wont work if there are holes in the CPU numbering scheme, correct? I propose passing a CPU online bitmask to this function instead.",
      "range": {
        "startLine": 29,
        "startChar": 1,
        "endLine": 35,
        "endChar": 2
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f429a23b_8a983d3e",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-08-18T06:29:24Z",
      "side": 1,
      "message": "I think the \u0027core position(index) \u003c-\u003e MPIDR\u0027 map should take care of this ?\nI don\u0027t see an alternate way to get(query) each core power state. Also I think it is only important to get all target mpidrs. Additionally we are skipping the MPIDRs which is not ON(already off).",
      "parentUuid": "724d5c64_7c46b15e",
      "range": {
        "startLine": 29,
        "startChar": 1,
        "endLine": 35,
        "endChar": 2
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34b19851_efbefccd",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-08-18T16:00:57Z",
      "side": 1,
      "message": "But this wont work in a scenario where psci_cpu_pd_nodes[] has holes in the idx values. The current for loop does not cover that scenario",
      "parentUuid": "f429a23b_8a983d3e",
      "range": {
        "startLine": 29,
        "startChar": 1,
        "endLine": 35,
        "endChar": 2
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7eca531c_b19fd507",
        "filename": "lib/psci/psci_system_off.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2020-08-19T13:11:28Z",
      "side": 1,
      "message": "\u0027psci_is_last_on_cpu()\u0027 \u0027psci_print_power_domain_map()\u0027 all depend on \u0027plat_core_count\u0027 derived during setup. Since we are checking \u0027AFF_STATE_ON\u0027 it can not be an \u0027INVALID_MPIDR\u0027.\nPlease elaborate what you are seeing as an issue and if possible how to solve.",
      "parentUuid": "34b19851_efbefccd",
      "range": {
        "startLine": 29,
        "startChar": 1,
        "endLine": 35,
        "endChar": 2
      },
      "revId": "a36f3eba5f49cc1b432d728ad6c9a99beffd6f47",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}