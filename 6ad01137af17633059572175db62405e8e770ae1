{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c5ad935a_c886bd12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-05-09T14:08:50Z",
      "side": 1,
      "message": "Hi,\n\nI think it would be in a better place in lib/psa folder. It is a pure SW layer and does not touch any hardware. However, I\u0027m aware that there are exceptions in the driver folder. Furthermore, the cca-attest / cca_attestation namespace would suit better. \n\nThis is a wrapper around the delegated_attestation API. I see value in it if it will be reused by other platforms, otherwise, all the code here could go to the rd-fremont platform code.",
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "236dbd94_c7bb809f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000914
      },
      "writtenOn": "2024-05-16T17:40:49Z",
      "side": 1,
      "message": "I think this delegated attestation wrapper driver has usage across multiple Arm platforms. I can move this to cca-attest/cca-attestation namespace if that sounds alright to everyone.",
      "parentUuid": "c5ad935a_c886bd12",
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42f40e54_2bbf6324",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.c",
        "patchSetId": 9
      },
      "lineNbr": 6,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-05-09T14:08:50Z",
      "side": 1,
      "message": "nit: insert blank line",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 19
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e632aa79_d1163aee",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.c",
        "patchSetId": 9
      },
      "lineNbr": 6,
      "author": {
        "id": 1000914
      },
      "writtenOn": "2024-05-16T17:40:49Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "42f40e54_2bbf6324",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 19
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3919d850_2c27ec84",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.c",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-05-09T14:08:50Z",
      "side": 1,
      "message": "RSE will check whether the buffer is big enough. no point in limiting here to 48 bytes",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 55
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76f9ea49_a3841587",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.c",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1000914
      },
      "writtenOn": "2024-05-16T17:40:49Z",
      "side": 1,
      "message": "Here too, passing a 4K buffer may not be possible.",
      "parentUuid": "3919d850_2c27ec84",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 55
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "064ad620_8b02d046",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.c",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-05-09T14:08:50Z",
      "side": 1,
      "message": "I do not see the point why limit the RMM allocated buffer? Is there any limitation on the MHU channel? RMM probably allocates a 4K page.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 43
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "119ed8fe_daf45a82",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.c",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1000914
      },
      "writtenOn": "2024-05-16T17:40:49Z",
      "side": 1,
      "message": "This is limited to 0x800 as a limitation in tf-m rse-comms. This should be handled across both tf-m and tf-a stacks.",
      "parentUuid": "064ad620_8b02d046",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 43
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5130f0d1_db7ad181",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.h",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-05-09T14:08:50Z",
      "side": 1,
      "message": "not necessary",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "281bdf8a_6554e9a5",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.h",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1000914
      },
      "writtenOn": "2024-05-16T17:40:49Z",
      "side": 1,
      "message": "This would be needed to use the checks for PSA_KEY_EXPORT_ECC_KEY_PAIR_MAX_SIZE(384). \n\nLet me know if the buffer length checks in delegated_attestation.c driver file looks alright.",
      "parentUuid": "5130f0d1_db7ad181",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 29
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "084d7821_1e0e2056",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.h",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-05-09T14:08:50Z",
      "side": 1,
      "message": "not necessary",
      "range": {
        "startLine": 13,
        "startChar": 8,
        "endLine": 13,
        "endChar": 40
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3eb9a5b2_39145357",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.h",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1000914
      },
      "writtenOn": "2024-05-16T17:40:49Z",
      "side": 1,
      "message": "The tf-m rse-comms driver currently has a limitation of allowing only 0x800 as the size of the payload:\n\nhttps://git.trustedfirmware.org/TF-M/trusted-firmware-m.git/+/refs/heads/main/platform/ext/target/arm/rse/common/rse_comms/rse_comms_protocol_embed.c#60\n\nThis is currently limiting the amount of embed data over MHU.",
      "parentUuid": "084d7821_1e0e2056",
      "range": {
        "startLine": 13,
        "startChar": 8,
        "endLine": 13,
        "endChar": 40
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03e4a2c9_1c74d616",
        "filename": "drivers/delegated_attestation/rse/rse_delegated_attestation.h",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2024-05-17T06:53:07Z",
      "side": 1,
      "message": "There are two types of protocol versions of MHU:\n- RSE_COMMS_PROTOCOL_POINTER_ACCESS\n- RSE_COMMS_PROTOCOL_EMBED\n\nIt is decided here which one to use:\nhttps://git.trustedfirmware.org/TF-A/trusted-firmware-a/+/refs/heads/master/drivers/arm/rse/rse_comms.c\n\nI think the 800 bytes limitation is only applicable to the RSE_COMMS_PROTOCOL_EMBED.\n\nWhich one is used on rd-fremont?  On the TC platform RSE_COMMS_PROTOCOL_POINTER_ACCESS.",
      "parentUuid": "3eb9a5b2_39145357",
      "range": {
        "startLine": 13,
        "startChar": 8,
        "endLine": 13,
        "endChar": 40
      },
      "revId": "6ad01137af17633059572175db62405e8e770ae1",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}