{
  "comments": [
    {
      "key": {
        "uuid": "ffadc7ac_7fe276f2",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-04T14:21:00Z",
      "side": 1,
      "message": "Remove conditional complation",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "124349d1_aa7f8578",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-04T14:21:00Z",
      "side": 1,
      "message": "Would prefer to remove the conditional compilation for function definition if the caller is already calling it conditionally. Linker will remove all unreferenced sections.",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15408404_0b5da712",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-04T14:44:46Z",
      "side": 1,
      "message": "This makes compilation faster and removes dummy entries from map file, which will be present otherwise.",
      "parentUuid": "124349d1_aa7f8578",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c0ee09e_9eb5d34f",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-05T09:58:14Z",
      "side": 1,
      "message": "This file is a collection of library functions and conditionally compiling every one is not maintainable. This is how generally library functions are included in compilation. So would suggest to remove the conditionals in this file.",
      "parentUuid": "15408404_0b5da712",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95f909e6_11e6fbb1",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-05T10:53:51Z",
      "side": 1,
      "message": "fixup_gdt_reloc() is not a library function because it is called just once from one place on start up.",
      "parentUuid": "3c0ee09e_9eb5d34f",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6b3ded1_ebcadfb3",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-05T15:29:32Z",
      "side": 1,
      "message": "I dont think we want to go into definition of library here. All the functions here as helper utilities and the compilation for this file here doesn\u0027t need to worry what is included in the build. Depending on the config, and if the section is referenced, the section is included in binary. Thats a scalable approach and dont want to break that precedance just for this patch.\n\nThis will also help in the componentization of the TF-A build when each component is treated as separate entity when the build system is reworked and minimize interdependant configuration.",
      "parentUuid": "95f909e6_11e6fbb1",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7986a85_2de17aff",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 497,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-04T14:21:00Z",
      "side": 1,
      "message": "Remove as this is not used in the code below.",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47d64354_f43745fb",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 497,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-04T14:39:34Z",
      "side": 1,
      "message": "This definition is added for consistency, to show that this is valid entry, which is referenced on line #569 and should be ignored.",
      "parentUuid": "a7986a85_2de17aff",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb0b0def_3ad86a35",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 497,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-05T09:58:14Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "47d64354_f43745fb",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aefa8dfc_9c4db28a",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-12-28T15:58:35Z",
      "side": 1,
      "message": "General question: Do we even need GOT relocations at all? hafnium for ex, does not touch the GOT since the relocations applied through __RELA_START__/__RELA_END__ have relocations to fix up the GOT as well. So should we get rid of the GOT relocation loop entirely?\nNot an expert on the ELF spec but it seems logical to me that the relocation section also contains relocations for the GOT as well.\n\nSee: https://git.trustedfirmware.org/hafnium/hafnium.git/tree/src/arch/aarch64/entry.S#n40",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6f5f2a0_af17cb29",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-04T14:21:00Z",
      "side": 1,
      "message": "When I did the first support for this, I did find GOT entries which needed fixup. Not sure about the latest situation in TF-A.",
      "parentUuid": "aefa8dfc_9c4db28a",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bfd21ae_57a76f56",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2021-01-04T16:20:16Z",
      "side": 1,
      "message": "Thanks Soby. That is odd. Either we are missing something in hafnium or potentially masking some issue by performing GOT relocation in TF-A.. When i looked at hafnium the relocation section had relocations for got entries too. In any case, i think this needs to be resolved in one or both places.",
      "parentUuid": "e6f5f2a0_af17cb29",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e82bab51_6a994d7f",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2021-01-04T17:59:45Z",
      "side": 1,
      "message": "Just two side notes:\n-Hafnium is built with clang whereas TF-A is using gcc by default (we can try building TF-A with clang). Not sure this really makes a difference though.\n-I noticed if ENABLE_PIE\u003d0 for BL31, readelf outputs a lot a errors when dumping bl31.elf (such as readelf: Error:  bad symbol index: 531c7c01 in reloc..). This is probably unrelated to current issue, but worth looking at it.",
      "parentUuid": "4bfd21ae_57a76f56",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8c57421_2d15c852",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2021-01-04T18:32:32Z",
      "side": 1,
      "message": "Thanks Olivier. That\u0027s a good point. Possible that the different compiler is the difference. I did not think that would be the case because relocation should be part of the ELF standard and did not think they would produce different relocation sections..",
      "parentUuid": "e82bab51_6a994d7f",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd40a508_689761ac",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2021-01-05T08:38:14Z",
      "side": 1,
      "message": "I attempted removing the GOT symbol relocation (lines 519-544) and BL31 still boots with ENABLE_PIE\u003d1 on a simple test case. I can further run a full CI with this change.\nI also removed the GOT relocation from cactus image which is always PIE enabled (https://git.trustedfirmware.org/TF-A/tf-a-tests.git/tree/lib/aarch64/misc_helpers.S#n151) and this did not make a difference.\n\nMore generally, if GOT symbols have to be relocated, should this rather be through R_AARCH64_GLOB_DAT elf entry?",
      "parentUuid": "a8c57421_2d15c852",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2179fcbc_4deb70c4",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-05T09:58:14Z",
      "side": 1,
      "message": "My understanding is that  if there are GOT entries in the ELF, then they need to be fixed up.  The only way to be sure is to look at the GOT entry, go to the address which needs fixup and examine the variable. Then we know what would happen if the fixup is not done.\n\nR_AARCH64_GLOB_DAT could a duplicate of the GOT tables I suspect. But need confirmation.",
      "parentUuid": "cd40a508_689761ac",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0386c308_21a75889",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000228
      },
      "writtenOn": "2021-01-05T16:15:18Z",
      "side": 1,
      "message": "Ok let\u0027s leave this as further improvement if needed (if Raghu agrees).\nThis should not gate the current change.",
      "parentUuid": "2179fcbc_4deb70c4",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e21215e_181d8266",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2021-01-05T18:05:54Z",
      "side": 1,
      "message": "Thanks Olivier. I did the same experiment as well which is why i brought it up. Yep, this is orthogonal and intent was not to block. We can look into it in a different patch. Marking resolved. Thanks all.",
      "parentUuid": "0386c308_21a75889",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": false
    }
  ]
}