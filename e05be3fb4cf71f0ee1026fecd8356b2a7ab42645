{
  "comments": [
    {
      "key": {
        "uuid": "ffadc7ac_7fe276f2",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-04T14:21:00Z",
      "side": 1,
      "message": "Remove conditional complation",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "124349d1_aa7f8578",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-04T14:21:00Z",
      "side": 1,
      "message": "Would prefer to remove the conditional compilation for function definition if the caller is already calling it conditionally. Linker will remove all unreferenced sections.",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15408404_0b5da712",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-04T14:44:46Z",
      "side": 1,
      "message": "This makes compilation faster and removes dummy entries from map file, which will be present otherwise.",
      "parentUuid": "124349d1_aa7f8578",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7986a85_2de17aff",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 497,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-04T14:21:00Z",
      "side": 1,
      "message": "Remove as this is not used in the code below.",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47d64354_f43745fb",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 497,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2021-01-04T14:39:34Z",
      "side": 1,
      "message": "This definition is added for consistency, to show that this is valid entry, which is referenced on line #569 and should be ignored.",
      "parentUuid": "a7986a85_2de17aff",
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aefa8dfc_9c4db28a",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2020-12-28T15:58:35Z",
      "side": 1,
      "message": "General question: Do we even need GOT relocations at all? hafnium for ex, does not touch the GOT since the relocations applied through __RELA_START__/__RELA_END__ have relocations to fix up the GOT as well. So should we get rid of the GOT relocation loop entirely?\nNot an expert on the ELF spec but it seems logical to me that the relocation section also contains relocations for the GOT as well.\n\nSee: https://git.trustedfirmware.org/hafnium/hafnium.git/tree/src/arch/aarch64/entry.S#n40",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6f5f2a0_af17cb29",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-04T14:21:00Z",
      "side": 1,
      "message": "When I did the first support for this, I did find GOT entries which needed fixup. Not sure about the latest situation in TF-A.",
      "parentUuid": "aefa8dfc_9c4db28a",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bfd21ae_57a76f56",
        "filename": "lib/aarch64/misc_helpers.S",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2021-01-04T16:20:16Z",
      "side": 1,
      "message": "Thanks Soby. That is odd. Either we are missing something in hafnium or potentially masking some issue by performing GOT relocation in TF-A.. When i looked at hafnium the relocation section had relocations for got entries too. In any case, i think this needs to be resolved in one or both places.",
      "parentUuid": "e6f5f2a0_af17cb29",
      "range": {
        "startLine": 517,
        "startChar": 0,
        "endLine": 517,
        "endChar": 49
      },
      "revId": "e05be3fb4cf71f0ee1026fecd8356b2a7ab42645",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda",
      "unresolved": true
    }
  ]
}