{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b9742f0d_b0bc79b2",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 17
      },
      "lineNbr": 235,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-16T16:13:56Z",
      "side": 1,
      "message": "the dsb invocation can be consistent for the helpers. Can be done at caller side. Also dsbosh() should be sufficient.",
      "range": {
        "startLine": 235,
        "startChar": 0,
        "endLine": 235,
        "endChar": 9
      },
      "revId": "9b2748eab77026d4d16c0d49c4de677f13ebd646",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d74e301_66c08f22",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 17
      },
      "lineNbr": 235,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-04-17T17:15:25Z",
      "side": 1,
      "message": "dsbosh() is called after\ngpt_tlbi_lookup[level].function(base \u0026 gpt_tlbi_lookup[level].mask)\nand\ntlbi_page(). I\u0027ll remove call to dsbsy();",
      "parentUuid": "b9742f0d_b0bc79b2",
      "range": {
        "startLine": 235,
        "startChar": 0,
        "endLine": 235,
        "endChar": 9
      },
      "revId": "9b2748eab77026d4d16c0d49c4de677f13ebd646",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59a160ac_46dfa6a2",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 17
      },
      "lineNbr": 235,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-04-18T08:08:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d74e301_66c08f22",
      "range": {
        "startLine": 235,
        "startChar": 0,
        "endLine": 235,
        "endChar": 9
      },
      "revId": "9b2748eab77026d4d16c0d49c4de677f13ebd646",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d96dafe7_771a5942",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 17
      },
      "lineNbr": 1591,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-16T16:13:56Z",
      "side": 1,
      "message": "we dont need intermediate tlbi if being fused to higher size. Just need to issue tlbi for the highest fuse size.",
      "range": {
        "startLine": 1591,
        "startChar": 3,
        "endLine": 1591,
        "endChar": 18
      },
      "revId": "9b2748eab77026d4d16c0d49c4de677f13ebd646",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c5f6547_aca34ddd",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 17
      },
      "lineNbr": 1591,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-04-17T17:15:25Z",
      "side": 1,
      "message": "This is not intermediate TLBI, but the terminating one, because function returns as the only 2MB contiguous block was found. The same applies to 32MB block. In case of 512MB, only 1 TLBI will be issued.",
      "parentUuid": "d96dafe7_771a5942",
      "range": {
        "startLine": 1591,
        "startChar": 3,
        "endLine": 1591,
        "endChar": 18
      },
      "revId": "9b2748eab77026d4d16c0d49c4de677f13ebd646",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef0ecdf3_ee22c8db",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 17
      },
      "lineNbr": 1887,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-04-16T16:13:56Z",
      "side": 1,
      "message": "it seems we have 2 variants for undelegate_shatter whereas the same fuse is used for delegate and undelegate. \n\nCan we not have a unified shatter for both cases? \n\nIt seems the sequence to follow for undelegate is:\n\nshatter()  --\u003e conditionally enabled and issue tlbi for highest size involved.\nremove_access()\nwrite_gpt()\ntlbi_page()\nflush_page()\n\nfuse() --\u003e conditionally enabled and issue tlbi for highest size.\n\n\nFor delegate() your implementation seems inline.",
      "range": {
        "startLine": 1887,
        "startChar": 2,
        "endLine": 1887,
        "endChar": 20
      },
      "revId": "9b2748eab77026d4d16c0d49c4de677f13ebd646",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cab11be_61fb074d",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 17
      },
      "lineNbr": 1887,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-04-17T17:15:25Z",
      "side": 1,
      "message": "Undelegate shatter path requires remove_access() call, which is not needed for delegate.",
      "parentUuid": "ef0ecdf3_ee22c8db",
      "range": {
        "startLine": 1887,
        "startChar": 2,
        "endLine": 1887,
        "endChar": 20
      },
      "revId": "9b2748eab77026d4d16c0d49c4de677f13ebd646",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aebf731_fe55ff4f",
        "filename": "lib/gpt_rme/gpt_rme.c",
        "patchSetId": 17
      },
      "lineNbr": 1887,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-04-18T08:22:56Z",
      "side": 1,
      "message": "Now both delegate \u0026 undelegate paths use common shatter_block() function.\nIn original implementation in gpt_undelegate_pas() flush_dcache_to_popa_range() is called before write_gpt() and gpt_tlbi_by_pa_ll() calls. The new patch uses the same sequence. Should flush_dcache_to_popa_range() with nse\u003dGPT_NSE_NS be moved after tlbi_page()?",
      "parentUuid": "5cab11be_61fb074d",
      "range": {
        "startLine": 1887,
        "startChar": 2,
        "endLine": 1887,
        "endChar": 20
      },
      "revId": "9b2748eab77026d4d16c0d49c4de677f13ebd646",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}